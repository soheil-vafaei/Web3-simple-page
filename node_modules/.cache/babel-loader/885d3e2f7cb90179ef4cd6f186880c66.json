{"ast":null,"code":"const {\n  default: ENSJS,\n  getEnsAddress\n} = require(\"@ensdomains/ensjs\");\n\nconst {\n  isAddress\n} = require(\"web3-utils\");\n\nmodule.exports = {\n  convertENSNames: async function (_ref) {\n    let {\n      ens,\n      inputArgs,\n      methodABI,\n      inputParams,\n      web3,\n      networkId\n    } = _ref;\n    const {\n      registryAddress\n    } = ens;\n    let args;\n\n    if (inputArgs.length && methodABI) {\n      args = await this.convertENSArgsNames({\n        inputArgs,\n        methodABI,\n        web3,\n        registryAddress,\n        networkId\n      });\n    } else {\n      args = inputArgs;\n    }\n\n    let params;\n\n    if (inputParams) {\n      params = await this.convertENSParamsNames({\n        inputParams,\n        web3,\n        registryAddress,\n        networkId\n      });\n    }\n\n    return {\n      args,\n      params\n    };\n  },\n  getNewENSJS: function (_ref2) {\n    let {\n      provider,\n      registryAddress,\n      networkId\n    } = _ref2;\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n  resolveNameToAddress: async function (_ref3) {\n    let {\n      name,\n      provider,\n      registryAddress,\n      networkId\n    } = _ref3;\n    let ensjs;\n\n    try {\n      ensjs = this.getNewENSJS({\n        provider,\n        registryAddress,\n        networkId\n      });\n    } catch (error) {\n      const message = \"There was a problem initializing the ENS library.\" + \"Please ensure you have the address of the registry set correctly.\" + ` Truffle is currently using ${registryAddress}.`;\n      throw new Error(`${message} - ${error.message}`);\n    }\n\n    return await ensjs.name(name).getAddress(\"ETH\");\n  },\n  convertENSArgsNames: function (_ref4) {\n    let {\n      inputArgs,\n      methodABI,\n      web3,\n      registryAddress,\n      networkId\n    } = _ref4;\n    if (methodABI.inputs.length === 0) return inputArgs;\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n  convertENSParamsNames: async function (_ref5) {\n    let {\n      inputParams,\n      web3,\n      registryAddress,\n      networkId\n    } = _ref5;\n    let outputParams = inputParams;\n\n    if (inputParams.from && !isAddress(inputParams.from)) {\n      const newFrom = await this.resolveNameToAddress({\n        name: inputParams.from,\n        provider: web3.currentProvider,\n        networkId,\n        registryAddress\n      });\n      outputParams = { ...outputParams,\n        from: newFrom\n      };\n    }\n\n    if (inputParams.accessList && Array.isArray(inputParams.accessList)) {\n      const newAccessList = await Promise.all(inputParams.accessList.map(async entry => {\n        if (entry && entry.address && !isAddress(entry.address)) {\n          const newAddress = await this.resolveNameToAddress({\n            name: entry.address,\n            provider: web3.currentProvider,\n            networkId,\n            registryAddress\n          });\n          return { ...entry,\n            address: newAddress\n          };\n        } else {\n          return entry;\n        }\n      }));\n      outputParams = { ...outputParams,\n        accessList: newAccessList\n      };\n    }\n\n    return outputParams;\n  }\n};","map":{"version":3,"names":["default","ENSJS","getEnsAddress","require","isAddress","module","exports","convertENSNames","ens","inputArgs","methodABI","inputParams","web3","networkId","registryAddress","args","length","convertENSArgsNames","params","convertENSParamsNames","getNewENSJS","provider","ensAddress","resolveNameToAddress","name","ensjs","error","message","Error","getAddress","inputs","convertedNames","map","argument","index","type","argIsAddress","currentProvider","Promise","all","outputParams","from","newFrom","accessList","Array","isArray","newAccessList","entry","address","newAddress"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/@truffle/contract/lib/utils/ens.js"],"sourcesContent":["const { default: ENSJS, getEnsAddress } = require(\"@ensdomains/ensjs\");\nconst { isAddress } = require(\"web3-utils\");\n\nmodule.exports = {\n  convertENSNames: async function ({\n    ens,\n    inputArgs,\n    methodABI,\n    inputParams,\n    web3,\n    networkId\n  }) {\n    const { registryAddress } = ens;\n    let args;\n    if (inputArgs.length && methodABI) {\n      args = await this.convertENSArgsNames({\n        inputArgs,\n        methodABI,\n        web3,\n        registryAddress,\n        networkId\n      });\n    } else {\n      args = inputArgs;\n    }\n    let params;\n    if (inputParams) {\n      params = await this.convertENSParamsNames({\n        inputParams,\n        web3,\n        registryAddress,\n        networkId\n      });\n    }\n    return { args, params };\n  },\n\n  getNewENSJS: function ({ provider, registryAddress, networkId }) {\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n\n  resolveNameToAddress: async function ({\n    name,\n    provider,\n    registryAddress,\n    networkId\n  }) {\n    let ensjs;\n    try {\n      ensjs = this.getNewENSJS({\n        provider,\n        registryAddress,\n        networkId\n      });\n    } catch (error) {\n      const message =\n        \"There was a problem initializing the ENS library.\" +\n        \"Please ensure you have the address of the registry set correctly.\" +\n        ` Truffle is currently using ${registryAddress}.`;\n      throw new Error(`${message} - ${error.message}`);\n    }\n    return await ensjs.name(name).getAddress(\"ETH\");\n  },\n\n  convertENSArgsNames: function ({\n    inputArgs,\n    methodABI,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    if (methodABI.inputs.length === 0) return inputArgs;\n\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n\n  convertENSParamsNames: async function ({\n    inputParams,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    let outputParams = inputParams;\n    if (inputParams.from && !isAddress(inputParams.from)) {\n      const newFrom = await this.resolveNameToAddress({\n        name: inputParams.from,\n        provider: web3.currentProvider,\n        networkId,\n        registryAddress\n      });\n      outputParams = {\n        ...outputParams,\n        from: newFrom\n      };\n    }\n    if (inputParams.accessList && Array.isArray(inputParams.accessList)) {\n      const newAccessList = await Promise.all(\n        inputParams.accessList.map(async (entry) => {\n          if (entry && entry.address && !isAddress(entry.address)) {\n            const newAddress = await this.resolveNameToAddress({\n              name: entry.address,\n              provider: web3.currentProvider,\n              networkId,\n              registryAddress\n            });\n            return {\n              ...entry,\n              address: newAddress\n            };\n          } else {\n            return entry;\n          }\n        })\n      );\n      outputParams = {\n        ...outputParams,\n        accessList: newAccessList\n      };\n    }\n    return outputParams;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}