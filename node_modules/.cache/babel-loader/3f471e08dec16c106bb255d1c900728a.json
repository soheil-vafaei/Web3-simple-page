{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 0;\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n\nvar Transaction =\n/** @class */\nfunction (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n\n\n  function Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _this = this;\n\n    var _a;\n\n    _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts) || this;\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n\n    if (_this.gasPrice.mul(_this.gasLimit).gt(ethereumjs_util_1.MAX_INTEGER)) {\n      var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\n      throw new Error(msg);\n    }\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = _this.v;\n\n        var chainIdDoubled = _this.common.chainIdBN().muln(2); // v and chain ID meet EIP-155 conditions\n\n\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          _this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n\n    if (_this.common.isActivatedEIP(3860)) {\n      (0, util_1.checkMaxInitCodeSize)(_this.common, _this.data.length);\n    }\n\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n\n\n  Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new Transaction(txData, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n\n\n  Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized);\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n\n    return this.fromValuesArray(values, opts);\n  };\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n\n\n  Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n\n\n  Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    } // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n\n\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n\n    var _a = __read(values, 9),\n        nonce = _a[0],\n        gasPrice = _a[1],\n        gasLimit = _a[2],\n        to = _a[3],\n        value = _a[4],\n        data = _a[5],\n        v = _a[6],\n        r = _a[7],\n        s = _a[8];\n\n    (0, ethereumjs_util_1.validateNoLeadingZeroes)({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      value: value,\n      v: v,\n      r: r,\n      s: s\n    });\n    return new Transaction({\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      v: v,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.raw = function () {\n    return [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data, this.v !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.v) : Buffer.from([]), this.r !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.r) : Buffer.from([]), this.s !== undefined ? (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.s) : Buffer.from([])];\n  };\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n\n\n  Transaction.prototype.serialize = function () {\n    return ethereumjs_util_1.rlp.encode(this.raw());\n  };\n\n  Transaction.prototype._getMessageToSign = function () {\n    var values = [(0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.nonce), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasPrice), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(this.value), this.data];\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, ethereumjs_util_1.toBuffer)(this.common.chainIdBN()));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n      values.push((0, ethereumjs_util_1.unpadBuffer)((0, ethereumjs_util_1.toBuffer)(0)));\n    }\n\n    return values;\n  };\n\n  Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var message = this._getMessageToSign();\n\n    if (hashMessage) {\n      return (0, ethereumjs_util_1.rlphash)(message);\n    } else {\n      return message;\n    }\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  Transaction.prototype.getDataFee = function () {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: _super.prototype.getDataFee.call(this),\n        hardfork: this.common.hardfork()\n      };\n    }\n\n    return _super.prototype.getDataFee.call(this);\n  };\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n\n\n  Transaction.prototype.hash = function () {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, ethereumjs_util_1.rlphash)(this.raw());\n      }\n\n      return this.cache.hash;\n    }\n\n    return (0, ethereumjs_util_1.rlphash)(this.raw());\n  };\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n\n\n  Transaction.prototype.getMessageToVerifySignature = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    var message = this._getMessageToSign();\n\n    return (0, ethereumjs_util_1.rlphash)(message);\n  };\n  /**\n   * Returns the public key of the sender\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n\n      throw new Error(msg);\n    }\n\n    var _b = this,\n        v = _b.v,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return (0, ethereumjs_util_1.ecrecover)(msgHash, v, (0, ethereumjs_util_1.bnToUnpaddedBuffer)(r), (0, ethereumjs_util_1.bnToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined);\n    } catch (e) {\n      var msg = this._errorMsg('Invalid Signature');\n\n      throw new Error(msg);\n    }\n  };\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n\n\n  Transaction.prototype._processSignature = function (v, r, s) {\n    var vBN = new ethereumjs_util_1.BN(v);\n\n    if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8));\n    }\n\n    var opts = __assign(__assign({}, this.txOptions), {\n      common: this.common\n    });\n\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v: vBN,\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n\n\n  Transaction.prototype.toJSON = function () {\n    return {\n      nonce: (0, ethereumjs_util_1.bnToHex)(this.nonce),\n      gasPrice: (0, ethereumjs_util_1.bnToHex)(this.gasPrice),\n      gasLimit: (0, ethereumjs_util_1.bnToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, ethereumjs_util_1.bnToHex)(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, ethereumjs_util_1.bnToHex)(this.s) : undefined\n    };\n  };\n  /**\n   * Validates tx's `v` value\n   */\n\n\n  Transaction.prototype._validateTxV = function (v, common) {\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v.ltn(37) && !v.eqn(27) && !v.eqn(28)) {\n        throw new Error(\"Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = \".concat(v));\n      }\n    }\n\n    var chainIdBN; // No unsigned tx and EIP-155 activated and chain ID included\n\n    if (v !== undefined && (!common || common.gteHardfork('spuriousDragon')) && !v.eqn(27) && !v.eqn(28)) {\n      if (common) {\n        var chainIdDoubled = common.chainIdBN().muln(2);\n        var isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n\n        if (!isValidEIP155V) {\n          throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainIdBN(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n        }\n      } else {\n        // Derive the original chain ID\n        var numSub = void 0;\n\n        if (v.subn(35).isEven()) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        } // Use derived chain ID to create a proper Common\n\n\n        chainIdBN = v.subn(numSub).divn(2);\n      }\n    }\n\n    return this._getCommon(common, chainIdBN);\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n    return this.common.gteHardfork('spuriousDragon');\n  };\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n\n\n  Transaction.prototype._signedTxImplementsEIP155 = function () {\n    if (!this.isSigned()) {\n      var msg = this._errorMsg('This transaction is not signed');\n\n      throw new Error(msg);\n    }\n\n    var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon'); // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\n    var v = this.v;\n    var chainIdDoubled = this.common.chainIdBN().muln(2);\n    var vAndChainIdMeetEIP155Conditions = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36));\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n  };\n  /**\n   * Return a compact error string representation of the object\n   */\n\n\n  Transaction.prototype.errorStr = function () {\n    var errorStr = this._getSharedErrorPostfix();\n\n    errorStr += \" gasPrice=\".concat(this.gasPrice);\n    return errorStr;\n  };\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n\n\n  Transaction.prototype._errorMsg = function (msg) {\n    return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n  };\n\n  return Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = Transaction;","map":{"version":3,"mappings":"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","names":["TRANSACTION_TYPE","__extends","txData","opts","_super","type","_this","common","_validateTxV","v","gasPrice","ethereumjs_util_1","mul","gasLimit","gt","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","gteHardfork","isSigned","activeCapabilities","push","types_1","EIP155ReplayProtection","chainIdDoubled","chainIdBN","muln","eq","addn","isActivatedEIP","data","length","freeze","_a","Object","Transaction","serialized","values","decode","Array","isArray","fromValuesArray","fromSerializedTx","nonce","to","value","r","s","undefined","buf","Buffer","from","encode","raw","supports","hashMessage","message","_getMessageToSign","cache","dataFee","hardfork","isFrozen","getDataFee","call","add","hash","msgHash","getMessageToVerifySignature","e","vBN","iadd","txOptions","fromTxData","toString","ltn","eqn","isValidEIP155V","concat","numSub","subn","isEven","divn","_getCommon","onEIP155BlockOrLater","vAndChainIdMeetEIP155Conditions","errorStr","_getSharedErrorPostfix","baseTransaction_1"],"sourceRoot":"","sources":["../src/legacyTransaction.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}