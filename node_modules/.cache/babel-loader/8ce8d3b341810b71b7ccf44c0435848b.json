{"ast":null,"code":"import prand from 'pure-rand';\nimport { VerbosityLevel } from './VerbosityLevel.js';\nexport class QualifiedParameters {\n  constructor(op) {\n    const p = op || {};\n    this.seed = QualifiedParameters.readSeed(p);\n    this.randomType = QualifiedParameters.readRandomType(p);\n    this.numRuns = QualifiedParameters.readNumRuns(p);\n    this.verbose = QualifiedParameters.readVerbose(p);\n    this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, 'maxSkipsPerRun', 100);\n    this.timeout = QualifiedParameters.readOrDefault(p, 'timeout', null);\n    this.skipAllAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'skipAllAfterTimeLimit', null);\n    this.interruptAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'interruptAfterTimeLimit', null);\n    this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, 'markInterruptAsFailure');\n    this.skipEqualValues = QualifiedParameters.readBoolean(p, 'skipEqualValues');\n    this.ignoreEqualValues = QualifiedParameters.readBoolean(p, 'ignoreEqualValues');\n    this.logger = QualifiedParameters.readOrDefault(p, 'logger', v => {\n      console.log(v);\n    });\n    this.path = QualifiedParameters.readOrDefault(p, 'path', '');\n    this.unbiased = QualifiedParameters.readBoolean(p, 'unbiased');\n    this.examples = QualifiedParameters.readOrDefault(p, 'examples', []);\n    this.endOnFailure = QualifiedParameters.readBoolean(p, 'endOnFailure');\n    this.reporter = QualifiedParameters.readOrDefault(p, 'reporter', null);\n    this.asyncReporter = QualifiedParameters.readOrDefault(p, 'asyncReporter', null);\n  }\n\n  toParameters() {\n    const orUndefined = value => value !== null ? value : undefined;\n\n    return {\n      seed: this.seed,\n      randomType: this.randomType,\n      numRuns: this.numRuns,\n      maxSkipsPerRun: this.maxSkipsPerRun,\n      timeout: orUndefined(this.timeout),\n      skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),\n      interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),\n      markInterruptAsFailure: this.markInterruptAsFailure,\n      skipEqualValues: this.skipEqualValues,\n      ignoreEqualValues: this.ignoreEqualValues,\n      path: this.path,\n      logger: this.logger,\n      unbiased: this.unbiased,\n      verbose: this.verbose,\n      examples: this.examples,\n      endOnFailure: this.endOnFailure,\n      reporter: orUndefined(this.reporter),\n      asyncReporter: orUndefined(this.asyncReporter)\n    };\n  }\n\n  static read(op) {\n    return new QualifiedParameters(op);\n  }\n\n}\n\nQualifiedParameters.readSeed = p => {\n  if (p.seed == null) return Date.now() ^ Math.random() * 0x100000000;\n  const seed32 = p.seed | 0;\n  if (p.seed === seed32) return seed32;\n  const gap = p.seed - seed32;\n  return seed32 ^ gap * 0x100000000;\n};\n\nQualifiedParameters.readRandomType = p => {\n  if (p.randomType == null) return prand.xorshift128plus;\n\n  if (typeof p.randomType === 'string') {\n    switch (p.randomType) {\n      case 'mersenne':\n        return prand.mersenne;\n\n      case 'congruential':\n        return prand.congruential;\n\n      case 'congruential32':\n        return prand.congruential32;\n\n      case 'xorshift128plus':\n        return prand.xorshift128plus;\n\n      case 'xoroshiro128plus':\n        return prand.xoroshiro128plus;\n\n      default:\n        throw new Error(`Invalid random specified: '${p.randomType}'`);\n    }\n  }\n\n  return p.randomType;\n};\n\nQualifiedParameters.readNumRuns = p => {\n  const defaultValue = 100;\n  if (p.numRuns != null) return p.numRuns;\n  if (p.num_runs != null) return p.num_runs;\n  return defaultValue;\n};\n\nQualifiedParameters.readVerbose = p => {\n  if (p.verbose == null) return VerbosityLevel.None;\n\n  if (typeof p.verbose === 'boolean') {\n    return p.verbose === true ? VerbosityLevel.Verbose : VerbosityLevel.None;\n  }\n\n  if (p.verbose <= VerbosityLevel.None) {\n    return VerbosityLevel.None;\n  }\n\n  if (p.verbose >= VerbosityLevel.VeryVerbose) {\n    return VerbosityLevel.VeryVerbose;\n  }\n\n  return p.verbose | 0;\n};\n\nQualifiedParameters.readBoolean = (p, key) => p[key] === true;\n\nQualifiedParameters.readOrDefault = (p, key, defaultValue) => {\n  const value = p[key];\n  return value != null ? value : defaultValue;\n};","map":{"version":3,"names":["prand","VerbosityLevel","QualifiedParameters","constructor","op","p","seed","readSeed","randomType","readRandomType","numRuns","readNumRuns","verbose","readVerbose","maxSkipsPerRun","readOrDefault","timeout","skipAllAfterTimeLimit","interruptAfterTimeLimit","markInterruptAsFailure","readBoolean","skipEqualValues","ignoreEqualValues","logger","v","console","log","path","unbiased","examples","endOnFailure","reporter","asyncReporter","toParameters","orUndefined","value","undefined","read","Date","now","Math","random","seed32","gap","xorshift128plus","mersenne","congruential","congruential32","xoroshiro128plus","Error","defaultValue","num_runs","None","Verbose","VeryVerbose","key"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/fast-check/lib/esm/check/runner/configuration/QualifiedParameters.js"],"sourcesContent":["import prand from 'pure-rand';\nimport { VerbosityLevel } from './VerbosityLevel.js';\nexport class QualifiedParameters {\n    constructor(op) {\n        const p = op || {};\n        this.seed = QualifiedParameters.readSeed(p);\n        this.randomType = QualifiedParameters.readRandomType(p);\n        this.numRuns = QualifiedParameters.readNumRuns(p);\n        this.verbose = QualifiedParameters.readVerbose(p);\n        this.maxSkipsPerRun = QualifiedParameters.readOrDefault(p, 'maxSkipsPerRun', 100);\n        this.timeout = QualifiedParameters.readOrDefault(p, 'timeout', null);\n        this.skipAllAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'skipAllAfterTimeLimit', null);\n        this.interruptAfterTimeLimit = QualifiedParameters.readOrDefault(p, 'interruptAfterTimeLimit', null);\n        this.markInterruptAsFailure = QualifiedParameters.readBoolean(p, 'markInterruptAsFailure');\n        this.skipEqualValues = QualifiedParameters.readBoolean(p, 'skipEqualValues');\n        this.ignoreEqualValues = QualifiedParameters.readBoolean(p, 'ignoreEqualValues');\n        this.logger = QualifiedParameters.readOrDefault(p, 'logger', (v) => {\n            console.log(v);\n        });\n        this.path = QualifiedParameters.readOrDefault(p, 'path', '');\n        this.unbiased = QualifiedParameters.readBoolean(p, 'unbiased');\n        this.examples = QualifiedParameters.readOrDefault(p, 'examples', []);\n        this.endOnFailure = QualifiedParameters.readBoolean(p, 'endOnFailure');\n        this.reporter = QualifiedParameters.readOrDefault(p, 'reporter', null);\n        this.asyncReporter = QualifiedParameters.readOrDefault(p, 'asyncReporter', null);\n    }\n    toParameters() {\n        const orUndefined = (value) => (value !== null ? value : undefined);\n        return {\n            seed: this.seed,\n            randomType: this.randomType,\n            numRuns: this.numRuns,\n            maxSkipsPerRun: this.maxSkipsPerRun,\n            timeout: orUndefined(this.timeout),\n            skipAllAfterTimeLimit: orUndefined(this.skipAllAfterTimeLimit),\n            interruptAfterTimeLimit: orUndefined(this.interruptAfterTimeLimit),\n            markInterruptAsFailure: this.markInterruptAsFailure,\n            skipEqualValues: this.skipEqualValues,\n            ignoreEqualValues: this.ignoreEqualValues,\n            path: this.path,\n            logger: this.logger,\n            unbiased: this.unbiased,\n            verbose: this.verbose,\n            examples: this.examples,\n            endOnFailure: this.endOnFailure,\n            reporter: orUndefined(this.reporter),\n            asyncReporter: orUndefined(this.asyncReporter),\n        };\n    }\n    static read(op) {\n        return new QualifiedParameters(op);\n    }\n}\nQualifiedParameters.readSeed = (p) => {\n    if (p.seed == null)\n        return Date.now() ^ (Math.random() * 0x100000000);\n    const seed32 = p.seed | 0;\n    if (p.seed === seed32)\n        return seed32;\n    const gap = p.seed - seed32;\n    return seed32 ^ (gap * 0x100000000);\n};\nQualifiedParameters.readRandomType = (p) => {\n    if (p.randomType == null)\n        return prand.xorshift128plus;\n    if (typeof p.randomType === 'string') {\n        switch (p.randomType) {\n            case 'mersenne':\n                return prand.mersenne;\n            case 'congruential':\n                return prand.congruential;\n            case 'congruential32':\n                return prand.congruential32;\n            case 'xorshift128plus':\n                return prand.xorshift128plus;\n            case 'xoroshiro128plus':\n                return prand.xoroshiro128plus;\n            default:\n                throw new Error(`Invalid random specified: '${p.randomType}'`);\n        }\n    }\n    return p.randomType;\n};\nQualifiedParameters.readNumRuns = (p) => {\n    const defaultValue = 100;\n    if (p.numRuns != null)\n        return p.numRuns;\n    if (p.num_runs != null)\n        return p.num_runs;\n    return defaultValue;\n};\nQualifiedParameters.readVerbose = (p) => {\n    if (p.verbose == null)\n        return VerbosityLevel.None;\n    if (typeof p.verbose === 'boolean') {\n        return p.verbose === true ? VerbosityLevel.Verbose : VerbosityLevel.None;\n    }\n    if (p.verbose <= VerbosityLevel.None) {\n        return VerbosityLevel.None;\n    }\n    if (p.verbose >= VerbosityLevel.VeryVerbose) {\n        return VerbosityLevel.VeryVerbose;\n    }\n    return p.verbose | 0;\n};\nQualifiedParameters.readBoolean = (p, key) => p[key] === true;\nQualifiedParameters.readOrDefault = (p, key, defaultValue) => {\n    const value = p[key];\n    return value != null ? value : defaultValue;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}