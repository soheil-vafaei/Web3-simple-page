{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abiSelector = exports.abiTypeSignature = exports.abiTupleSignature = exports.abiSignature = exports.ShortSelectorSize = void 0;\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nexports.ShortSelectorSize = 4; //NOTE: this function returns the written out SIGNATURE, not the SELECTOR\n\nfunction abiSignature(abiEntry) {\n  return abiEntry.name + abiTupleSignature(abiEntry.inputs);\n}\n\nexports.abiSignature = abiSignature;\n\nfunction abiTupleSignature(parameters) {\n  const components = parameters.map(abiTypeSignature);\n  return \"(\" + components.join(\",\") + \")\";\n}\n\nexports.abiTupleSignature = abiTupleSignature;\n\nfunction abiTypeSignature(parameter) {\n  const tupleMatch = parameter.type.match(/^tuple(.*)/);\n\n  if (tupleMatch === null) {\n    //does not start with \"tuple\"\n    return parameter.type;\n  } else {\n    const tail = tupleMatch[1]; //everything after \"tuple\"\n\n    const tupleSignature = abiTupleSignature(parameter.components); //it won't be undefined\n\n    return tupleSignature + tail;\n  }\n}\n\nexports.abiTypeSignature = abiTypeSignature;\n\nfunction abiSelector(abiEntry) {\n  const signature = abiSignature(abiEntry); //NOTE: web3's soliditySha3 has a problem if the empty\n  //string is passed in.  Fortunately, that should never happen here.\n\n  const hash = (0, web3_utils_1.soliditySha3)({\n    type: \"string\",\n    value: signature\n  });\n\n  switch (abiEntry.type) {\n    case \"event\":\n      return hash;\n\n    case \"function\":\n    case \"error\":\n      return hash.slice(0, 2 + 2 * exports.ShortSelectorSize);\n    //arithmetic to account for hex string\n  }\n}\n\nexports.abiSelector = abiSelector;","map":{"version":3,"mappings":";;;;;;;AACA;;AAEaA,4BAAoB,CAApB,C,CAEb;;AACA,SAAgBC,YAAhB,CACEC,QADF,EACmD;EAEjD,OAAOA,QAAQ,CAACC,IAAT,GAAgBC,iBAAiB,CAACF,QAAQ,CAACG,MAAV,CAAxC;AACD;;AAJDL;;AAMA,SAAgBI,iBAAhB,CAAkCE,UAAlC,EAAyD;EACvD,MAAMC,UAAU,GAAGD,UAAU,CAACE,GAAX,CAAeC,gBAAf,CAAnB;EACA,OAAO,MAAMF,UAAU,CAACG,IAAX,CAAgB,GAAhB,CAAN,GAA6B,GAApC;AACD;;AAHDV;;AAKA,SAAgBS,gBAAhB,CAAiCE,SAAjC,EAAqD;EACnD,MAAMC,UAAU,GAAGD,SAAS,CAACE,IAAV,CAAeC,KAAf,CAAqB,YAArB,CAAnB;;EACA,IAAIF,UAAU,KAAK,IAAnB,EAAyB;IACvB;IACA,OAAOD,SAAS,CAACE,IAAjB;EACD,CAHD,MAGO;IACL,MAAME,IAAI,GAAGH,UAAU,CAAC,CAAD,CAAvB,CADK,CACuB;;IAC5B,MAAMI,cAAc,GAAGZ,iBAAiB,CACtCO,SAAS,CAACJ,UAD4B,CAAxC,CAFK,CAIF;;IACH,OAAOS,cAAc,GAAGD,IAAxB;EACD;AACF;;AAZDf;;AAcA,SAAgBiB,WAAhB,CACEf,QADF,EACmD;EAEjD,MAAMgB,SAAS,GAAGjB,YAAY,CAACC,QAAD,CAA9B,CAFiD,CAGjD;EACA;;EACA,MAAMiB,IAAI,GAAG,+BAAa;IAAEN,IAAI,EAAE,QAAR;IAAkBO,KAAK,EAAEF;EAAzB,CAAb,CAAb;;EACA,QAAQhB,QAAQ,CAACW,IAAjB;IACE,KAAK,OAAL;MACE,OAAOM,IAAP;;IACF,KAAK,UAAL;IACA,KAAK,OAAL;MACE,OAAOA,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,IAAI,IAAIrB,yBAAtB,CAAP;IAAiD;EALrD;AAOD;;AAdDA","names":["exports","abiSignature","abiEntry","name","abiTupleSignature","inputs","parameters","components","map","abiTypeSignature","join","parameter","tupleMatch","type","match","tail","tupleSignature","abiSelector","signature","hash","value","slice"],"sourceRoot":"","sources":["../../lib/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}