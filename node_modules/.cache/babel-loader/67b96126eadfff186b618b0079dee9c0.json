{"ast":null,"code":"const hljs = require('highlight.js');\n\nconst cheerio = require('cheerio');\n\nconst camelCase = require('camelcase');\n\nconst chalk = require('chalk');\n\nconst stripAnsi = require('strip-ansi');\n\nconst merge = require('lodash.merge');\n\nconst stripIndent = require('strip-indent');\n\nconst detectIndent = require('detect-indent');\n\nconst darkPalette = {\n  addition: chalk.green,\n  attr: chalk.yellow,\n  attribute: chalk.blue,\n  attrString: chalk.cyan,\n  base: chalk.white,\n  builtIn: chalk.blue,\n  builtInName: chalk.blue,\n  bullet: chalk.magenta,\n  class: chalk.green,\n  code: chalk.yellow,\n  comment: chalk.white.dim,\n  deletion: chalk.red,\n  doctag: chalk.blue,\n  emphasis: chalk.magenta,\n  function: chalk.white,\n  formula: chalk.green,\n  keyword: chalk.red,\n  lineNumbers: chalk.grey,\n  literal: chalk.magenta,\n  link: chalk.blue.underline,\n  meta: chalk.cyan,\n  name: chalk.cyan,\n  number: chalk.green,\n  params: chalk.blue,\n  quote: chalk.gray,\n  regexp: chalk.magenta,\n  selectorAttr: chalk.green,\n  selectorClass: chalk.yellow,\n  selectorId: chalk.blue,\n  selectorPseudo: chalk.cyan,\n  selectorTag: chalk.magenta,\n  string: chalk.yellow,\n  strong: chalk.red,\n  subst: chalk.cyan,\n  symbol: chalk.cyan,\n  tag: chalk.blue,\n  templateTag: chalk.magenta,\n  templateVariable: chalk.green,\n  title: chalk.green,\n  trailingSpace: chalk,\n  type: chalk.magenta,\n  variable: chalk.red\n};\n\nconst filter = (node, opts) => {\n  let color;\n  let text;\n  let childText;\n\n  if (node.type === 'text') {\n    text = node.data;\n    return text;\n  }\n\n  if (node.name === 'span' && node.type === 'tag') {\n    color = camelCase(node.attribs.class.split('-')[1]);\n  }\n\n  if (node.childNodes && node.childNodes.length > 0) {\n    childText = node.childNodes.map(childNode => filter(childNode, opts)).join('');\n\n    if (typeof color === 'string') {\n      return opts.colors[color](childText);\n    }\n\n    return childText;\n  }\n\n  return '';\n};\n\nconst findLongestLine = (text, opts) => {\n  let tabPad = '';\n\n  if (opts.$indent.tabs) {\n    tabPad = String().padEnd(opts.consoleTabWidth, ' ');\n  }\n\n  const lines = stripAnsi(text).replace(/\\t/g, tabPad).split('\\n');\n  let max = 0;\n  lines.forEach(line => {\n    if (line.length > max) {\n      max = line.length;\n    }\n  });\n  return max;\n};\n\nconst padLine = (line, padding) => {\n  const padStr = String().padStart(padding, ' ');\n  return padStr + line + padStr;\n};\n\nconst getIndentStr = opts => {\n  if (opts.$indent.tabs) {\n    return String().padStart(1, '\\t');\n  } // Opts.$indent.spaces === true\n\n\n  if (opts.tabsToSpaces === 0) {\n    return '\\u0000';\n  }\n\n  return String().padEnd(opts.tabsToSpaces, ' ');\n};\n\nconst syntaxHlStr = (lang, script, opts, indentStart) => {\n  const indentStr = getIndentStr(opts);\n\n  if (opts.$indent.tabs) {\n    script = script.replace(/\\t/g, indentStr);\n  }\n\n  if (opts.$indent.spaces) {\n    script = script.replace(/\\t/g, indentStr);\n  }\n\n  if (indentStart) {\n    script = indentStr + script;\n  }\n\n  const code = hljs.highlight(lang, script).value;\n  const html = `<code>${code}</code>`;\n  const $body = cheerio.load(html).root().find('code')[0];\n  const output = filter($body, opts);\n  return output;\n};\n\nconst syntaxHlJson = (json, opts) => {\n  const indentStr = getIndentStr(opts);\n\n  try {\n    json = JSON.stringify(json, (key, val) => {\n      if (val instanceof Function) {\n        return `[FUNCTION]${String(val)}[FUNCTION]`;\n      }\n\n      return val;\n    }, indentStr);\n  } catch (err) {\n    err.message = 'ðŸ¦…  Chromafi: ' + err.message;\n    throw new Error(err);\n  }\n\n  const highlighted = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, match => {\n    let colorClass = 'number'; // eslint-disable-next-line unicorn/prefer-starts-ends-with\n\n    if (/^\"/.test(match)) {\n      // eslint-disable-next-line unicorn/prefer-starts-ends-with\n      if (/:$/.test(match)) {\n        if (match.includes('-')) {\n          colorClass = 'attrString';\n          match = match.replace(/\"/g, '\\'');\n        } else {\n          colorClass = 'attr';\n          match = match.replace(/\"/g, '');\n        }\n      } else {\n        colorClass = 'string';\n\n        if (match.substr(1, 10) === '[FUNCTION]' && match.substr(match.length - 11, 10) === '[FUNCTION]') {\n          colorClass = 'function';\n        } else {\n          match = match.replace(/\"/g, '\\'');\n          match = match.replace(/\\\\n/g, '\\n');\n          match = match.replace(/\\\\t/g, indentStr);\n        }\n      }\n    } else if (/true|false/.test(match)) {\n      colorClass = 'literal';\n    } else if (/null/.test(match)) {\n      colorClass = 'literal';\n    }\n\n    return opts.colors[colorClass](match);\n  });\n\n  const getFnStrIndent = (fnStr, opts) => {\n    fnStr = fnStr.replace(/\\t/g, indentStr);\n    const indent = detectIndent(fnStr);\n\n    if (opts.$indent.spaces) {\n      const indentLevel = indent.amount / opts.tabsToSpaces;\n      return indentLevel;\n    }\n\n    if (opts.$indent.tabs) {\n      const indentLevel = indent.amount;\n      return indentLevel;\n    }\n  };\n\n  const lines = highlighted.split('\\n').map(line => {\n    const fnParts = line.split('[FUNCTION]');\n\n    if (fnParts.length === 3) {\n      const plain = stripAnsi(line);\n      let outerIndent;\n\n      if (opts.$indent.spaces) {\n        outerIndent = plain.match(/^[ \\\\t]*/)[0].length / opts.tabsToSpaces;\n      }\n\n      if (opts.$indent.tabs) {\n        outerIndent = plain.match(/^\\t*/)[0].length;\n      }\n\n      const fnStr = fnParts[1].replace(/\"/g, '\\'').replace(/\\\\n/g, '\\n').replace(/\\\\t/g, '\\t');\n      const innerIndent = getFnStrIndent(fnStr, opts);\n      const indentOffset = Math.abs(outerIndent - (innerIndent - 1));\n      const re = new RegExp(`\\n(\\t){${indentOffset}}`, 'g');\n      const reTabbed = fnStr.replace(re, '\\n').replace(/\\\\t/g, indentStr);\n      const preFn = fnParts[0].substr(0, fnParts[0].length - 1);\n      const postFn = fnParts[2].substr(1);\n      const jsHighlighted = syntaxHlStr('javascript', reTabbed, opts);\n      return preFn + jsHighlighted + postFn;\n    }\n\n    return line;\n  }).join('\\n');\n  return lines;\n};\n\nconst lineNumberPad = (number, opts) => {\n  if (!opts.lineNumbers) {\n    return '';\n  }\n\n  let output = '';\n  const offsetLineN = number + (opts.lineNumberStart - 1);\n\n  if (opts.$indent.spaces) {\n    const padStr = String().padStart(opts.lineNumberPad, ' ');\n    const prePad = opts.lineNumberPad + opts.$maxDigitWidth;\n    output = String(offsetLineN).padStart(prePad) + padStr;\n  } // Indent using spaces - up to the tabwidth required to contain number str\n\n\n  if (opts.$indent.tabs) {\n    output = String(offsetLineN).padStart(opts.$maxTabSpace, ' ');\n  }\n\n  return opts.colors.lineNumbers(output);\n};\n\nconst cropPadAndNumber = (text, opts) => {\n  let output = '';\n  const lines = text.split('\\n');\n  const maxDigitWidth = String(lines.length + (opts.lineNumberStart - 1)).length; // Tabs needed to contain digits (so we dont break code tab indentation)\n\n  const tabsNeeded = Math.ceil(maxDigitWidth / opts.consoleTabWidth);\n  const maxTabSpace = tabsNeeded * opts.consoleTabWidth;\n  const longestLineLen = findLongestLine(text, opts);\n  opts.$maxTabSpace = maxTabSpace;\n  opts.$maxDigitWidth = maxDigitWidth;\n  lines.forEach((line, i) => {\n    const lineNumber = i + 1;\n\n    if (lineNumber < opts.firstLine || lineNumber > opts.lastLine) {\n      return;\n    }\n\n    const lineNo = lineNumberPad(lineNumber, opts);\n    const tabCount = (line.match(/\\t/g) || []).length;\n    const tabAdjust = tabCount * opts.consoleTabWidth;\n    const plain = stripAnsi(line).replace(/\\t/g, '');\n    let runLengthLine;\n\n    if (opts.lineEndPad === true) {\n      const linePad = String().padEnd(longestLineLen - plain.length - tabAdjust, ' ');\n      runLengthLine = line + opts.colors.trailingSpace(linePad);\n    } else {\n      runLengthLine = line;\n    }\n\n    let lineOutput;\n\n    if (opts.tabsToSpaces === false) {\n      lineOutput = lineNo + runLengthLine;\n    }\n\n    if (typeof opts.tabsToSpaces === 'number') {\n      lineOutput = lineNo + padLine(runLengthLine, opts.codePad);\n    }\n\n    output += lineOutput + '\\n';\n  });\n  return opts.colors.base(output);\n};\n\nconst decorate = (ansiStr, opts) => {\n  // AnsiMark has been removed for causing problems.\n  ansiStr = cropPadAndNumber(ansiStr, opts);\n  return ansiStr;\n};\n\nconst nameifyArrowFn = (fn, opts) => {\n  if (Reflect.has(fn, 'prototype') && Reflect.has(fn.prototype, 'constructor')) {\n    return '';\n  }\n\n  return `${opts.arrowKeyword} ${fn.name} = `;\n};\n\nconst procOpts = function () {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let options = {\n    lineNumbers: true,\n    lang: 'javascript',\n    lineNumberPad: 0,\n    lineNumberStart: 1,\n    start: 1,\n    end: Infinity,\n    stripIndent: true,\n    codePad: 1,\n    colors: darkPalette,\n    tabsToSpaces: 4,\n    consoleTabWidth: 8,\n    arrowKeyword: 'const',\n    lineEndPad: true\n  };\n  options = merge(options, opts);\n  options.$indent = {\n    spaces: typeof options.tabsToSpaces === 'number',\n    tabs: typeof options.tabsToSpaces === 'boolean' && options.tabsToSpaces === false,\n    size: typeof options.tabsToSpaces === 'number' ? options.tabsToSpaces : 1\n  };\n  return options;\n};\n\nconst chromafi = (value, opts) => {\n  opts = procOpts(opts);\n\n  if (typeof value === 'function') {\n    value = nameifyArrowFn(value, opts) + String(value);\n    const indentStart = true;\n    value = syntaxHlStr('javascript', value, opts, indentStart);\n    value = stripIndent(value);\n    value = decorate(value, opts);\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    value = syntaxHlStr(opts.lang, value, opts);\n    value = decorate(value, opts);\n    return value;\n  }\n\n  if (typeof value === 'object') {\n    value = syntaxHlJson(value, opts);\n    value = decorate(value, opts);\n    return value;\n  }\n\n  throw new Error('ðŸ¦…  Chromafi: You must pass a function, string or object.');\n};\n\nchromafi.hljs = hljs; // Expose hljs for modification\n\nmodule.exports = chromafi;","map":{"version":3,"names":["hljs","require","cheerio","camelCase","chalk","stripAnsi","merge","stripIndent","detectIndent","darkPalette","addition","green","attr","yellow","attribute","blue","attrString","cyan","base","white","builtIn","builtInName","bullet","magenta","class","code","comment","dim","deletion","red","doctag","emphasis","function","formula","keyword","lineNumbers","grey","literal","link","underline","meta","name","number","params","quote","gray","regexp","selectorAttr","selectorClass","selectorId","selectorPseudo","selectorTag","string","strong","subst","symbol","tag","templateTag","templateVariable","title","trailingSpace","type","variable","filter","node","opts","color","text","childText","data","attribs","split","childNodes","length","map","childNode","join","colors","findLongestLine","tabPad","$indent","tabs","String","padEnd","consoleTabWidth","lines","replace","max","forEach","line","padLine","padding","padStr","padStart","getIndentStr","tabsToSpaces","syntaxHlStr","lang","script","indentStart","indentStr","spaces","highlight","value","html","$body","load","root","find","output","syntaxHlJson","json","JSON","stringify","key","val","Function","err","message","Error","highlighted","match","colorClass","test","includes","substr","getFnStrIndent","fnStr","indent","indentLevel","amount","fnParts","plain","outerIndent","innerIndent","indentOffset","Math","abs","re","RegExp","reTabbed","preFn","postFn","jsHighlighted","lineNumberPad","offsetLineN","lineNumberStart","prePad","$maxDigitWidth","$maxTabSpace","cropPadAndNumber","maxDigitWidth","tabsNeeded","ceil","maxTabSpace","longestLineLen","i","lineNumber","firstLine","lastLine","lineNo","tabCount","tabAdjust","runLengthLine","lineEndPad","linePad","lineOutput","codePad","decorate","ansiStr","nameifyArrowFn","fn","Reflect","has","prototype","arrowKeyword","procOpts","options","start","end","Infinity","size","chromafi","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/@trufflesuite/chromafi/index.js"],"sourcesContent":["const hljs = require('highlight.js')\nconst cheerio = require('cheerio')\nconst camelCase = require('camelcase')\nconst chalk = require('chalk')\nconst stripAnsi = require('strip-ansi')\nconst merge = require('lodash.merge')\nconst stripIndent = require('strip-indent')\nconst detectIndent = require('detect-indent')\n\nconst darkPalette = {\n\taddition: chalk.green,\n\tattr: chalk.yellow,\n\tattribute: chalk.blue,\n\tattrString: chalk.cyan,\n\tbase: chalk.white,\n\tbuiltIn: chalk.blue,\n\tbuiltInName: chalk.blue,\n\tbullet: chalk.magenta,\n\tclass: chalk.green,\n\tcode: chalk.yellow,\n\tcomment: chalk.white.dim,\n\tdeletion: chalk.red,\n\tdoctag: chalk.blue,\n\temphasis: chalk.magenta,\n\tfunction: chalk.white,\n\tformula: chalk.green,\n\tkeyword: chalk.red,\n\tlineNumbers: chalk.grey,\n\tliteral: chalk.magenta,\n\tlink: chalk.blue.underline,\n\tmeta: chalk.cyan,\n\tname: chalk.cyan,\n\tnumber: chalk.green,\n\tparams: chalk.blue,\n\tquote: chalk.gray,\n\tregexp: chalk.magenta,\n\tselectorAttr: chalk.green,\n\tselectorClass: chalk.yellow,\n\tselectorId: chalk.blue,\n\tselectorPseudo: chalk.cyan,\n\tselectorTag: chalk.magenta,\n\tstring: chalk.yellow,\n\tstrong: chalk.red,\n\tsubst: chalk.cyan,\n\tsymbol: chalk.cyan,\n\ttag: chalk.blue,\n\ttemplateTag: chalk.magenta,\n\ttemplateVariable: chalk.green,\n\ttitle: chalk.green,\n\ttrailingSpace: chalk,\n\ttype: chalk.magenta,\n\tvariable: chalk.red\n}\n\nconst filter = (node, opts) => {\n\tlet color\n\tlet text\n\tlet childText\n\n\tif (node.type === 'text') {\n\t\ttext = node.data\n\t\treturn text\n\t}\n\n\tif (node.name === 'span' && node.type === 'tag') {\n\t\tcolor = camelCase(node.attribs.class.split('-')[1])\n\t}\n\n\tif (node.childNodes && node.childNodes.length > 0) {\n\t\tchildText = node.childNodes.map(childNode => filter(childNode, opts)).join('')\n\n\t\tif (typeof color === 'string') {\n\t\t\treturn opts.colors[color](childText)\n\t\t}\n\n\t\treturn childText\n\t}\n\n\treturn ''\n}\n\nconst findLongestLine = (text, opts) => {\n\tlet tabPad = ''\n\n\tif (opts.$indent.tabs) {\n\t\ttabPad = String().padEnd(opts.consoleTabWidth, ' ')\n\t}\n\n\tconst lines = stripAnsi(text)\n\t\t.replace(/\\t/g, tabPad)\n\t\t.split('\\n')\n\n\tlet max = 0\n\n\tlines.forEach(line => {\n\t\tif (line.length > max) {\n\t\t\tmax = line.length\n\t\t}\n\t})\n\n\treturn max\n}\n\nconst padLine = (line, padding) => {\n\tconst padStr = String().padStart(padding, ' ')\n\treturn padStr + line + padStr\n}\n\nconst getIndentStr = opts => {\n\tif (opts.$indent.tabs) {\n\t\treturn String().padStart(1, '\\t')\n\t}\n\n\t// Opts.$indent.spaces === true\n\tif (opts.tabsToSpaces === 0) {\n\t\treturn '\\u0000'\n\t}\n\n\treturn String().padEnd(opts.tabsToSpaces, ' ')\n}\n\nconst syntaxHlStr = (lang, script, opts, indentStart) => {\n\tconst indentStr = getIndentStr(opts)\n\n\tif (opts.$indent.tabs) {\n\t\tscript = script.replace(/\\t/g, indentStr)\n\t}\n\n\tif (opts.$indent.spaces) {\n\t\tscript = script.replace(/\\t/g, indentStr)\n\t}\n\n\tif (indentStart) {\n\t\tscript = indentStr + script\n\t}\n\n\tconst code = hljs.highlight(lang, script).value\n\tconst html = `<code>${code}</code>`\n\tconst $body = cheerio.load(html).root().find('code')[0]\n\tconst output = filter($body, opts)\n\n\treturn output\n}\n\nconst syntaxHlJson = (json, opts) => {\n\tconst indentStr = getIndentStr(opts)\n\n\ttry {\n\t\tjson = JSON.stringify(json, (key, val) => {\n\t\t\tif (val instanceof Function) {\n\t\t\t\treturn `[FUNCTION]${String(val)}[FUNCTION]`\n\t\t\t}\n\t\t\treturn val\n\t\t}, indentStr)\n\t} catch (err) {\n\t\terr.message = 'ðŸ¦…  Chromafi: ' + err.message\n\t\tthrow new Error(err)\n\t}\n\n\tconst highlighted = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, match => {\n\t\tlet colorClass = 'number'\n\n\t\t// eslint-disable-next-line unicorn/prefer-starts-ends-with\n\t\tif (/^\"/.test(match)) {\n\t\t\t// eslint-disable-next-line unicorn/prefer-starts-ends-with\n\t\t\tif (/:$/.test(match)) {\n\t\t\t\tif (match.includes('-')) {\n\t\t\t\t\tcolorClass = 'attrString'\n\t\t\t\t\tmatch = match.replace(/\"/g, '\\'')\n\t\t\t\t} else {\n\t\t\t\t\tcolorClass = 'attr'\n\t\t\t\t\tmatch = match.replace(/\"/g, '')\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcolorClass = 'string'\n\n\t\t\t\tif (match.substr(1, 10) === '[FUNCTION]' &&\n\t\t\t\t\tmatch.substr(match.length - 11, 10) === '[FUNCTION]') {\n\t\t\t\t\tcolorClass = 'function'\n\t\t\t\t} else {\n\t\t\t\t\tmatch = match.replace(/\"/g, '\\'')\n\t\t\t\t\tmatch = match.replace(/\\\\n/g, '\\n')\n\t\t\t\t\tmatch = match.replace(/\\\\t/g, indentStr)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (/true|false/.test(match)) {\n\t\t\tcolorClass = 'literal'\n\t\t} else if (/null/.test(match)) {\n\t\t\tcolorClass = 'literal'\n\t\t}\n\n\t\treturn opts.colors[colorClass](match)\n\t})\n\n\tconst getFnStrIndent = (fnStr, opts) => {\n\t\tfnStr = fnStr.replace(/\\t/g, indentStr)\n\t\tconst indent = detectIndent(fnStr)\n\n\t\tif (opts.$indent.spaces) {\n\t\t\tconst indentLevel = indent.amount / opts.tabsToSpaces\n\t\t\treturn indentLevel\n\t\t}\n\n\t\tif (opts.$indent.tabs) {\n\t\t\tconst indentLevel = indent.amount\n\t\t\treturn indentLevel\n\t\t}\n\t}\n\n\tconst lines = highlighted.split('\\n').map(line => {\n\t\tconst fnParts = line.split('[FUNCTION]')\n\t\tif (fnParts.length === 3) {\n\t\t\tconst plain = stripAnsi(line)\n\n\t\t\tlet outerIndent\n\n\t\t\tif (opts.$indent.spaces) {\n\t\t\t\touterIndent = plain.match(/^[ \\\\t]*/)[0].length / opts.tabsToSpaces\n\t\t\t}\n\t\t\tif (opts.$indent.tabs) {\n\t\t\t\touterIndent = plain.match(/^\\t*/)[0].length\n\t\t\t}\n\n\t\t\tconst fnStr = fnParts[1]\n\t\t\t\t.replace(/\"/g, '\\'')\n\t\t\t\t.replace(/\\\\n/g, '\\n')\n\t\t\t\t.replace(/\\\\t/g, '\\t')\n\n\t\t\tconst innerIndent = getFnStrIndent(fnStr, opts)\n\t\t\tconst indentOffset = Math.abs(outerIndent - (innerIndent - 1))\n\n\t\t\tconst re = new RegExp(`\\n(\\t){${indentOffset}}`, 'g')\n\t\t\tconst reTabbed = fnStr\n\t\t\t\t.replace(re, '\\n')\n\t\t\t\t.replace(/\\\\t/g, indentStr)\n\n\t\t\tconst preFn = fnParts[0].substr(0, fnParts[0].length - 1)\n\t\t\tconst postFn = fnParts[2].substr(1)\n\t\t\tconst jsHighlighted = syntaxHlStr('javascript', reTabbed, opts)\n\n\t\t\treturn preFn + jsHighlighted + postFn\n\t\t}\n\n\t\treturn line\n\t}).join('\\n')\n\n\treturn lines\n}\n\nconst lineNumberPad = (number, opts) => {\n\tif (!opts.lineNumbers) {\n\t\treturn ''\n\t}\n\n\tlet output = ''\n\n\tconst offsetLineN = number + (opts.lineNumberStart - 1)\n\n\tif (opts.$indent.spaces) {\n\t\tconst padStr = String().padStart(opts.lineNumberPad, ' ')\n\t\tconst prePad = opts.lineNumberPad + opts.$maxDigitWidth\n\t\toutput = String(offsetLineN).padStart(prePad) + padStr\n\t}\n\n\t// Indent using spaces - up to the tabwidth required to contain number str\n\tif (opts.$indent.tabs) {\n\t\toutput = String(offsetLineN).padStart(opts.$maxTabSpace, ' ')\n\t}\n\n\treturn opts.colors.lineNumbers(output)\n}\n\nconst cropPadAndNumber = (text, opts) => {\n\tlet output = ''\n\n\tconst lines = text.split('\\n')\n\tconst maxDigitWidth = String(lines.length + (opts.lineNumberStart - 1)).length\n\t// Tabs needed to contain digits (so we dont break code tab indentation)\n\tconst tabsNeeded = Math.ceil(maxDigitWidth / opts.consoleTabWidth)\n\tconst maxTabSpace = tabsNeeded * opts.consoleTabWidth\n\tconst longestLineLen = findLongestLine(text, opts)\n\n\topts.$maxTabSpace = maxTabSpace\n\topts.$maxDigitWidth = maxDigitWidth\n\n\tlines.forEach((line, i) => {\n\t\tconst lineNumber = i + 1\n\t\tif (lineNumber < opts.firstLine || lineNumber > opts.lastLine) {\n\t\t\treturn\n\t\t}\n\n\t\tconst lineNo = lineNumberPad(lineNumber, opts)\n\n\t\tconst tabCount = (line.match(/\\t/g) || []).length\n\t\tconst tabAdjust = (tabCount * opts.consoleTabWidth)\n\n\t\tconst plain = stripAnsi(line).replace(/\\t/g, '')\n\t\tlet runLengthLine\n\t\tif (opts.lineEndPad === true) {\n\t\t\tconst linePad = String().padEnd((longestLineLen - plain.length) - tabAdjust, ' ')\n\t\t\trunLengthLine = line + opts.colors.trailingSpace(linePad)\n\t\t} else {\n\t\t\trunLengthLine = line\n\t\t}\n\n\t\tlet lineOutput\n\n\t\tif (opts.tabsToSpaces === false) {\n\t\t\tlineOutput = lineNo + runLengthLine\n\t\t}\n\n\t\tif (typeof opts.tabsToSpaces === 'number') {\n\t\t\tlineOutput = lineNo + padLine(runLengthLine, opts.codePad)\n\t\t}\n\n\t\toutput += lineOutput + '\\n'\n\t})\n\n\treturn opts.colors.base(output)\n}\n\nconst decorate = (ansiStr, opts) => {\n\t// AnsiMark has been removed for causing problems.\n\tansiStr = cropPadAndNumber(ansiStr, opts)\n\treturn ansiStr\n}\n\nconst nameifyArrowFn = (fn, opts) => {\n\tif (Reflect.has(fn, 'prototype') &&\n\t\tReflect.has(fn.prototype, 'constructor')) {\n\t\treturn ''\n\t}\n\n\treturn `${opts.arrowKeyword} ${fn.name} = `\n}\n\nconst procOpts = (opts = {}) => {\n\tlet options = {\n\t\tlineNumbers: true,\n\t\tlang: 'javascript',\n\t\tlineNumberPad: 0,\n\t\tlineNumberStart: 1,\n\t\tstart: 1,\n\t\tend: Infinity,\n\t\tstripIndent: true,\n\t\tcodePad: 1,\n\t\tcolors: darkPalette,\n\t\ttabsToSpaces: 4,\n\t\tconsoleTabWidth: 8,\n\t\tarrowKeyword: 'const',\n\t\tlineEndPad: true\n\t}\n\n\toptions = merge(options, opts)\n\n\toptions.$indent = {\n\t\tspaces: typeof options.tabsToSpaces === 'number',\n\t\ttabs: typeof options.tabsToSpaces === 'boolean' &&\n\t\t\toptions.tabsToSpaces === false,\n\t\tsize: typeof options.tabsToSpaces === 'number' ? options.tabsToSpaces : 1\n\t}\n\n\treturn options\n}\n\nconst chromafi = (value, opts) => {\n\topts = procOpts(opts)\n\n\tif (typeof value === 'function') {\n\t\tvalue = nameifyArrowFn(value, opts) + String(value)\n\t\tconst indentStart = true\n\t\tvalue = syntaxHlStr('javascript', value, opts, indentStart)\n\t\tvalue = stripIndent(value)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tif (typeof value === 'string') {\n\t\tvalue = syntaxHlStr(opts.lang, value, opts)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tif (typeof value === 'object') {\n\t\tvalue = syntaxHlJson(value, opts)\n\t\tvalue = decorate(value, opts)\n\t\treturn value\n\t}\n\n\tthrow new Error('ðŸ¦…  Chromafi: You must pass a function, string or object.')\n}\n\nchromafi.hljs = hljs // Expose hljs for modification\n\nmodule.exports = chromafi\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}