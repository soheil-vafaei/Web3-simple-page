{"ast":null,"code":"/*\nLanguage: Scheme\nDescription: Scheme is a programming language in the Lisp family.\n             (keywords based on http://community.schemewiki.org/?scheme-keywords)\nAuthor: JP Verkamp <me@jverkamp.com>\nContributors: Ivan Sagalaev <maniac@softwaremaniacs.org>\nOrigin: clojure.js\nWebsite: http://community.schemewiki.org/?what-is-scheme\nCategory: lisp\n*/\nfunction scheme(hljs) {\n  const SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  const SCHEME_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  const KEYWORDS = {\n    $pattern: SCHEME_IDENT_RE,\n    'builtin-name': 'case-lambda call/cc class define-class exit-handler field import ' + 'inherit init-field interface let*-values let-values let/ec mixin ' + 'opt-lambda override protect provide public rename require ' + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' + 'when with-syntax and begin call-with-current-continuation ' + 'call-with-input-file call-with-output-file case cond define ' + 'define-syntax delay do dynamic-wind else for-each if lambda let let* ' + 'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' + 'boolean? caar cadr call-with-input-file call-with-output-file ' + 'call-with-values car cdddar cddddr cdr ceiling char->integer ' + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' + 'char? close-input-port close-output-port complex? cons cos ' + 'current-input-port current-output-port denominator display eof-object? ' + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' + 'force gcd imag-part inexact->exact inexact? input-port? integer->char ' + 'integer? interaction-environment lcm length list list->string ' + 'list->vector list-ref list-tail list? load log magnitude make-polar ' + 'make-rectangular make-string make-vector max member memq memv min ' + 'modulo negative? newline not null-environment null? number->string ' + 'number? numerator odd? open-input-file open-output-file output-port? ' + 'pair? peek-char port? positive? procedure? quasiquote quote quotient ' + 'rational? rationalize read read-char real-part real? remainder reverse ' + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' + 'string->list string->number string->symbol string-append string-ci<=? ' + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' + 'string-fill! string-length string-ref string-set! string<=? string<? ' + 'string=? string>=? string>? string? substring symbol->string symbol? ' + 'tan transcript-off transcript-on truncate values vector ' + 'vector->list vector-fill! vector-length vector-ref vector-set! ' + 'with-input-from-file with-output-to-file write write-char zero?'\n  };\n  const LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: SCHEME_SIMPLE_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: SCHEME_COMPLEX_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: '#b[0-1]+(/[0-1]+)?'\n    }, {\n      begin: '#o[0-7]+(/[0-7]+)?'\n    }, {\n      begin: '#x[0-9a-f]+(/[0-9a-f]+)?'\n    }]\n  };\n  const STRING = hljs.QUOTE_STRING_MODE;\n  const COMMENT_MODES = [hljs.COMMENT(';', '$', {\n    relevance: 0\n  }), hljs.COMMENT('#\\\\|', '\\\\|#')];\n  const IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n  const QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  const QUOTED_LIST = {\n    variants: [{\n      begin: /'/\n    }, {\n      begin: '`'\n    }],\n    contains: [{\n      begin: '\\\\(',\n      end: '\\\\)',\n      contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\n    }]\n  };\n  const NAME = {\n    className: 'name',\n    relevance: 0,\n    begin: SCHEME_IDENT_RE,\n    keywords: KEYWORDS\n  };\n  const LAMBDA = {\n    begin: /lambda/,\n    endsWithParent: true,\n    returnBegin: true,\n    contains: [NAME, {\n      endsParent: true,\n      variants: [{\n        begin: /\\(/,\n        end: /\\)/\n      }, {\n        begin: /\\[/,\n        end: /\\]/\n      }],\n      contains: [IDENT]\n    }]\n  };\n  const LIST = {\n    variants: [{\n      begin: '\\\\(',\n      end: '\\\\)'\n    }, {\n      begin: '\\\\[',\n      end: '\\\\]'\n    }],\n    contains: [LAMBDA, NAME, BODY]\n  };\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\n  return {\n    name: 'Scheme',\n    illegal: /\\S/,\n    contains: [hljs.SHEBANG(), NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\n  };\n}\n\nmodule.exports = scheme;","map":{"version":3,"names":["scheme","hljs","SCHEME_IDENT_RE","SCHEME_SIMPLE_NUMBER_RE","SCHEME_COMPLEX_NUMBER_RE","KEYWORDS","$pattern","LITERAL","className","begin","NUMBER","variants","relevance","STRING","QUOTE_STRING_MODE","COMMENT_MODES","COMMENT","IDENT","QUOTED_IDENT","BODY","endsWithParent","QUOTED_LIST","contains","end","NAME","keywords","LAMBDA","returnBegin","endsParent","LIST","concat","name","illegal","SHEBANG","module","exports"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/highlight.js/lib/languages/scheme.js"],"sourcesContent":["/*\nLanguage: Scheme\nDescription: Scheme is a programming language in the Lisp family.\n             (keywords based on http://community.schemewiki.org/?scheme-keywords)\nAuthor: JP Verkamp <me@jverkamp.com>\nContributors: Ivan Sagalaev <maniac@softwaremaniacs.org>\nOrigin: clojure.js\nWebsite: http://community.schemewiki.org/?what-is-scheme\nCategory: lisp\n*/\n\nfunction scheme(hljs) {\n  const SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  const SCHEME_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  const KEYWORDS = {\n    $pattern: SCHEME_IDENT_RE,\n    'builtin-name':\n      'case-lambda call/cc class define-class exit-handler field import ' +\n      'inherit init-field interface let*-values let-values let/ec mixin ' +\n      'opt-lambda override protect provide public rename require ' +\n      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +\n      'when with-syntax and begin call-with-current-continuation ' +\n      'call-with-input-file call-with-output-file case cond define ' +\n      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +\n      'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' +\n      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +\n      'boolean? caar cadr call-with-input-file call-with-output-file ' +\n      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +\n      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +\n      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +\n      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +\n      'char? close-input-port close-output-port complex? cons cos ' +\n      'current-input-port current-output-port denominator display eof-object? ' +\n      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +\n      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +\n      'integer? interaction-environment lcm length list list->string ' +\n      'list->vector list-ref list-tail list? load log magnitude make-polar ' +\n      'make-rectangular make-string make-vector max member memq memv min ' +\n      'modulo negative? newline not null-environment null? number->string ' +\n      'number? numerator odd? open-input-file open-output-file output-port? ' +\n      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +\n      'rational? rationalize read read-char real-part real? remainder reverse ' +\n      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +\n      'string->list string->number string->symbol string-append string-ci<=? ' +\n      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +\n      'string-fill! string-length string-ref string-set! string<=? string<? ' +\n      'string=? string>=? string>? string? substring symbol->string symbol? ' +\n      'tan transcript-off transcript-on truncate values vector ' +\n      'vector->list vector-fill! vector-length vector-ref vector-set! ' +\n      'with-input-from-file with-output-to-file write write-char zero?'\n  };\n\n  const LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      {\n        begin: SCHEME_SIMPLE_NUMBER_RE,\n        relevance: 0\n      },\n      {\n        begin: SCHEME_COMPLEX_NUMBER_RE,\n        relevance: 0\n      },\n      {\n        begin: '#b[0-1]+(/[0-1]+)?'\n      },\n      {\n        begin: '#o[0-7]+(/[0-7]+)?'\n      },\n      {\n        begin: '#x[0-9a-f]+(/[0-9a-f]+)?'\n      }\n    ]\n  };\n\n  const STRING = hljs.QUOTE_STRING_MODE;\n\n  const COMMENT_MODES = [\n    hljs.COMMENT(\n      ';',\n      '$',\n      {\n        relevance: 0\n      }\n    ),\n    hljs.COMMENT('#\\\\|', '\\\\|#')\n  ];\n\n  const IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n\n  const QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n\n  const QUOTED_LIST = {\n    variants: [\n      {\n        begin: /'/\n      },\n      {\n        begin: '`'\n      }\n    ],\n    contains: [\n      {\n        begin: '\\\\(',\n        end: '\\\\)',\n        contains: [\n          'self',\n          LITERAL,\n          STRING,\n          NUMBER,\n          IDENT,\n          QUOTED_IDENT\n        ]\n      }\n    ]\n  };\n\n  const NAME = {\n    className: 'name',\n    relevance: 0,\n    begin: SCHEME_IDENT_RE,\n    keywords: KEYWORDS\n  };\n\n  const LAMBDA = {\n    begin: /lambda/,\n    endsWithParent: true,\n    returnBegin: true,\n    contains: [\n      NAME,\n      {\n        endsParent: true,\n        variants: [\n          {\n            begin: /\\(/,\n            end: /\\)/\n          },\n          {\n            begin: /\\[/,\n            end: /\\]/\n          }\n        ],\n        contains: [ IDENT ]\n      }\n    ]\n  };\n\n  const LIST = {\n    variants: [\n      {\n        begin: '\\\\(',\n        end: '\\\\)'\n      },\n      {\n        begin: '\\\\[',\n        end: '\\\\]'\n      }\n    ],\n    contains: [\n      LAMBDA,\n      NAME,\n      BODY\n    ]\n  };\n\n  BODY.contains = [\n    LITERAL,\n    NUMBER,\n    STRING,\n    IDENT,\n    QUOTED_IDENT,\n    QUOTED_LIST,\n    LIST\n  ].concat(COMMENT_MODES);\n\n  return {\n    name: 'Scheme',\n    illegal: /\\S/,\n    contains: [\n      hljs.SHEBANG(),\n      NUMBER,\n      STRING,\n      QUOTED_IDENT,\n      QUOTED_LIST,\n      LIST\n    ].concat(COMMENT_MODES)\n  };\n}\n\nmodule.exports = scheme;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}