{"ast":null,"code":"\"use strict\";\n/**\n * @protected\n *\n * @packageDocumentation\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.abiParameterToType = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:abi-data:import\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nfunction abiParameterToType(abi) {\n  let typeName = abi.type;\n  let typeHint = abi.internalType; //first: is it an array?\n\n  let arrayMatch = typeName.match(/(.*)\\[(\\d*)\\]$/);\n\n  if (arrayMatch) {\n    let baseTypeName = arrayMatch[1];\n    let lengthAsString = arrayMatch[2]; //may be empty!\n\n    let baseAbi = Object.assign(Object.assign({}, abi), {\n      type: baseTypeName\n    });\n    let baseType = abiParameterToType(baseAbi);\n\n    if (lengthAsString === \"\") {\n      return {\n        typeClass: \"array\",\n        kind: \"dynamic\",\n        baseType,\n        typeHint\n      };\n    } else {\n      let length = new bn_js_1.default(lengthAsString);\n      return {\n        typeClass: \"array\",\n        kind: \"static\",\n        length,\n        baseType,\n        typeHint\n      };\n    }\n  } //otherwise, here are the simple cases\n\n\n  let typeClass = typeName.match(/^([^0-9]+)/)[1];\n\n  switch (typeClass) {\n    case \"uint\":\n    case \"int\":\n      {\n        let bits = typeName.match(/^u?int([0-9]+)/)[1];\n        return {\n          typeClass,\n          bits: parseInt(bits),\n          typeHint\n        };\n      }\n\n    case \"bytes\":\n      let length = typeName.match(/^bytes([0-9]*)/)[1];\n\n      if (length === \"\") {\n        return {\n          typeClass,\n          kind: \"dynamic\",\n          typeHint\n        };\n      } else {\n        return {\n          typeClass,\n          kind: \"static\",\n          length: parseInt(length),\n          typeHint\n        };\n      }\n\n    case \"address\":\n      return {\n        typeClass,\n        kind: \"general\",\n        typeHint\n      };\n\n    case \"string\":\n    case \"bool\":\n      return {\n        typeClass,\n        typeHint\n      };\n\n    case \"fixed\":\n    case \"ufixed\":\n      {\n        let [_, bits, places] = typeName.match(/^u?fixed([0-9]+)x([0-9]+)/);\n        return {\n          typeClass,\n          bits: parseInt(bits),\n          places: parseInt(places),\n          typeHint\n        };\n      }\n\n    case \"function\":\n      return {\n        typeClass,\n        visibility: \"external\",\n        kind: \"general\",\n        typeHint\n      };\n\n    case \"tuple\":\n      let memberTypes = abi.components.map(component => ({\n        name: component.name || undefined,\n        type: abiParameterToType(component)\n      }));\n      return {\n        typeClass,\n        memberTypes,\n        typeHint\n      };\n  }\n}\n\nexports.abiParameterToType = abiParameterToType;","map":{"version":3,"mappings":"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","names":["debug","abiParameterToType","abi","typeName","type","typeHint","internalType","arrayMatch","match","baseTypeName","lengthAsString","baseAbi","baseType","typeClass","kind","length","bn_js_1","bits","parseInt","_","places","visibility","memberTypes","components","map","component","name","undefined","exports"],"sourceRoot":"","sources":["../../../../lib/abi-data/import/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}