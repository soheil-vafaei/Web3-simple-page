{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineProperties = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar internal_1 = require(\"./internal\");\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\n\n\nvar defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label) {\n    if (label === void 0) {\n      label = false;\n    }\n\n    if (label) {\n      var obj_1 = {};\n\n      self._fields.forEach(function (field) {\n        obj_1[field] = \"0x\".concat(self[field].toString('hex'));\n      });\n\n      return obj_1;\n    }\n\n    return (0, bytes_1.baToJSON)(self.raw);\n  };\n\n  self.serialize = function serialize() {\n    return externals_1.rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = (0, bytes_1.toBuffer)(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = (0, bytes_1.unpadBuffer)(v);\n        (0, assert_1.default)(field.length >= v.length, \"The field \".concat(field.name, \" must not have more \").concat(field.length, \" bytes\"));\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        (0, assert_1.default)(field.length === v.length, \"The field \".concat(field.name, \" must have byte length of \").concat(field.length));\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from((0, internal_1.stripHexPrefix)(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = externals_1.rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = (0, bytes_1.toBuffer)(d);\n      });\n    } else if (typeof data === 'object') {\n      var keys_1 = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};\n\nexports.defineProperties = defineProperties;","map":{"version":3,"mappings":"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","names":["defineProperties","self","fields","data","raw","_fields","toJSON","label","obj_1","forEach","field","toString","serialize","externals_1","encode","i","push","name","getter","setter","v","allowZero","Buffer","allocUnsafe","allowLess","length","concat","Object","defineProperty","enumerable","configurable","get","set","default","alias","from","isBuffer","decode","Array","isArray","Error","d","keys_1","keys","indexOf","exports"],"sourceRoot":"","sources":["../src/object.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}