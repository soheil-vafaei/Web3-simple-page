{"ast":null,"code":"import htmlTrie from \"./generated/encode-html.js\";\nimport { xmlReplacer, getCodePoint } from \"./escape.js\";\nconst htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\n\nexport function encodeHTML(data) {\n  return encodeHTMLTrieRe(htmlReplacer, data);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\n\nexport function encodeNonAsciiHTML(data) {\n  return encodeHTMLTrieRe(xmlReplacer, data);\n}\n\nfunction encodeHTMLTrieRe(regExp, str) {\n  let ret = \"\";\n  let lastIdx = 0;\n  let match;\n\n  while ((match = regExp.exec(str)) !== null) {\n    const i = match.index;\n    ret += str.substring(lastIdx, i);\n    const char = str.charCodeAt(i);\n    let next = htmlTrie.get(char);\n\n    if (typeof next === \"object\") {\n      // We are in a branch. Try to match the next char.\n      if (i + 1 < str.length) {\n        const nextChar = str.charCodeAt(i + 1);\n        const value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n\n        if (value !== undefined) {\n          ret += value;\n          lastIdx = regExp.lastIndex += 1;\n          continue;\n        }\n      }\n\n      next = next.v;\n    } // We might have a tree node without a value; skip and use a numeric entitiy.\n\n\n    if (next !== undefined) {\n      ret += next;\n      lastIdx = i + 1;\n    } else {\n      const cp = getCodePoint(str, i);\n      ret += `&#x${cp.toString(16)};`; // Increase by 1 if we have a surrogate pair\n\n      lastIdx = regExp.lastIndex += Number(cp !== char);\n    }\n  }\n\n  return ret + str.substr(lastIdx);\n}","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,4BAArB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;AAEA,MAAMC,YAAY,GAAG,qCAArB;AAEA;;;;;;;;;;;;AAWA,OAAM,SAAUC,UAAV,CAAqBC,IAArB,EAAiC;EACnC,OAAOC,gBAAgB,CAACH,YAAD,EAAeE,IAAf,CAAvB;AACH;AACD;;;;;;;;;AAQA,OAAM,SAAUE,kBAAV,CAA6BF,IAA7B,EAAyC;EAC3C,OAAOC,gBAAgB,CAACL,WAAD,EAAcI,IAAd,CAAvB;AACH;;AAED,SAASC,gBAAT,CAA0BE,MAA1B,EAA0CC,GAA1C,EAAqD;EACjD,IAAIC,GAAG,GAAG,EAAV;EACA,IAAIC,OAAO,GAAG,CAAd;EACA,IAAIC,KAAJ;;EAEA,OAAO,CAACA,KAAK,GAAGJ,MAAM,CAACK,IAAP,CAAYJ,GAAZ,CAAT,MAA+B,IAAtC,EAA4C;IACxC,MAAMK,CAAC,GAAGF,KAAK,CAACG,KAAhB;IACAL,GAAG,IAAID,GAAG,CAACO,SAAJ,CAAcL,OAAd,EAAuBG,CAAvB,CAAP;IACA,MAAMG,IAAI,GAAGR,GAAG,CAACS,UAAJ,CAAeJ,CAAf,CAAb;IACA,IAAIK,IAAI,GAAGnB,QAAQ,CAACoB,GAAT,CAAaH,IAAb,CAAX;;IAEA,IAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;MAC1B;MACA,IAAIL,CAAC,GAAG,CAAJ,GAAQL,GAAG,CAACY,MAAhB,EAAwB;QACpB,MAAMC,QAAQ,GAAGb,GAAG,CAACS,UAAJ,CAAeJ,CAAC,GAAG,CAAnB,CAAjB;QACA,MAAMS,KAAK,GACP,OAAOJ,IAAI,CAACK,CAAZ,KAAkB,QAAlB,GACML,IAAI,CAACK,CAAL,KAAWF,QAAX,GACIH,IAAI,CAACM,CADT,GAEIC,SAHV,GAIMP,IAAI,CAACK,CAAL,CAAOJ,GAAP,CAAWE,QAAX,CALV;;QAOA,IAAIC,KAAK,KAAKG,SAAd,EAAyB;UACrBhB,GAAG,IAAIa,KAAP;UACAZ,OAAO,GAAGH,MAAM,CAACmB,SAAP,IAAoB,CAA9B;UACA;QACH;MACJ;;MAEDR,IAAI,GAAGA,IAAI,CAACS,CAAZ;IACH,CAzBuC,CA2BxC;;;IACA,IAAIT,IAAI,KAAKO,SAAb,EAAwB;MACpBhB,GAAG,IAAIS,IAAP;MACAR,OAAO,GAAGG,CAAC,GAAG,CAAd;IACH,CAHD,MAGO;MACH,MAAMe,EAAE,GAAG3B,YAAY,CAACO,GAAD,EAAMK,CAAN,CAAvB;MACAJ,GAAG,IAAI,MAAMmB,EAAE,CAACC,QAAH,CAAY,EAAZ,CAAe,GAA5B,CAFG,CAGH;;MACAnB,OAAO,GAAGH,MAAM,CAACmB,SAAP,IAAoBI,MAAM,CAACF,EAAE,KAAKZ,IAAR,CAApC;IACH;EACJ;;EAED,OAAOP,GAAG,GAAGD,GAAG,CAACuB,MAAJ,CAAWrB,OAAX,CAAb;AACH","names":["htmlTrie","xmlReplacer","getCodePoint","htmlReplacer","encodeHTML","data","encodeHTMLTrieRe","encodeNonAsciiHTML","regExp","str","ret","lastIdx","match","exec","i","index","substring","char","charCodeAt","next","get","length","nextChar","value","n","o","undefined","lastIndex","v","cp","toString","Number","substr"],"sourceRoot":"https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/","sources":["encode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}