{"ast":null,"code":"import { parse } from \"./parse.js\";\nimport { compile, generate } from \"./compile.js\";\nexport { parse, compile, generate };\n/**\n * Parses and compiles a formula to a highly optimized function.\n * Combination of {@link parse} and {@link compile}.\n *\n * If the formula doesn't match any elements,\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\n * Otherwise, a function accepting an _index_ is returned, which returns\n * whether or not the passed _index_ matches the formula.\n *\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\n *\n * @param formula The formula to compile.\n * @example\n * const check = nthCheck(\"2n+3\");\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n */\n\nexport default function nthCheck(formula) {\n  return compile(parse(formula));\n}\n/**\n * Parses and compiles a formula to a generator that produces a sequence of indices.\n * Combination of {@link parse} and {@link generate}.\n *\n * @param formula The formula to compile.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing</caption>\n *\n * ```js\n * const gen = nthCheck.sequence('2n+3')\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value</caption>\n *\n * ```js\n *\n * const gen = nthCheck.sequence('-2n+5');\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */\n\nexport function sequence(formula) {\n  return generate(parse(formula));\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,cAAlC;AAEA,SAASF,KAAT,EAAgBC,OAAhB,EAAyBC,QAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,eAAc,SAAUC,QAAV,CAAmBC,OAAnB,EAAkC;EAC5C,OAAOH,OAAO,CAACD,KAAK,CAACI,OAAD,CAAN,CAAd;AACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAM,SAAUC,QAAV,CAAmBD,OAAnB,EAAkC;EACpC,OAAOF,QAAQ,CAACF,KAAK,CAACI,OAAD,CAAN,CAAf;AACH","names":["parse","compile","generate","nthCheck","formula","sequence"],"sourceRoot":"https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/","sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}