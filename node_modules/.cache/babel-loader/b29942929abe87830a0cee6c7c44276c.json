{"ast":null,"code":"'use strict';\n\nconst stream = require('stream');\n\nconst util = require('util');\n\nconst utils = require('./utils');\n\nconst Simple = require('./simple');\n\nconst Decoder = require('./decoder');\n\nconst constants = require('./constants');\n\nconst bignumber = require('bignumber.js').BigNumber;\n\nconst NoFilter = require('nofilter');\n\nconst MT = constants.MT;\nconst NUMBYTES = constants.NUMBYTES;\nconst SYMS = constants.SYMS;\n\nfunction plural(c) {\n  if (c > 1) {\n    return 's';\n  } else {\n    return '';\n  }\n}\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\n\n\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   * @param {number} [options.depth=1] - initial indentation depth\n   * @param {boolean} [options.no_summary=false] - if true, omit the summary\n   *   of the full bytes read at the end\n   */\n  constructor(options) {\n    const opts = Object.assign({\n      depth: 1,\n      max_depth: 10,\n      no_summary: false\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    });\n    const max_depth = opts.max_depth;\n    delete opts.max_depth;\n    const depth = opts.depth;\n    delete opts.depth;\n    super(opts);\n    this.depth = depth;\n    this.max_depth = max_depth;\n    this.all = new NoFilter();\n    opts.tags = {\n      24: this._tag_24.bind(this)\n    };\n    this.parser = new Decoder(opts);\n    this.parser.on('value', this._on_value.bind(this));\n    this.parser.on('start', this._on_start.bind(this));\n    this.parser.on('start-string', this._on_start_string.bind(this));\n    this.parser.on('stop', this._on_stop.bind(this));\n    this.parser.on('more-bytes', this._on_more.bind(this));\n    this.parser.on('error', this._on_error.bind(this));\n\n    if (!opts.no_summary) {\n      this.parser.on('data', this._on_data.bind(this));\n    }\n\n    this.parser.bs.on('read', this._on_read.bind(this));\n  }\n  /**\n   * @private\n   */\n\n\n  _tag_24(v) {\n    const c = new Commented({\n      depth: this.depth + 1,\n      no_summary: true\n    });\n    c.on('data', b => this.push(b));\n    c.on('error', er => this.emit('error', er));\n    c.end(v);\n  }\n\n  _transform(fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, cb);\n  }\n  /**\n   * @private\n   */\n\n\n  _flush(cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb);\n  }\n  /**\n   * @callback commentCallback\n   * @param {Error} [error] - if one was generated\n   * @param {string} [commented] - the comment string\n   */\n\n  /**\n   * @typedef CommentOptions\n   * @property {number} [max_depth=10] how many times to indent the dashes\n   * @property {string} [encoding='hex'] encoding of the input\n   */\n\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {string|Buffer} input\n   * @param {CommentOptions|commentCallback|string} [options] or callback\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n\n\n  static comment(input, options, cb) {\n    if (input == null) {\n      throw new Error('input required');\n    }\n\n    let encoding = typeof input === 'string' ? 'hex' : void 0;\n    let max_depth = 10;\n\n    switch (typeof options) {\n      case 'function':\n        cb = options;\n        break;\n\n      case 'string':\n        encoding = options;\n        break;\n\n      case 'number':\n        max_depth = options;\n        break;\n\n      case 'object':\n        const ref1 = options.encoding;\n        const ref2 = options.max_depth;\n        encoding = ref1 != null ? ref1 : encoding;\n        max_depth = ref2 != null ? ref2 : max_depth;\n        break;\n\n      case 'undefined':\n        break;\n\n      default:\n        throw new Error('Unknown option type');\n    }\n\n    const bs = new NoFilter();\n    const d = new Commented({\n      max_depth\n    });\n    let p = null;\n\n    if (typeof cb === 'function') {\n      d.on('end', () => {\n        cb(null, bs.toString('utf8'));\n      });\n      d.on('error', cb);\n    } else {\n      p = new Promise((resolve, reject) => {\n        d.on('end', () => {\n          resolve(bs.toString('utf8'));\n        });\n        return d.on('error', reject);\n      });\n    }\n\n    d.pipe(bs);\n    d.end(input, encoding);\n    return p;\n  }\n  /**\n   * @private\n   */\n\n\n  _on_error(er) {\n    this.push('ERROR: ');\n    this.push(er.toString());\n    this.push('\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_read(buf) {\n    this.all.write(buf);\n    const hex = buf.toString('hex');\n    this.push(new Array(this.depth + 1).join('  '));\n    this.push(hex);\n    let ind = (this.max_depth - this.depth) * 2;\n    ind -= hex.length;\n\n    if (ind < 1) {\n      ind = 1;\n    }\n\n    this.push(new Array(ind + 1).join(' '));\n    return this.push('-- ');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_more(mt, len, parent_mt, pos) {\n    this.depth++;\n    let desc = '';\n\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,';\n        break;\n\n      case MT.NEG_INT:\n        desc = 'Negative number,';\n        break;\n\n      case MT.ARRAY:\n        desc = 'Array, length';\n        break;\n\n      case MT.MAP:\n        desc = 'Map, count';\n        break;\n\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length';\n        break;\n\n      case MT.UTF8_STRING:\n        desc = 'String, length';\n        break;\n\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,';\n        } else {\n          desc = 'Float,';\n        }\n\n        break;\n    }\n\n    return this.push(desc + ' next ' + len + ' byte' + plural(len) + '\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_start_string(mt, tag, parent_mt, pos) {\n    this.depth++;\n    let desc = '';\n\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag;\n        break;\n\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + tag.toString();\n        break;\n    }\n\n    return this.push(desc + '\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_start(mt, tag, parent_mt, pos) {\n    this.depth++;\n\n    if (tag !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `);\n          break;\n\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `);\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `);\n          }\n\n          break;\n      }\n    }\n\n    switch (mt) {\n      case MT.TAG:\n        this.push(`Tag #${tag}`);\n\n        if (tag == 24) {\n          this.push(' Encoded CBOR data item');\n        }\n\n        break;\n\n      case MT.ARRAY:\n        if (tag === SYMS.STREAM) {\n          this.push('Array (streaming)');\n        } else {\n          this.push(`Array, ${tag} item${plural(tag)}`);\n        }\n\n        break;\n\n      case MT.MAP:\n        if (tag === SYMS.STREAM) {\n          this.push('Map (streaming)');\n        } else {\n          this.push(`Map, ${tag} pair${plural(tag)}`);\n        }\n\n        break;\n\n      case MT.BYTE_STRING:\n        this.push('Bytes (streaming)');\n        break;\n\n      case MT.UTF8_STRING:\n        this.push('String (streaming)');\n        break;\n    }\n\n    return this.push('\\n');\n  }\n  /**\n   * @private\n   */\n\n\n  _on_stop(mt) {\n    return this.depth--;\n  }\n  /**\n   * @private\n   */\n\n\n  _on_value(val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `);\n          break;\n\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `);\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `);\n          }\n\n          break;\n      }\n    }\n\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n');\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n');\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n');\n    } else if (typeof val === 'string') {\n      this.depth--;\n\n      if (val.length > 0) {\n        this.push(JSON.stringify(val));\n        this.push('\\n');\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--;\n\n      if (val.length > 0) {\n        this.push(val.toString('hex'));\n        this.push('\\n');\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString());\n      this.push('\\n');\n    } else {\n      this.push(util.inspect(val));\n      this.push('\\n');\n    }\n\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--;\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  _on_data() {\n    this.push('0x');\n    this.push(this.all.read().toString('hex'));\n    return this.push('\\n');\n  }\n\n}\n\nmodule.exports = Commented;","map":{"version":3,"names":["stream","require","util","utils","Simple","Decoder","constants","bignumber","BigNumber","NoFilter","MT","NUMBYTES","SYMS","plural","c","Commented","Transform","constructor","options","opts","Object","assign","depth","max_depth","no_summary","readableObjectMode","writableObjectMode","all","tags","_tag_24","bind","parser","on","_on_value","_on_start","_on_start_string","_on_stop","_on_more","_on_error","_on_data","bs","_on_read","v","b","push","er","emit","end","_transform","fresh","encoding","cb","write","_flush","comment","input","Error","ref1","ref2","d","p","toString","Promise","resolve","reject","pipe","buf","hex","Array","join","ind","length","mt","len","parent_mt","pos","desc","POS_INT","NEG_INT","ARRAY","MAP","BYTE_STRING","UTF8_STRING","SIMPLE_FLOAT","tag","BREAK","Math","floor","TAG","STREAM","val","ai","NULL","UNDEFINED","JSON","stringify","Buffer","isBuffer","inspect","ONE","TWO","FOUR","EIGHT","read","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/cbor/lib/commented.js"],"sourcesContent":["'use strict'\n\nconst stream = require('stream')\nconst util = require('util')\nconst utils = require('./utils')\nconst Simple = require('./simple')\nconst Decoder = require('./decoder')\nconst constants = require('./constants')\nconst bignumber = require('bignumber.js').BigNumber\nconst NoFilter = require('nofilter')\n\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SYMS = constants.SYMS\n\nfunction plural(c) {\n  if (c > 1) {\n    return 's'\n  } else {\n    return ''\n  }\n}\n\n/**\n * Generate the expanded format of RFC 7049, section 2.2.1\n *\n * @extends {stream.Transform}\n */\nclass Commented extends stream.Transform {\n  /**\n   * Create a CBOR commenter.\n   *\n   * @param {object} [options={}] - Stream options\n   * @param {number} [options.max_depth=10] - how many times to indent\n   *   the dashes\n   * @param {number} [options.depth=1] - initial indentation depth\n   * @param {boolean} [options.no_summary=false] - if true, omit the summary\n   *   of the full bytes read at the end\n   */\n  constructor(options) {\n    const opts = Object.assign({\n      depth: 1,\n      max_depth: 10,\n      no_summary: false\n    }, options, {\n      readableObjectMode: false,\n      writableObjectMode: false\n    })\n    const max_depth = opts.max_depth\n    delete opts.max_depth\n    const depth = opts.depth\n    delete opts.depth\n    super(opts)\n\n    this.depth = depth\n    this.max_depth = max_depth\n    this.all = new NoFilter()\n\n    opts.tags = {\n      24: this._tag_24.bind(this)\n    }\n    this.parser = new Decoder(opts)\n    this.parser.on('value', this._on_value.bind(this))\n    this.parser.on('start', this._on_start.bind(this))\n    this.parser.on('start-string', this._on_start_string.bind(this))\n    this.parser.on('stop', this._on_stop.bind(this))\n    this.parser.on('more-bytes', this._on_more.bind(this))\n    this.parser.on('error', this._on_error.bind(this))\n    if (!opts.no_summary) {\n      this.parser.on('data', this._on_data.bind(this))\n    }\n    this.parser.bs.on('read', this._on_read.bind(this))\n  }\n\n  /**\n   * @private\n   */\n  _tag_24(v) {\n    const c = new Commented({depth: this.depth+1, no_summary: true})\n    c.on('data', b => this.push(b))\n    c.on('error', er => this.emit('error', er))\n    c.end(v)\n  }\n\n  _transform(fresh, encoding, cb) {\n    this.parser.write(fresh, encoding, cb)\n  }\n\n  /**\n   * @private\n   */\n  _flush(cb) {\n    // TODO: find the test that covers this, and look at the return value\n    return this.parser._flush(cb)\n  }\n\n  /**\n   * @callback commentCallback\n   * @param {Error} [error] - if one was generated\n   * @param {string} [commented] - the comment string\n   */\n\n  /**\n   * @typedef CommentOptions\n   * @property {number} [max_depth=10] how many times to indent the dashes\n   * @property {string} [encoding='hex'] encoding of the input\n   */\n  /**\n   * Comment on an input Buffer or string, creating a string passed to the\n   * callback.  If callback not specified, a promise is returned.\n   *\n   * @static\n   * @param {string|Buffer} input\n   * @param {CommentOptions|commentCallback|string} [options] or callback\n   * @param {commentCallback=} cb\n   * @returns {Promise} if cb not specified\n   */\n  static comment(input, options, cb) {\n    if (input == null) {\n      throw new Error('input required')\n    }\n    let encoding = (typeof input === 'string') ? 'hex' : void 0\n    let max_depth = 10\n    switch (typeof options) {\n      case 'function':\n        cb = options\n        break\n      case 'string':\n        encoding = options\n        break\n      case 'number':\n        max_depth = options\n        break\n      case 'object':\n        const ref1 = options.encoding\n        const ref2 = options.max_depth\n        encoding = (ref1 != null) ? ref1 : encoding\n        max_depth = (ref2 != null) ? ref2 : max_depth\n        break\n      case 'undefined':\n        break\n      default:\n        throw new Error('Unknown option type')\n    }\n    const bs = new NoFilter()\n    const d = new Commented({\n      max_depth\n    })\n    let p = null\n    if (typeof cb === 'function') {\n      d.on('end', () => {\n        cb(null, bs.toString('utf8'))\n      })\n      d.on('error', cb)\n    } else {\n      p = new Promise((resolve, reject) => {\n        d.on('end', () => {\n          resolve(bs.toString('utf8'))\n        })\n        return d.on('error', reject)\n      })\n    }\n    d.pipe(bs)\n    d.end(input, encoding)\n    return p\n  }\n\n  /**\n   * @private\n   */\n  _on_error(er) {\n    this.push('ERROR: ')\n    this.push(er.toString())\n    this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_read(buf) {\n    this.all.write(buf)\n    const hex = buf.toString('hex')\n    this.push(new Array(this.depth + 1).join('  '))\n    this.push(hex)\n    let ind = (this.max_depth - this.depth) * 2\n    ind -= hex.length\n    if (ind < 1) {\n      ind = 1\n    }\n    this.push(new Array(ind + 1).join(' '))\n    return this.push('-- ')\n  }\n\n  /**\n   * @private\n   */\n  _on_more(mt, len, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.POS_INT:\n        desc = 'Positive number,'\n        break\n      case MT.NEG_INT:\n        desc = 'Negative number,'\n        break\n      case MT.ARRAY:\n        desc = 'Array, length'\n        break\n      case MT.MAP:\n        desc = 'Map, count'\n        break\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length'\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length'\n        break\n      case MT.SIMPLE_FLOAT:\n        if (len === 1) {\n          desc = 'Simple value,'\n        } else {\n          desc = 'Float,'\n        }\n        break\n    }\n    return this.push(desc + ' next ' + len + ' byte' + (plural(len)) + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start_string(mt, tag, parent_mt, pos) {\n    this.depth++\n    let desc = ''\n    switch (mt) {\n      case MT.BYTE_STRING:\n        desc = 'Bytes, length: ' + tag\n        break\n      case MT.UTF8_STRING:\n        desc = 'String, length: ' + (tag.toString())\n        break\n    }\n    return this.push(desc + '\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_start(mt, tag, parent_mt, pos) {\n    this.depth++\n    if (tag !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n    switch (mt) {\n      case MT.TAG:\n        this.push(`Tag #${tag}`)\n        if (tag == 24) {\n          this.push(' Encoded CBOR data item')\n        }\n        break\n      case MT.ARRAY:\n        if (tag === SYMS.STREAM) {\n          this.push('Array (streaming)')\n        } else {\n          this.push(`Array, ${tag} item${plural(tag)}`)\n        }\n        break\n      case MT.MAP:\n        if (tag === SYMS.STREAM) {\n          this.push('Map (streaming)')\n        } else {\n          this.push(`Map, ${tag} pair${plural(tag)}`)\n        }\n        break\n      case MT.BYTE_STRING:\n        this.push('Bytes (streaming)')\n        break\n      case MT.UTF8_STRING:\n        this.push('String (streaming)')\n        break\n    }\n    return this.push('\\n')\n  }\n\n  /**\n   * @private\n   */\n  _on_stop(mt) {\n    return this.depth--\n  }\n\n  /**\n   * @private\n   */\n  _on_value(val, parent_mt, pos, ai) {\n    if (val !== SYMS.BREAK) {\n      switch (parent_mt) {\n        case MT.ARRAY:\n          this.push(`[${pos}], `)\n          break\n        case MT.MAP:\n          if (pos % 2) {\n            this.push(`{Val:${Math.floor(pos / 2)}}, `)\n          } else {\n            this.push(`{Key:${Math.floor(pos / 2)}}, `)\n          }\n          break\n      }\n    }\n\n    if (val === SYMS.BREAK) {\n      this.push('BREAK\\n')\n    } else if (val === SYMS.NULL) {\n      this.push('null\\n')\n    } else if (val === SYMS.UNDEFINED) {\n      this.push('undefined\\n')\n    } else if (typeof val === 'string') {\n      this.depth--\n      if (val.length > 0 ) {\n        this.push(JSON.stringify(val))\n        this.push('\\n')\n      }\n    } else if (Buffer.isBuffer(val)) {\n      this.depth--\n      if (val.length > 0) {\n        this.push(val.toString('hex'))\n        this.push('\\n')\n      }\n    } else if (val instanceof bignumber) {\n      this.push(val.toString())\n      this.push('\\n')\n    } else {\n      this.push(util.inspect(val))\n      this.push('\\n')\n    }\n\n    switch (ai) {\n      case NUMBYTES.ONE:\n      case NUMBYTES.TWO:\n      case NUMBYTES.FOUR:\n      case NUMBYTES.EIGHT:\n        this.depth--\n    }\n  }\n\n  /**\n   * @private\n   */\n  _on_data() {\n    this.push('0x')\n    this.push(this.all.read().toString('hex'))\n    return this.push('\\n')\n  }\n}\n\nmodule.exports = Commented\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}