{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst constants = require('./constants');\n\nconst MT = constants.MT;\nconst SIMPLE = constants.SIMPLE;\nconst SYMS = constants.SYMS;\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\n\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {number} value - the simple value's integer value\n   */\n  constructor(value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + typeof value);\n    }\n\n    if (value < 0 || value > 255 || (value | 0) !== value) {\n      throw new Error('value must be a small positive integer: ' + value);\n    }\n\n    this.value = value;\n  }\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n\n\n  toString() {\n    return 'simple(' + this.value + ')';\n  }\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n\n\n  [util.inspect.custom](depth, opts) {\n    return 'simple(' + this.value + ')';\n  }\n  /**\n   * Debug string for simple value (backward-compatibility version)\n   *\n   * @returns {string} simple(value)\n   */\n\n\n  inspect(depth, opts) {\n    return 'simple(' + this.value + ')';\n  }\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {Object} gen The generator to push onto\n   */\n\n\n  encodeCBOR(gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT);\n  }\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {boolean} - is it Simple?\n   */\n\n\n  static isSimple(obj) {\n    return obj instanceof Simple;\n  }\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {number} val - the CBOR additional info to convert\n   * @param {boolean} [has_parent=true] - Does the CBOR item have a parent?\n   * @param {boolean} [parent_indefinite=false] - Is the parent element\n   *   indefinitely encoded?\n   * @returns {(null|undefined|boolean|Symbol|Simple)} - the decoded value\n   */\n\n\n  static decode(val) {\n    let has_parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let parent_indefinite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false;\n\n      case SIMPLE.TRUE:\n        return true;\n\n      case SIMPLE.NULL:\n        if (has_parent) {\n          return null;\n        } else {\n          return SYMS.NULL;\n        }\n\n      case SIMPLE.UNDEFINED:\n        if (has_parent) {\n          return void 0;\n        } else {\n          return SYMS.UNDEFINED;\n        }\n\n      case -1:\n        if (!has_parent || !parent_indefinite) {\n          throw new Error('Invalid BREAK');\n        }\n\n        return SYMS.BREAK;\n\n      default:\n        return new Simple(val);\n    }\n  }\n\n}\n\nmodule.exports = Simple;","map":{"version":3,"names":["util","require","constants","MT","SIMPLE","SYMS","Simple","constructor","value","Error","toString","inspect","custom","depth","opts","encodeCBOR","gen","_pushInt","SIMPLE_FLOAT","isSimple","obj","decode","val","has_parent","parent_indefinite","FALSE","TRUE","NULL","UNDEFINED","BREAK","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/cbor/lib/simple.js"],"sourcesContent":["'use strict'\n\nconst util = require('util')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {number} value - the simple value's integer value\n   */\n  constructor(value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value|0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString() {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  [util.inspect.custom](depth, opts) {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value (backward-compatibility version)\n   *\n   * @returns {string} simple(value)\n   */\n  inspect(depth, opts) {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {Object} gen The generator to push onto\n   */\n  encodeCBOR(gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {boolean} - is it Simple?\n   */\n  static isSimple(obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {number} val - the CBOR additional info to convert\n   * @param {boolean} [has_parent=true] - Does the CBOR item have a parent?\n   * @param {boolean} [parent_indefinite=false] - Is the parent element\n   *   indefinitely encoded?\n   * @returns {(null|undefined|boolean|Symbol|Simple)} - the decoded value\n   */\n  static decode(val, has_parent=true, parent_indefinite=false) {\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (has_parent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (has_parent) {\n          return void 0\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!has_parent || !parent_indefinite) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAME,EAAE,GAAGD,SAAS,CAACC,EAArB;AACA,MAAMC,MAAM,GAAGF,SAAS,CAACE,MAAzB;AACA,MAAMC,IAAI,GAAGH,SAAS,CAACG,IAAvB;AAEA;AACA;AACA;;AACA,MAAMC,MAAN,CAAa;EACX;AACF;AACA;AACA;AACA;EACEC,WAAW,CAACC,KAAD,EAAQ;IACjB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,MAAM,IAAIC,KAAJ,CAAU,0BAA2B,OAAOD,KAA5C,CAAN;IACD;;IACD,IAAKA,KAAK,GAAG,CAAT,IAAgBA,KAAK,GAAG,GAAxB,IAAiC,CAACA,KAAK,GAAC,CAAP,MAAcA,KAAnD,EAA2D;MACzD,MAAM,IAAIC,KAAJ,CAAU,6CAA6CD,KAAvD,CAAN;IACD;;IACD,KAAKA,KAAL,GAAaA,KAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,QAAQ,GAAG;IACT,OAAO,YAAY,KAAKF,KAAjB,GAAyB,GAAhC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,CAAnBR,IAAI,CAACW,OAAL,CAAaC,MAAM,EAAEC,KAAF,EAASC,IAAT,EAAe;IACjC,OAAO,YAAY,KAAKN,KAAjB,GAAyB,GAAhC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEG,OAAO,CAACE,KAAD,EAAQC,IAAR,EAAc;IACnB,OAAO,YAAY,KAAKN,KAAjB,GAAyB,GAAhC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEO,UAAU,CAACC,GAAD,EAAM;IACd,OAAOA,GAAG,CAACC,QAAJ,CAAa,KAAKT,KAAlB,EAAyBL,EAAE,CAACe,YAA5B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACiB,OAARC,QAAQ,CAACC,GAAD,EAAM;IACnB,OAAOA,GAAG,YAAYd,MAAtB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACe,OAANe,MAAM,CAACC,GAAD,EAAgD;IAAA,IAA1CC,UAA0C,uEAA/B,IAA+B;IAAA,IAAzBC,iBAAyB,uEAAP,KAAO;;IAC3D,QAAQF,GAAR;MACE,KAAKlB,MAAM,CAACqB,KAAZ;QACE,OAAO,KAAP;;MACF,KAAKrB,MAAM,CAACsB,IAAZ;QACE,OAAO,IAAP;;MACF,KAAKtB,MAAM,CAACuB,IAAZ;QACE,IAAIJ,UAAJ,EAAgB;UACd,OAAO,IAAP;QACD,CAFD,MAEO;UACL,OAAOlB,IAAI,CAACsB,IAAZ;QACD;;MACH,KAAKvB,MAAM,CAACwB,SAAZ;QACE,IAAIL,UAAJ,EAAgB;UACd,OAAO,KAAK,CAAZ;QACD,CAFD,MAEO;UACL,OAAOlB,IAAI,CAACuB,SAAZ;QACD;;MACH,KAAK,CAAC,CAAN;QACE,IAAI,CAACL,UAAD,IAAe,CAACC,iBAApB,EAAuC;UACrC,MAAM,IAAIf,KAAJ,CAAU,eAAV,CAAN;QACD;;QACD,OAAOJ,IAAI,CAACwB,KAAZ;;MACF;QACE,OAAO,IAAIvB,MAAJ,CAAWgB,GAAX,CAAP;IAvBJ;EAyBD;;AApGU;;AAuGbQ,MAAM,CAACC,OAAP,GAAiBzB,MAAjB"},"metadata":{},"sourceType":"script"}