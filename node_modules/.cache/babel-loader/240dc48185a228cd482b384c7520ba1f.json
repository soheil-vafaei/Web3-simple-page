{"ast":null,"code":"export const xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nconst xmlCodeMap = new Map([[34, \"&quot;\"], [38, \"&amp;\"], [39, \"&apos;\"], [60, \"&lt;\"], [62, \"&gt;\"]]); // For compatibility with node < 4, we wrap `codePointAt`\n\nexport const getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null ? (str, index) => str.codePointAt(index) : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n(c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\n\nexport function encodeXML(str) {\n  let ret = \"\";\n  let lastIdx = 0;\n  let match;\n\n  while ((match = xmlReplacer.exec(str)) !== null) {\n    const i = match.index;\n    const char = str.charCodeAt(i);\n    const next = xmlCodeMap.get(char);\n\n    if (next !== undefined) {\n      ret += str.substring(lastIdx, i) + next;\n      lastIdx = i + 1;\n    } else {\n      ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`; // Increase by 1 if we have a surrogate pair\n\n      lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n    }\n  }\n\n  return ret + str.substr(lastIdx);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\n\nexport const escape = encodeXML;\n\nfunction getEscaper(regex, map) {\n  return function escape(data) {\n    let match;\n    let lastIdx = 0;\n    let result = \"\";\n\n    while (match = regex.exec(data)) {\n      if (lastIdx !== match.index) {\n        result += data.substring(lastIdx, match.index);\n      } // We know that this chararcter will be in the map.\n\n\n      result += map.get(match[0].charCodeAt(0)); // Every match will be of length 1\n\n      lastIdx = match.index + 1;\n    }\n\n    return result + data.substring(lastIdx);\n  };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\n\n\nexport const escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\n\nexport const escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([[34, \"&quot;\"], [38, \"&amp;\"], [160, \"&nbsp;\"]]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\n\nexport const escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([[38, \"&amp;\"], [60, \"&lt;\"], [62, \"&gt;\"], [160, \"&nbsp;\"]]));","map":{"version":3,"mappings":"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","names":["xmlReplacer","xmlCodeMap","Map","getCodePoint","String","prototype","codePointAt","str","index","c","charCodeAt","encodeXML","ret","lastIdx","match","exec","i","char","next","get","undefined","substring","toString","lastIndex","Number","substr","escape","getEscaper","regex","map","data","result","escapeUTF8","escapeAttribute","escapeText"],"sourceRoot":"https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/","sources":["escape.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}