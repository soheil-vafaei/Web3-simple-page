{"ast":null,"code":"/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\nfunction isNegativeLookbehindAvailable() {\n  try {\n    new RegExp('(?<!.)');\n    return true;\n  } catch (_) {\n    return false;\n  }\n} //like a C number, except:\n//1. no octal literals (leading zeroes disallowed)\n//2. underscores (1 apiece) are allowed between consecutive digits\n//(including hex digits)\n//also, all instances of \\b (word boundary) have been replaced with (?<!\\$)\\b\n//NOTE: we use string rather than regexp in the case where negative lookbehind\n//is allowed to avoid Firefox parse errors; sorry about the resulting double backslashes!\n\n\nvar SOL_NUMBER_RE = /-?(\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\\b[1-9](_?\\d)*(\\.((\\d_?)*\\d)?)?|\\.\\d(_?\\d)*)([eE][-+]?\\d(_?\\d)*)?|\\b0)(?!\\w|\\$)/;\n\nif (isNegativeLookbehindAvailable()) {\n  SOL_NUMBER_RE = SOL_NUMBER_RE.source.replace(/\\\\b/g, '(?<!\\\\$)\\\\b');\n}\n\nvar SOL_NUMBER = {\n  className: 'number',\n  begin: SOL_NUMBER_RE,\n  relevance: 0\n};\nvar SOL_ASSEMBLY_KEYWORDS = {\n  keyword: 'assembly ' + 'let function ' + 'if switch case default for leave ' + 'break continue ' + 'u256 ' + //not in old-style assembly, but in Yul\n  //NOTE: We're counting most opcodes as builtins, but the following ones we're\n  //treating as keywords because they alter control flow or halt execution\n  'jump jumpi ' + 'stop return revert selfdestruct invalid',\n  built_in: //NOTE that push1 through push32, as well as jumpdest, are not included\n  'add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero ' + 'and or xor byte shl shr sar ' + 'addmod mulmod signextend keccak256 ' + 'pc pop ' + 'dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 ' + 'swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 ' + 'mload mstore mstore8 sload sstore msize ' + 'gas address balance selfbalance caller callvalue ' + 'calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash ' + 'create create2 call callcode delegatecall staticcall ' + 'log0 log1 log2 log3 log4 ' + 'chainid origin gasprice basefee blockhash coinbase timestamp number difficulty gaslimit',\n  literal: 'true false'\n};\nvar HEX_APOS_STRING_MODE = {\n  className: 'string',\n  begin: /\\bhex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/ //please also update HEX_QUOTE_STRING_MODE\n\n};\nvar HEX_QUOTE_STRING_MODE = {\n  className: 'string',\n  begin: /\\bhex\"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?\"/ //please also update HEX_APOS_STRING_MODE\n\n}; //I've set these up exactly like hljs's builtin STRING_MODEs,\n//except with the optional initial \"unicode\" text\n\nfunction solAposStringMode(hljs) {\n  return hljs.inherit(hljs.APOS_STRING_MODE, //please also update solQuoteStringMode\n  {\n    begin: /(\\bunicode)?'/\n  });\n}\n\nfunction solQuoteStringMode(hljs) {\n  return hljs.inherit(hljs.QUOTE_STRING_MODE, //please also update solAposStringMode\n  {\n    begin: /(\\bunicode)?\"/\n  });\n}\n\nfunction baseAssembly(hljs) {\n  //this function defines a \"basic\" assembly environment;\n  //we use it several times below with hljs.inherit to provide\n  //elaborations upon this basic assembly environment\n  var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n  var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs); //in assembly, identifiers can contain periods (but may not start with them)\n\n  var SOL_ASSEMBLY_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9.]*/;\n  var SOL_ASSEMBLY_TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    keywords: SOL_ASSEMBLY_KEYWORDS\n  });\n  var SOL_ASSEMBLY_FUNC_PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    keywords: SOL_ASSEMBLY_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, SOL_NUMBER]\n  }; //note: we always put operators below comments so\n  //it won't interfere with comments\n\n  var SOL_ASSEMBLY_OPERATORS = {\n    className: 'operator',\n    begin: /:=|->/\n  };\n  return {\n    keywords: SOL_ASSEMBLY_KEYWORDS,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    contains: [SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_ASSEMBLY_OPERATORS, {\n      // functions\n      className: 'function',\n      lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n      beginKeywords: 'function',\n      end: '{',\n      excludeEnd: true,\n      contains: [SOL_ASSEMBLY_TITLE_MODE, SOL_ASSEMBLY_FUNC_PARAMS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_ASSEMBLY_OPERATORS]\n    }]\n  };\n}\n\nmodule.exports = {\n  SOL_ASSEMBLY_KEYWORDS,\n  baseAssembly,\n  solAposStringMode,\n  solQuoteStringMode,\n  HEX_APOS_STRING_MODE,\n  HEX_QUOTE_STRING_MODE,\n  SOL_NUMBER,\n  isNegativeLookbehindAvailable\n};","map":{"version":3,"names":["isNegativeLookbehindAvailable","RegExp","_","SOL_NUMBER_RE","source","replace","SOL_NUMBER","className","begin","relevance","SOL_ASSEMBLY_KEYWORDS","keyword","built_in","literal","HEX_APOS_STRING_MODE","HEX_QUOTE_STRING_MODE","solAposStringMode","hljs","inherit","APOS_STRING_MODE","solQuoteStringMode","QUOTE_STRING_MODE","baseAssembly","SOL_APOS_STRING_MODE","SOL_QUOTE_STRING_MODE","SOL_ASSEMBLY_LEXEMES_RE","SOL_ASSEMBLY_TITLE_MODE","TITLE_MODE","lexemes","keywords","SOL_ASSEMBLY_FUNC_PARAMS","end","excludeBegin","excludeEnd","contains","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","SOL_ASSEMBLY_OPERATORS","beginKeywords","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/highlightjs-solidity/src/common.js"],"sourcesContent":["/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\n\nfunction isNegativeLookbehindAvailable() {\n    try {\n        new RegExp('(?<!.)');\n        return true;\n    } catch (_) {\n        return false;\n    }\n}\n\n//like a C number, except:\n//1. no octal literals (leading zeroes disallowed)\n//2. underscores (1 apiece) are allowed between consecutive digits\n//(including hex digits)\n//also, all instances of \\b (word boundary) have been replaced with (?<!\\$)\\b\n//NOTE: we use string rather than regexp in the case where negative lookbehind\n//is allowed to avoid Firefox parse errors; sorry about the resulting double backslashes!\nvar SOL_NUMBER_RE = /-?(\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\\b[1-9](_?\\d)*(\\.((\\d_?)*\\d)?)?|\\.\\d(_?\\d)*)([eE][-+]?\\d(_?\\d)*)?|\\b0)(?!\\w|\\$)/;\nif (isNegativeLookbehindAvailable()) {\n    SOL_NUMBER_RE = SOL_NUMBER_RE.source.replace(/\\\\b/g, '(?<!\\\\$)\\\\b');\n}\n\nvar SOL_NUMBER = {\n    className: 'number',\n    begin: SOL_NUMBER_RE,\n    relevance: 0,\n};\n\nvar SOL_ASSEMBLY_KEYWORDS = {\n    keyword:\n        'assembly ' +\n        'let function ' +\n        'if switch case default for leave ' +\n        'break continue ' +\n        'u256 ' + //not in old-style assembly, but in Yul\n        //NOTE: We're counting most opcodes as builtins, but the following ones we're\n        //treating as keywords because they alter control flow or halt execution\n        'jump jumpi ' +\n        'stop return revert selfdestruct invalid',\n    built_in:\n        //NOTE that push1 through push32, as well as jumpdest, are not included\n        'add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero ' +\n        'and or xor byte shl shr sar ' +\n        'addmod mulmod signextend keccak256 ' +\n        'pc pop ' +\n        'dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 ' +\n        'swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 ' +\n        'mload mstore mstore8 sload sstore msize ' +\n        'gas address balance selfbalance caller callvalue ' +\n        'calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash ' +\n        'create create2 call callcode delegatecall staticcall ' +\n        'log0 log1 log2 log3 log4 ' +\n        'chainid origin gasprice basefee blockhash coinbase timestamp number difficulty gaslimit',\n    literal:\n        'true false'\n};\n\nvar HEX_APOS_STRING_MODE = {\n    className: 'string',\n    begin: /\\bhex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/, //please also update HEX_QUOTE_STRING_MODE\n};\n\nvar HEX_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: /\\bhex\"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?\"/, //please also update HEX_APOS_STRING_MODE\n};\n\n//I've set these up exactly like hljs's builtin STRING_MODEs,\n//except with the optional initial \"unicode\" text\nfunction solAposStringMode(hljs) {\n    return hljs.inherit(\n        hljs.APOS_STRING_MODE, //please also update solQuoteStringMode\n        { begin: /(\\bunicode)?'/ }\n    );\n}\n\nfunction solQuoteStringMode(hljs) {\n    return hljs.inherit(\n        hljs.QUOTE_STRING_MODE, //please also update solAposStringMode\n        { begin: /(\\bunicode)?\"/ }\n    );\n}\n\nfunction baseAssembly(hljs) {\n    //this function defines a \"basic\" assembly environment;\n    //we use it several times below with hljs.inherit to provide\n    //elaborations upon this basic assembly environment\n    var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n    var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs);\n\n    //in assembly, identifiers can contain periods (but may not start with them)\n    var SOL_ASSEMBLY_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9.]*/;\n\n    var SOL_ASSEMBLY_TITLE_MODE =\n        hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n            lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n            keywords: SOL_ASSEMBLY_KEYWORDS\n        });\n\n    var SOL_ASSEMBLY_FUNC_PARAMS = {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n        keywords: SOL_ASSEMBLY_KEYWORDS,\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            SOL_NUMBER\n        ]\n    };\n\n    //note: we always put operators below comments so\n    //it won't interfere with comments\n    var SOL_ASSEMBLY_OPERATORS = {\n        className: 'operator',\n        begin: /:=|->/\n    };\n\n    return {\n        keywords: SOL_ASSEMBLY_KEYWORDS,\n        lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n        contains: [\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            HEX_APOS_STRING_MODE,\n            HEX_QUOTE_STRING_MODE,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_NUMBER,\n            SOL_ASSEMBLY_OPERATORS,\n            { // functions\n                className: 'function',\n                lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n                beginKeywords: 'function', end: '{', excludeEnd: true,\n                contains: [\n                    SOL_ASSEMBLY_TITLE_MODE,\n                    SOL_ASSEMBLY_FUNC_PARAMS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    SOL_ASSEMBLY_OPERATORS\n                ],\n            }\n        ]\n    };\n}\n\nmodule.exports = {\n    SOL_ASSEMBLY_KEYWORDS,\n    baseAssembly,\n    solAposStringMode,\n    solQuoteStringMode,\n    HEX_APOS_STRING_MODE,\n    HEX_QUOTE_STRING_MODE,\n    SOL_NUMBER,\n    isNegativeLookbehindAvailable\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}