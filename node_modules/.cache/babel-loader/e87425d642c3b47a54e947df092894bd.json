{"ast":null,"code":"// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nconst whitespace = new Set([9, 10, 12, 13, 32]);\nconst ZERO = \"0\".charCodeAt(0);\nconst NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */\n\nexport function parse(formula) {\n  formula = formula.trim().toLowerCase();\n\n  if (formula === \"even\") {\n    return [2, 0];\n  } else if (formula === \"odd\") {\n    return [2, 1];\n  } // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n\n\n  let idx = 0;\n  let a = 0;\n  let sign = readSign();\n  let number = readNumber();\n\n  if (idx < formula.length && formula.charAt(idx) === \"n\") {\n    idx++;\n    a = sign * (number !== null && number !== void 0 ? number : 1);\n    skipWhitespace();\n\n    if (idx < formula.length) {\n      sign = readSign();\n      skipWhitespace();\n      number = readNumber();\n    } else {\n      sign = number = 0;\n    }\n  } // Throw if there is anything else\n\n\n  if (number === null || idx < formula.length) {\n    throw new Error(`n-th rule couldn't be parsed ('${formula}')`);\n  }\n\n  return [a, sign * number];\n\n  function readSign() {\n    if (formula.charAt(idx) === \"-\") {\n      idx++;\n      return -1;\n    }\n\n    if (formula.charAt(idx) === \"+\") {\n      idx++;\n    }\n\n    return 1;\n  }\n\n  function readNumber() {\n    const start = idx;\n    let value = 0;\n\n    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {\n      value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n      idx++;\n    } // Return `null` if we didn't read anything.\n\n\n    return idx === start ? null : value;\n  }\n\n  function skipWhitespace() {\n    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {\n      idx++;\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;AAEA;AACA,MAAMA,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,CAAR,CAAnB;AACA,MAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAb;AACA,MAAMC,IAAI,GAAG,IAAID,UAAJ,CAAe,CAAf,CAAb;AAEA;;;;;;;;AAOA,OAAM,SAAUE,KAAV,CAAgBC,OAAhB,EAA+B;EACjCA,OAAO,GAAGA,OAAO,CAACC,IAAR,GAAeC,WAAf,EAAV;;EAEA,IAAIF,OAAO,KAAK,MAAhB,EAAwB;IACpB,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;EACH,CAFD,MAEO,IAAIA,OAAO,KAAK,KAAhB,EAAuB;IAC1B,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;EACH,CAPgC,CASjC;;;EAEA,IAAIG,GAAG,GAAG,CAAV;EAEA,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIC,IAAI,GAAGC,QAAQ,EAAnB;EACA,IAAIC,MAAM,GAAGC,UAAU,EAAvB;;EAEA,IAAIL,GAAG,GAAGH,OAAO,CAACS,MAAd,IAAwBT,OAAO,CAACU,MAAR,CAAeP,GAAf,MAAwB,GAApD,EAAyD;IACrDA,GAAG;IACHC,CAAC,GAAGC,IAAI,IAAIE,MAAM,SAAN,UAAM,WAAN,YAAU,CAAd,CAAR;IAEAI,cAAc;;IAEd,IAAIR,GAAG,GAAGH,OAAO,CAACS,MAAlB,EAA0B;MACtBJ,IAAI,GAAGC,QAAQ,EAAf;MACAK,cAAc;MACdJ,MAAM,GAAGC,UAAU,EAAnB;IACH,CAJD,MAIO;MACHH,IAAI,GAAGE,MAAM,GAAG,CAAhB;IACH;EACJ,CA9BgC,CAgCjC;;;EACA,IAAIA,MAAM,KAAK,IAAX,IAAmBJ,GAAG,GAAGH,OAAO,CAACS,MAArC,EAA6C;IACzC,MAAM,IAAIG,KAAJ,CAAU,kCAAkCZ,OAAO,IAAnD,CAAN;EACH;;EAED,OAAO,CAACI,CAAD,EAAIC,IAAI,GAAGE,MAAX,CAAP;;EAEA,SAASD,QAAT,GAAiB;IACb,IAAIN,OAAO,CAACU,MAAR,CAAeP,GAAf,MAAwB,GAA5B,EAAiC;MAC7BA,GAAG;MACH,OAAO,CAAC,CAAR;IACH;;IAED,IAAIH,OAAO,CAACU,MAAR,CAAeP,GAAf,MAAwB,GAA5B,EAAiC;MAC7BA,GAAG;IACN;;IAED,OAAO,CAAP;EACH;;EAED,SAASK,UAAT,GAAmB;IACf,MAAMK,KAAK,GAAGV,GAAd;IACA,IAAIW,KAAK,GAAG,CAAZ;;IAEA,OACIX,GAAG,GAAGH,OAAO,CAACS,MAAd,IACAT,OAAO,CAACH,UAAR,CAAmBM,GAAnB,KAA2BP,IAD3B,IAEAI,OAAO,CAACH,UAAR,CAAmBM,GAAnB,KAA2BL,IAH/B,EAIE;MACEgB,KAAK,GAAGA,KAAK,GAAG,EAAR,IAAcd,OAAO,CAACH,UAAR,CAAmBM,GAAnB,IAA0BP,IAAxC,CAAR;MACAO,GAAG;IACN,CAXc,CAaf;;;IACA,OAAOA,GAAG,KAAKU,KAAR,GAAgB,IAAhB,GAAuBC,KAA9B;EACH;;EAED,SAASH,cAAT,GAAuB;IACnB,OACIR,GAAG,GAAGH,OAAO,CAACS,MAAd,IACAf,UAAU,CAACqB,GAAX,CAAef,OAAO,CAACH,UAAR,CAAmBM,GAAnB,CAAf,CAFJ,EAGE;MACEA,GAAG;IACN;EACJ;AACJ","names":["whitespace","Set","ZERO","charCodeAt","NINE","parse","formula","trim","toLowerCase","idx","a","sign","readSign","number","readNumber","length","charAt","skipWhitespace","Error","start","value","has"],"sourceRoot":"https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/","sources":["parse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}