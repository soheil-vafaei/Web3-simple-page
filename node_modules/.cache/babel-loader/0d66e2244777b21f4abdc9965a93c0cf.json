{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst bignumber = require('bignumber.js').BigNumber;\n\nconst constants = require('./constants');\n\nconst NUMBYTES = constants.NUMBYTES;\nconst SHIFT32 = constants.SHIFT32;\nconst MAX_SAFE_HIGH = 0x1fffff;\nexports.hasBigInt = typeof BigInt === 'function';\n/**\n * Convert a UTF8-encoded Buffer to a JS string.  If possible, throw an error\n * on invalid UTF8.  Byte Order Marks are not looked at or stripped.\n */\n\nconst TD = typeof TextDecoder === 'function' ? TextDecoder : util.TextDecoder;\n/* istanbul ignore else */\n\nif (TD) {\n  // node 11+, browsers : node 8.3+\n  const td = new TD('utf8', {\n    fatal: true,\n    ignoreBOM: true\n  });\n\n  exports.utf8 = buf => td.decode(buf);\n\n  exports.utf8.checksUTF8 = true;\n} else {\n  // TODO: polyfill a slow one or wait for node6 to die\n  exports.utf8 = buf => buf.toString('utf8');\n\n  exports.utf8.checksUTF8 = false;\n}\n\nexports.parseCBORint = function (ai, buf) {\n  switch (ai) {\n    case NUMBYTES.ONE:\n      return buf.readUInt8(0);\n\n    case NUMBYTES.TWO:\n      return buf.readUInt16BE(0);\n\n    case NUMBYTES.FOUR:\n      return buf.readUInt32BE(0);\n\n    case NUMBYTES.EIGHT:\n      const f = buf.readUInt32BE(0);\n      const g = buf.readUInt32BE(4);\n\n      if (f > MAX_SAFE_HIGH) {\n        return new bignumber(f).times(SHIFT32).plus(g);\n      } else {\n        return f * SHIFT32 + g;\n      }\n\n    default:\n      throw new Error('Invalid additional info for int: ' + ai);\n  }\n};\n\nexports.writeHalf = function writeHalf(buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n  const u32 = Buffer.allocUnsafe(4);\n  u32.writeFloatBE(half, 0);\n  const u = u32.readUInt32BE(0); // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n  // hildjj: If the lower 13 bits aren't 0,\n  // we will lose precision in the conversion.\n  // mant32 = 24bits, mant16 = 11bits, 24-11 = 13\n\n  if ((u & 0x1FFF) !== 0) {\n    return false;\n  } //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n\n  let s16 = u >> 16 & 0x8000; // top bit is sign\n\n  const exp = u >> 23 & 0xff; // then 5 bits of exponent\n\n  const mant = u & 0x7fffff; //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n\n  if (exp >= 113 && exp <= 142) {\n    s16 += (exp - 112 << 10) + (mant >> 13);\n  } else if (exp >= 103 && exp < 113) {\n    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n    //     if (mant & ((1 << (126 - exp)) - 1))\n    //       goto float32;         /* loss of precision */\n    //     s16 += ((mant + 0x800000) >> (126 - exp));\n    if (mant & (1 << 126 - exp) - 1) {\n      return false;\n    }\n\n    s16 += mant + 0x800000 >> 126 - exp;\n  } else {\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n    // hildjj: Infinity already handled\n    //   } else\n    //     goto float32;           /* loss of range */\n    return false;\n  } //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n\n\n  buf.writeUInt16BE(s16);\n  return true;\n};\n\nexports.parseHalf = function parseHalf(buf) {\n  const sign = buf[0] & 0x80 ? -1 : 1;\n  const exp = (buf[0] & 0x7C) >> 2;\n  const mant = (buf[0] & 0x03) << 8 | buf[1];\n\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant;\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308);\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant);\n  }\n};\n\nexports.parseCBORfloat = function parseCBORfloat(buf) {\n  switch (buf.length) {\n    case 2:\n      return exports.parseHalf(buf);\n\n    case 4:\n      return buf.readFloatBE(0);\n\n    case 8:\n      return buf.readDoubleBE(0);\n\n    default:\n      throw new Error('Invalid float size: ' + buf.length);\n  }\n};\n\nexports.hex = function hex(s) {\n  return Buffer.from(s.replace(/^0x/, ''), 'hex');\n};\n\nexports.bin = function bin(s) {\n  s = s.replace(/\\s/g, '');\n  let start = 0;\n  let end = s.length % 8 || 8;\n  const chunks = [];\n\n  while (end <= s.length) {\n    chunks.push(parseInt(s.slice(start, end), 2));\n    start = end;\n    end += 8;\n  }\n\n  return Buffer.from(chunks);\n};\n\nexports.extend = function extend() {\n  let old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const len = arguments.length <= 1 ? 0 : arguments.length - 1;\n\n  for (let j = 0; j < len; j++) {\n    const a = j + 1 < 1 || arguments.length <= j + 1 ? undefined : arguments[j + 1];\n\n    for (const k in a) {\n      const v = a[k];\n      old[k] = v;\n    }\n  }\n\n  return old;\n};\n\nexports.arrayEqual = function arrayEqual(a, b) {\n  if (a == null && b == null) {\n    return true;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  return a.length === b.length && a.every((elem, i) => elem === b[i]);\n};\n\nexports.bufferEqual = function bufferEqual(a, b) {\n  if (a == null && b == null) {\n    return true;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (!(Buffer.isBuffer(a) && Buffer.isBuffer(b) && a.length === b.length)) {\n    return false;\n  }\n\n  const len = a.length;\n  let ret = true;\n  let i;\n  let j;\n\n  for (i = j = 0; j < len; i = ++j) {\n    const byte = a[i];\n    ret = ret && b[i] === byte;\n  }\n\n  return !!ret;\n};\n\nexports.bufferToBignumber = function bufferToBignumber(buf) {\n  return new bignumber(buf.toString('hex'), 16);\n};\n\nexports.toBigInt = function toBigInt(num) {\n  if (!exports.hasBigInt) {\n    return Number(num); // lossy.  Better than nothing?\n  }\n\n  return BigInt(num);\n};\n\nexports.bigIntize = function bigIntize(obj) {\n  const ret = {};\n\n  for (const k in obj) {\n    // stupid node 6\n    ret[k] = exports.toBigInt(obj[k]);\n  }\n\n  return ret;\n};\n\nexports.bufferToBigInt = function bufferToBigInt(buf) {\n  return exports.toBigInt('0x' + buf.toString('hex'));\n};\n\nexports.guessEncoding = function guessEncoding(input) {\n  if (typeof input == 'string') {\n    return 'hex';\n  } else if (Buffer.isBuffer(input)) {\n    return undefined;\n  }\n\n  throw new Error('Unknown input type');\n};","map":{"version":3,"names":["util","require","bignumber","BigNumber","constants","NUMBYTES","SHIFT32","MAX_SAFE_HIGH","exports","hasBigInt","BigInt","TD","TextDecoder","td","fatal","ignoreBOM","utf8","buf","decode","checksUTF8","toString","parseCBORint","ai","ONE","readUInt8","TWO","readUInt16BE","FOUR","readUInt32BE","EIGHT","f","g","times","plus","Error","writeHalf","half","u32","Buffer","allocUnsafe","writeFloatBE","u","s16","exp","mant","writeUInt16BE","parseHalf","sign","Math","pow","parseCBORfloat","length","readFloatBE","readDoubleBE","hex","s","from","replace","bin","start","end","chunks","push","parseInt","slice","extend","old","len","j","a","k","v","arrayEqual","b","every","elem","i","bufferEqual","isBuffer","ret","byte","bufferToBignumber","toBigInt","num","Number","bigIntize","obj","bufferToBigInt","guessEncoding","input","undefined"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/cbor/lib/utils.js"],"sourcesContent":["'use strict'\n\nconst util = require('util')\nconst bignumber = require('bignumber.js').BigNumber\n\nconst constants = require('./constants')\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.hasBigInt = (typeof BigInt === 'function')\n\n/**\n * Convert a UTF8-encoded Buffer to a JS string.  If possible, throw an error\n * on invalid UTF8.  Byte Order Marks are not looked at or stripped.\n */\nconst TD = (typeof TextDecoder === 'function') ? TextDecoder : util.TextDecoder\n/* istanbul ignore else */\nif (TD) {\n  // node 11+, browsers : node 8.3+\n  const td = new TD('utf8', {fatal: true, ignoreBOM: true})\n  exports.utf8 = (buf) => td.decode(buf)\n  exports.utf8.checksUTF8 = true\n} else {\n  // TODO: polyfill a slow one or wait for node6 to die\n  exports.utf8 = (buf) => buf.toString('utf8') \n  exports.utf8.checksUTF8 = false  \n}\n\nexports.parseCBORint = function(ai, buf) {\n  switch (ai) {\n    case NUMBYTES.ONE:\n      return buf.readUInt8(0)\n    case NUMBYTES.TWO:\n      return buf.readUInt16BE(0)\n    case NUMBYTES.FOUR:\n      return buf.readUInt32BE(0)\n    case NUMBYTES.EIGHT:\n      const f = buf.readUInt32BE(0)\n      const g = buf.readUInt32BE(4)\n      if (f > MAX_SAFE_HIGH) {\n        return new bignumber(f).times(SHIFT32).plus(g)\n      } else {\n        return (f * SHIFT32) + g\n      }\n    default:\n      throw new Error('Invalid additional info for int: ' + ai)\n  }\n}\n\nexports.writeHalf = function writeHalf(buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits aren't 0,\n  // we will lose precision in the conversion.\n  // mant32 = 24bits, mant16 = 11bits, 24-11 = 13\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  let s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n  } else if ((exp >= 103) && (exp < 113)) {\n    //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n    //     if (mant & ((1 << (126 - exp)) - 1))\n    //       goto float32;         /* loss of precision */\n    //     s16 += ((mant + 0x800000) >> (126 - exp));\n\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n  } else {\n  //   } else if (exp == 255 && mant == 0) { /* Inf */\n  //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n    //   } else\n    //     goto float32;           /* loss of range */\n\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16)\n  return true\n}\n\nexports.parseHalf = function parseHalf(buf) {\n  const sign = buf[0] & 0x80 ? -1 : 1\n  const exp = (buf[0] & 0x7C) >> 2\n  const mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nexports.parseCBORfloat = function parseCBORfloat(buf) {\n  switch (buf.length) {\n    case 2:\n      return exports.parseHalf(buf)\n    case 4:\n      return buf.readFloatBE(0)\n    case 8:\n      return buf.readDoubleBE(0)\n    default:\n      throw new Error('Invalid float size: ' + buf.length)\n  }\n}\n\nexports.hex = function hex(s) {\n  return Buffer.from(s.replace(/^0x/, ''), 'hex')\n}\n\nexports.bin = function bin(s) {\n  s = s.replace(/\\s/g, '')\n  let start = 0\n  let end = (s.length % 8) || 8\n  const chunks = []\n  while (end <= s.length) {\n    chunks.push(parseInt(s.slice(start, end), 2))\n    start = end\n    end += 8\n  }\n  return Buffer.from(chunks)\n}\n\nexports.extend = function extend(old={}, ...adds) {\n  const len = adds.length\n  for (let j = 0; j < len; j++) {\n    const a = adds[j]\n    for (const k in a) {\n      const v = a[k]\n      old[k] = v\n    }\n  }\n  return old\n}\n\nexports.arrayEqual = function arrayEqual(a, b) {\n  if ((a == null) && (b == null)) {\n    return true\n  }\n  if ((a == null) || (b == null)) {\n    return false\n  }\n  return (a.length === b.length) && a.every((elem, i) => elem === b[i])\n}\n\nexports.bufferEqual = function bufferEqual(a, b) {\n  if ((a == null) && (b == null)) {\n    return true\n  }\n  if ((a == null) || (b == null)) {\n    return false\n  }\n  if (!(Buffer.isBuffer(a) && Buffer.isBuffer(b) && (a.length === b.length))) {\n    return false\n  }\n  const len = a.length\n  let ret = true\n  let i\n  let j\n  for (i = j = 0; j < len; i = ++j) {\n    const byte = a[i]\n    ret = ret && (b[i] === byte)\n  }\n  return !!ret\n}\n\nexports.bufferToBignumber = function bufferToBignumber(buf) {\n  return new bignumber(buf.toString('hex'), 16)\n}\n\nexports.toBigInt = function toBigInt(num) {\n  if (!exports.hasBigInt) {\n    return Number(num) // lossy.  Better than nothing?\n  }\n  return BigInt(num)\n}\n\nexports.bigIntize = function bigIntize(obj) {\n  const ret = {}\n  for (const k in obj) { // stupid node 6\n    ret[k] = exports.toBigInt(obj[k])\n  }\n  return ret\n}\n\nexports.bufferToBigInt = function bufferToBigInt(buf) {\n  return exports.toBigInt('0x' + buf.toString('hex'))\n}\n\nexports.guessEncoding = function guessEncoding(input) {\n  if (typeof input == 'string') {\n    return 'hex'\n  } else if (Buffer.isBuffer(input)) {\n    return undefined\n  }\n  throw new Error('Unknown input type')\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}