{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumDefinition = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nexports.EthereumDefinition = {\n  initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // truffle has started expecting gas used/limit to be\n      // hex strings to support bignumbers for other ledgers\n      overrides.getBlock(web3);\n      overrides.getTransaction(web3);\n      overrides.getTransactionReceipt(web3);\n    });\n  }\n\n};\nconst overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  getBlock: web3 => {\n    // @ts-ignore\n    const _oldFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getBlock.method.outputFormatter = block => {\n      // @ts-ignore\n      let result = _oldFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasLimit = \"0x\" + new bn_js_1.default(result.gasLimit).toString(16);\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  },\n  getTransaction: web3 => {\n    const _oldTransactionFormatter = // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransaction.method.outputFormatter = tx => {\n      let result = _oldTransactionFormatter.call( // @ts-ignore\n      web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gas = \"0x\" + new bn_js_1.default(result.gas).toString(16);\n      return result;\n    };\n  },\n  getTransactionReceipt: web3 => {\n    const _oldTransactionReceiptFormatter = // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n      let result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasUsed = \"0x\" + new bn_js_1.default(result.gasUsed).toString(16);\n      return result;\n    };\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAQaA,6BAAqB;EAC1BC,eAAe,CAACC,IAAD,EAAe;;MAClC;MACA;MACAC,SAAS,CAACC,QAAV,CAAmBF,IAAnB;MACAC,SAAS,CAACE,cAAV,CAAyBH,IAAzB;MACAC,SAAS,CAACG,qBAAV,CAAgCJ,IAAhC;IACD;EAAA;;AAP+B,CAArB;AAUb,MAAMC,SAAS,GAAG;EAChB;EACA;EACA;EACAC,QAAQ,EAAGF,IAAD,IAAmB;IAC3B;IACA,MAAMK,aAAa,GAAGL,IAAI,CAACM,GAAL,CAASJ,QAAT,CAAkBK,MAAlB,CAAyBC,eAA/C,CAF2B,CAI3B;;IACAR,IAAI,CAACM,GAAL,CAASJ,QAAT,CAAkBK,MAAlB,CAAyBC,eAAzB,GAA4CC,KAAD,IAAqB;MAC9D;MACA,IAAIC,MAAM,GAAGL,aAAa,CAACM,IAAd,CAAmBX,IAAI,CAACM,GAAL,CAASJ,QAAT,CAAkBK,MAArC,EAA6CE,KAA7C,CAAb,CAF8D,CAI9D;MACA;;;MACAC,MAAM,CAACE,QAAP,GAAkB,OAAO,IAAIC,eAAJ,CAAOH,MAAM,CAACE,QAAd,EAAwBE,QAAxB,CAAiC,EAAjC,CAAzB;MACAJ,MAAM,CAACK,OAAP,GAAiB,OAAO,IAAIF,eAAJ,CAAOH,MAAM,CAACK,OAAd,EAAuBD,QAAvB,CAAgC,EAAhC,CAAxB;MAEA,OAAOJ,MAAP;IACD,CAVD;EAWD,CApBe;EAsBhBP,cAAc,EAAGH,IAAD,IAAmB;IACjC,MAAMgB,wBAAwB,GAC5B;IACAhB,IAAI,CAACM,GAAL,CAASH,cAAT,CAAwBI,MAAxB,CAA+BC,eAFjC,CADiC,CAKjC;;IACAR,IAAI,CAACM,GAAL,CAASH,cAAT,CAAwBI,MAAxB,CAA+BC,eAA/B,GAAkDS,EAAD,IAAuB;MACtE,IAAIP,MAAM,GAAGM,wBAAwB,CAACL,IAAzB,EACX;MACAX,IAAI,CAACM,GAAL,CAASH,cAAT,CAAwBI,MAFb,EAGXU,EAHW,CAAb,CADsE,CAOtE;MACA;;;MACAP,MAAM,CAACQ,GAAP,GAAa,OAAO,IAAIL,eAAJ,CAAOH,MAAM,CAACQ,GAAd,EAAmBJ,QAAnB,CAA4B,EAA5B,CAApB;MAEA,OAAOJ,MAAP;IACD,CAZD;EAaD,CAzCe;EA2ChBN,qBAAqB,EAAGJ,IAAD,IAAmB;IACxC,MAAMmB,+BAA+B,GACnC;IACAnB,IAAI,CAACM,GAAL,CAASF,qBAAT,CAA+BG,MAA/B,CAAsCC,eAFxC,CADwC,CAKxC;;IACAR,IAAI,CAACM,GAAL,CAASF,qBAAT,CAA+BG,MAA/B,CAAsCC,eAAtC,GACEY,OADsD,IAEpD;MACF,IAAIV,MAAM,GAAGS,+BAA+B,CAACR,IAAhC,EACX;MACAX,IAAI,CAACM,GAAL,CAASF,qBAAT,CAA+BG,MAFpB,EAGXa,OAHW,CAAb,CADE,CAOF;MACA;;;MACAV,MAAM,CAACK,OAAP,GAAiB,OAAO,IAAIF,eAAJ,CAAOH,MAAM,CAACK,OAAd,EAAuBD,QAAvB,CAAgC,EAAhC,CAAxB;MAEA,OAAOJ,MAAP;IACD,CAdD;EAeD;AAhEe,CAAlB","names":["exports","initNetworkType","web3","overrides","getBlock","getTransaction","getTransactionReceipt","_oldFormatter","eth","method","outputFormatter","block","result","call","gasLimit","bn_js_1","toString","gasUsed","_oldTransactionFormatter","tx","gas","_oldTransactionReceiptFormatter","receipt"],"sourceRoot":"","sources":["../../../lib/shim/overloads/ethereum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}