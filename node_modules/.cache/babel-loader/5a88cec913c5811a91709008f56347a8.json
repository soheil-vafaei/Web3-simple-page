{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;\n\nvar externals_1 = require(\"./externals\");\n\nvar internal_1 = require(\"./internal\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Convert BN to 0x-prefixed hex string.\n */\n\n\nfunction bnToHex(value) {\n  return \"0x\".concat(value.toString(16));\n}\n\nexports.bnToHex = bnToHex;\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\n\nfunction bnToUnpaddedBuffer(value) {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));\n}\n\nexports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\n\nfunction bnToRlp(value) {\n  return bnToUnpaddedBuffer(value);\n}\n\nexports.bnToRlp = bnToRlp;\n/**\n * Type output options\n */\n\nvar TypeOutput;\n\n(function (TypeOutput) {\n  TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n  TypeOutput[TypeOutput[\"BN\"] = 1] = \"BN\";\n  TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n  TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\n\nfunction toType(input, outputType) {\n  if (input === null) {\n    return null;\n  }\n\n  if (input === undefined) {\n    return undefined;\n  }\n\n  if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {\n    throw new Error(\"A string must be provided with a 0x-prefix, given: \".concat(input));\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n\n  var output = (0, bytes_1.toBuffer)(input);\n\n  if (outputType === TypeOutput.Buffer) {\n    return output;\n  } else if (outputType === TypeOutput.BN) {\n    return new externals_1.BN(output);\n  } else if (outputType === TypeOutput.Number) {\n    var bn = new externals_1.BN(output);\n    var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());\n\n    if (bn.gt(max)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n    }\n\n    return bn.toNumber();\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return \"0x\".concat(output.toString('hex'));\n  }\n}\n\nexports.toType = toType;","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEA;AAiDA;;;;;AAGA,SAAgBA,OAAhB,CAAwBC,KAAxB,EAAiC;EAC/B,OAAO,YAAKA,KAAK,CAACC,QAAN,CAAe,EAAf,CAAL,CAAP;AACD;;AAFDC;AAIA;;;;;;AAKA,SAAgBC,kBAAhB,CAAmCH,KAAnC,EAA4C;EAC1C;EACA;EACA,OAAO,yBAAYA,KAAK,CAACI,WAAN,CAAkBC,MAAlB,CAAZ,CAAP;AACD;;AAJDH;AAMA;;;;;AAIA,SAAgBI,OAAhB,CAAwBN,KAAxB,EAAiC;EAC/B,OAAOG,kBAAkB,CAACH,KAAD,CAAzB;AACD;;AAFDE;AAIA;;;;AAGA,IAAYK,UAAZ;;AAAA,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,UAAU,GAAVL,4CAAU,EAAV,CAAZ;;AA0BA,SAAgBM,MAAhB,CACEC,KADF,EAEEC,UAFF,EAEe;EAEb,IAAID,KAAK,KAAK,IAAd,EAAoB;IAClB,OAAO,IAAP;EACD;;EACD,IAAIA,KAAK,KAAKE,SAAd,EAAyB;IACvB,OAAOA,SAAP;EACD;;EAED,IAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6B,CAAC,4BAAYA,KAAZ,CAAlC,EAAsD;IACpD,MAAM,IAAIG,KAAJ,CAAU,6DAAsDH,KAAtD,CAAV,CAAN;EACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACI,MAAM,CAACC,aAAP,CAAqBL,KAArB,CAAlC,EAA+D;IACpE,MAAM,IAAIG,KAAJ,CACJ,6FADI,CAAN;EAGD;;EAED,IAAMG,MAAM,GAAG,sBAASN,KAAT,CAAf;;EAEA,IAAIC,UAAU,KAAKH,UAAU,CAACF,MAA9B,EAAsC;IACpC,OAAOU,MAAP;EACD,CAFD,MAEO,IAAIL,UAAU,KAAKH,UAAU,CAACS,EAA9B,EAAkC;IACvC,OAAO,IAAIC,cAAJ,CAAOF,MAAP,CAAP;EACD,CAFM,MAEA,IAAIL,UAAU,KAAKH,UAAU,CAACM,MAA9B,EAAsC;IAC3C,IAAMK,EAAE,GAAG,IAAID,cAAJ,CAAOF,MAAP,CAAX;IACA,IAAMI,GAAG,GAAG,IAAIF,cAAJ,CAAOJ,MAAM,CAACO,gBAAP,CAAwBnB,QAAxB,EAAP,CAAZ;;IACA,IAAIiB,EAAE,CAACG,EAAH,CAAMF,GAAN,CAAJ,EAAgB;MACd,MAAM,IAAIP,KAAJ,CACJ,8FADI,CAAN;IAGD;;IACD,OAAOM,EAAE,CAACI,QAAH,EAAP;EACD,CATM,MASA;IACL;IACA,OAAO,YAAKP,MAAM,CAACd,QAAP,CAAgB,KAAhB,CAAL,CAAP;EACD;AACF;;AAtCDC","names":["bnToHex","value","toString","exports","bnToUnpaddedBuffer","toArrayLike","Buffer","bnToRlp","TypeOutput","toType","input","outputType","undefined","Error","Number","isSafeInteger","output","BN","externals_1","bn","max","MAX_SAFE_INTEGER","gt","toNumber"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/ethereumjs-util/src/types.ts"],"sourcesContent":["import { BN } from './externals'\nimport { isHexString } from './internal'\nimport { Address } from './address'\nimport { unpadBuffer, toBuffer, ToBufferInputTypes } from './bytes'\n\n/*\n * A type that represents a BNLike input that can be converted to a BN.\n */\nexport type BNLike = BN | PrefixedHexString | number | Buffer\n\n/*\n * A type that represents a BufferLike input that can be converted to a Buffer.\n */\nexport type BufferLike =\n  | Buffer\n  | Uint8Array\n  | number[]\n  | number\n  | BN\n  | TransformableToBuffer\n  | PrefixedHexString\n\n/*\n * A type that represents a `0x`-prefixed hex string.\n */\nexport type PrefixedHexString = string\n\n/**\n * A type that represents an Address-like value.\n * To convert to address, use `new Address(toBuffer(value))`\n */\nexport type AddressLike = Address | Buffer | PrefixedHexString\n\n/*\n * A type that represents an object that has a `toArray()` method.\n */\nexport interface TransformableToArray {\n  toArray(): Uint8Array\n  toBuffer?(): Buffer\n}\n\n/*\n * A type that represents an object that has a `toBuffer()` method.\n */\nexport interface TransformableToBuffer {\n  toBuffer(): Buffer\n  toArray?(): Uint8Array\n}\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\nexport type NestedBufferArray = Array<Buffer | NestedBufferArray>\n\n/**\n * Convert BN to 0x-prefixed hex string.\n */\nexport function bnToHex(value: BN): PrefixedHexString {\n  return `0x${value.toString(16)}`\n}\n\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bnToUnpaddedBuffer(value: BN): Buffer {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return unpadBuffer(value.toArrayLike(Buffer))\n}\n\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\nexport function bnToRlp(value: BN): Buffer {\n  return bnToUnpaddedBuffer(value)\n}\n\n/**\n * Type output options\n */\nexport enum TypeOutput {\n  Number,\n  BN,\n  Buffer,\n  PrefixedHexString,\n}\n\nexport type TypeOutputReturnType = {\n  [TypeOutput.Number]: number\n  [TypeOutput.BN]: BN\n  [TypeOutput.Buffer]: Buffer\n  [TypeOutput.PrefixedHexString]: PrefixedHexString\n}\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T]\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T] | undefined | null {\n  if (input === null) {\n    return null\n  }\n  if (input === undefined) {\n    return undefined\n  }\n\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`)\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error(\n      'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n    )\n  }\n\n  const output = toBuffer(input)\n\n  if (outputType === TypeOutput.Buffer) {\n    return output as TypeOutputReturnType[T]\n  } else if (outputType === TypeOutput.BN) {\n    return new BN(output) as TypeOutputReturnType[T]\n  } else if (outputType === TypeOutput.Number) {\n    const bn = new BN(output)\n    const max = new BN(Number.MAX_SAFE_INTEGER.toString())\n    if (bn.gt(max)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'\n      )\n    }\n    return bn.toNumber() as TypeOutputReturnType[T]\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return `0x${output.toString('hex')}` as TypeOutputReturnType[T]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}