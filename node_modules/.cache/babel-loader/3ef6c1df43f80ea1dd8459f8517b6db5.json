{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { maxGeneratedLengthFromSizeForArbitrary, MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\n\nfunction buildUniqueArraySetBuilder(constraints) {\n  if (typeof constraints.comparator === 'function') {\n    if (constraints.selector === undefined) {\n      const comparator = constraints.comparator;\n\n      const isEqualForBuilder = (nextA, nextB) => comparator(nextA.value_, nextB.value_);\n\n      return () => new CustomEqualSet(isEqualForBuilder);\n    }\n\n    const comparator = constraints.comparator;\n    const selector = constraints.selector;\n\n    const refinedSelector = next => selector(next.value_);\n\n    const isEqualForBuilder = (nextA, nextB) => comparator(refinedSelector(nextA), refinedSelector(nextB));\n\n    return () => new CustomEqualSet(isEqualForBuilder);\n  }\n\n  const selector = constraints.selector || (v => v);\n\n  const refinedSelector = next => selector(next.value_);\n\n  switch (constraints.comparator) {\n    case 'IsStrictlyEqual':\n      return () => new StrictlyEqualSet(refinedSelector);\n\n    case 'SameValueZero':\n      return () => new SameValueZeroSet(refinedSelector);\n\n    case 'SameValue':\n    case undefined:\n      return () => new SameValueSet(refinedSelector);\n  }\n}\n\nexport function uniqueArray(arb) {\n  let constraints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;\n  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);\n  const depthIdentifier = constraints.depthIdentifier;\n  const setBuilder = buildUniqueArraySetBuilder(constraints);\n  const arrayArb = new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, []);\n  if (minLength === 0) return arrayArb;\n  return arrayArb.filter(tab => tab.length >= minLength);\n}","map":{"version":3,"names":["ArrayArbitrary","maxGeneratedLengthFromSizeForArbitrary","MaxLengthUpperBound","CustomEqualSet","StrictlyEqualSet","SameValueSet","SameValueZeroSet","buildUniqueArraySetBuilder","constraints","comparator","selector","undefined","isEqualForBuilder","nextA","nextB","value_","refinedSelector","next","v","uniqueArray","arb","minLength","maxLength","maxGeneratedLength","size","depthIdentifier","setBuilder","arrayArb","filter","tab","length"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/fast-check/lib/esm/arbitrary/uniqueArray.js"],"sourcesContent":["import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { maxGeneratedLengthFromSizeForArbitrary, MaxLengthUpperBound, } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\nfunction buildUniqueArraySetBuilder(constraints) {\n    if (typeof constraints.comparator === 'function') {\n        if (constraints.selector === undefined) {\n            const comparator = constraints.comparator;\n            const isEqualForBuilder = (nextA, nextB) => comparator(nextA.value_, nextB.value_);\n            return () => new CustomEqualSet(isEqualForBuilder);\n        }\n        const comparator = constraints.comparator;\n        const selector = constraints.selector;\n        const refinedSelector = (next) => selector(next.value_);\n        const isEqualForBuilder = (nextA, nextB) => comparator(refinedSelector(nextA), refinedSelector(nextB));\n        return () => new CustomEqualSet(isEqualForBuilder);\n    }\n    const selector = constraints.selector || ((v) => v);\n    const refinedSelector = (next) => selector(next.value_);\n    switch (constraints.comparator) {\n        case 'IsStrictlyEqual':\n            return () => new StrictlyEqualSet(refinedSelector);\n        case 'SameValueZero':\n            return () => new SameValueZeroSet(refinedSelector);\n        case 'SameValue':\n        case undefined:\n            return () => new SameValueSet(refinedSelector);\n    }\n}\nexport function uniqueArray(arb, constraints = {}) {\n    const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n    const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;\n    const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);\n    const depthIdentifier = constraints.depthIdentifier;\n    const setBuilder = buildUniqueArraySetBuilder(constraints);\n    const arrayArb = new ArrayArbitrary(arb, minLength, maxGeneratedLength, maxLength, depthIdentifier, setBuilder, []);\n    if (minLength === 0)\n        return arrayArb;\n    return arrayArb.filter((tab) => tab.length >= minLength);\n}\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,gCAA/B;AACA,SAASC,sCAAT,EAAiDC,mBAAjD,QAA6E,gDAA7E;AACA,SAASC,cAAT,QAA+B,wCAA/B;AACA,SAASC,gBAAT,QAAiC,0CAAjC;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA,SAASC,gBAAT,QAAiC,0CAAjC;;AACA,SAASC,0BAAT,CAAoCC,WAApC,EAAiD;EAC7C,IAAI,OAAOA,WAAW,CAACC,UAAnB,KAAkC,UAAtC,EAAkD;IAC9C,IAAID,WAAW,CAACE,QAAZ,KAAyBC,SAA7B,EAAwC;MACpC,MAAMF,UAAU,GAAGD,WAAW,CAACC,UAA/B;;MACA,MAAMG,iBAAiB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkBL,UAAU,CAACI,KAAK,CAACE,MAAP,EAAeD,KAAK,CAACC,MAArB,CAAtD;;MACA,OAAO,MAAM,IAAIZ,cAAJ,CAAmBS,iBAAnB,CAAb;IACH;;IACD,MAAMH,UAAU,GAAGD,WAAW,CAACC,UAA/B;IACA,MAAMC,QAAQ,GAAGF,WAAW,CAACE,QAA7B;;IACA,MAAMM,eAAe,GAAIC,IAAD,IAAUP,QAAQ,CAACO,IAAI,CAACF,MAAN,CAA1C;;IACA,MAAMH,iBAAiB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkBL,UAAU,CAACO,eAAe,CAACH,KAAD,CAAhB,EAAyBG,eAAe,CAACF,KAAD,CAAxC,CAAtD;;IACA,OAAO,MAAM,IAAIX,cAAJ,CAAmBS,iBAAnB,CAAb;EACH;;EACD,MAAMF,QAAQ,GAAGF,WAAW,CAACE,QAAZ,KAA0BQ,CAAD,IAAOA,CAAhC,CAAjB;;EACA,MAAMF,eAAe,GAAIC,IAAD,IAAUP,QAAQ,CAACO,IAAI,CAACF,MAAN,CAA1C;;EACA,QAAQP,WAAW,CAACC,UAApB;IACI,KAAK,iBAAL;MACI,OAAO,MAAM,IAAIL,gBAAJ,CAAqBY,eAArB,CAAb;;IACJ,KAAK,eAAL;MACI,OAAO,MAAM,IAAIV,gBAAJ,CAAqBU,eAArB,CAAb;;IACJ,KAAK,WAAL;IACA,KAAKL,SAAL;MACI,OAAO,MAAM,IAAIN,YAAJ,CAAiBW,eAAjB,CAAb;EAPR;AASH;;AACD,OAAO,SAASG,WAAT,CAAqBC,GAArB,EAA4C;EAAA,IAAlBZ,WAAkB,uEAAJ,EAAI;EAC/C,MAAMa,SAAS,GAAGb,WAAW,CAACa,SAAZ,KAA0BV,SAA1B,GAAsCH,WAAW,CAACa,SAAlD,GAA8D,CAAhF;EACA,MAAMC,SAAS,GAAGd,WAAW,CAACc,SAAZ,KAA0BX,SAA1B,GAAsCH,WAAW,CAACc,SAAlD,GAA8DpB,mBAAhF;EACA,MAAMqB,kBAAkB,GAAGtB,sCAAsC,CAACO,WAAW,CAACgB,IAAb,EAAmBH,SAAnB,EAA8BC,SAA9B,EAAyCd,WAAW,CAACc,SAAZ,KAA0BX,SAAnE,CAAjE;EACA,MAAMc,eAAe,GAAGjB,WAAW,CAACiB,eAApC;EACA,MAAMC,UAAU,GAAGnB,0BAA0B,CAACC,WAAD,CAA7C;EACA,MAAMmB,QAAQ,GAAG,IAAI3B,cAAJ,CAAmBoB,GAAnB,EAAwBC,SAAxB,EAAmCE,kBAAnC,EAAuDD,SAAvD,EAAkEG,eAAlE,EAAmFC,UAAnF,EAA+F,EAA/F,CAAjB;EACA,IAAIL,SAAS,KAAK,CAAlB,EACI,OAAOM,QAAP;EACJ,OAAOA,QAAQ,CAACC,MAAT,CAAiBC,GAAD,IAASA,GAAG,CAACC,MAAJ,IAAcT,SAAvC,CAAP;AACH"},"metadata":{},"sourceType":"module"}