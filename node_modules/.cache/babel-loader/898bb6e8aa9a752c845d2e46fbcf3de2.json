{"ast":null,"code":"/**\n * Utilities for reformatting web3 outputs\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\n\nconst web3Utils = require(\"web3-utils\");\n/**\n * Converts from string to other number format\n * @param  {String} val    number string returned by web3\n * @param  {String} format name of format to convert to\n * @return {Object|String} converted value\n */\n\n\nconst _convertNumber = function (val, format) {\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\n\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n\n    case \"BN\":\n      return web3Utils.toBN(val);\n\n    case \"String\":\n      return val;\n\n    case \"BigInt\":\n      return BigInt(val);\n\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n/**\n * Converts arrays of number strings to other number formats\n * @param  {String[]} arr       number string array returned by web3\n * @param  {String}   format    name of format to convert to\n * @return {Object[]|String[]}  array of converted values\n */\n\n\nconst _convertNumberArray = function (arr, format) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (depth == 0) return arr.map(item => _convertNumber(item, format)); // arr is nested\n\n  return arr.map(item => _convertNumberArray(item, format, depth - 1));\n};\n/**\n * Reformats numbers in the result/result-object of a web3 call.\n * Possible forms of `result` are:\n *   - object (with index keys and optionally, named keys)\n *   - array\n *   - single primitive\n * @param  {String|Object|Array} result      web3 call result\n * @param  {Array}               abiSegment  event params OR .call outputs\n * @return {String|Object|Array} reformatted result\n */\n\n\nconst numbers = function (result, abiSegment) {\n  const format = this.numberFormat;\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // larger than zero if nested array\n        let depth = output.type.split(\"[\").length - 2; // result is array\n\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format, depth); // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(result[output.name], format, depth);\n          } // output will always have an index key\n\n\n          result[i] = _convertNumberArray(result[i], format, depth);\n        } //\n\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        } // output will always have an index key\n\n\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  numbers: numbers\n};","map":{"version":3,"names":["BigNumber","require","web3Utils","_convertNumber","val","format","badFormatMsg","toBN","BigInt","Error","_convertNumberArray","arr","depth","map","item","numbers","result","abiSegment","numberFormat","forEach","output","i","type","includes","split","length","Array","isArray","name","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/@truffle/contract/lib/reformat.js"],"sourcesContent":["/**\n * Utilities for reformatting web3 outputs\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\nconst web3Utils = require(\"web3-utils\");\n\n/**\n * Converts from string to other number format\n * @param  {String} val    number string returned by web3\n * @param  {String} format name of format to convert to\n * @return {Object|String} converted value\n */\nconst _convertNumber = function(val, format) {\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\n\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n    case \"BN\":\n      return web3Utils.toBN(val);\n    case \"String\":\n      return val;\n    case \"BigInt\":\n      return BigInt(val);\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n\n/**\n * Converts arrays of number strings to other number formats\n * @param  {String[]} arr       number string array returned by web3\n * @param  {String}   format    name of format to convert to\n * @return {Object[]|String[]}  array of converted values\n */\nconst _convertNumberArray = function(arr, format, depth = 0) {\n  if (depth == 0) return arr.map(item => _convertNumber(item, format));\n  // arr is nested\n  return arr.map(item => _convertNumberArray(item, format, depth - 1));\n};\n\n/**\n * Reformats numbers in the result/result-object of a web3 call.\n * Possible forms of `result` are:\n *   - object (with index keys and optionally, named keys)\n *   - array\n *   - single primitive\n * @param  {String|Object|Array} result      web3 call result\n * @param  {Array}               abiSegment  event params OR .call outputs\n * @return {String|Object|Array} reformatted result\n */\nconst numbers = function(result, abiSegment) {\n  const format = this.numberFormat;\n\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // larger than zero if nested array\n        let depth = output.type.split(\"[\").length - 2;\n\n        // result is array\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format, depth);\n\n          // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(\n              result[output.name],\n              format,\n              depth\n            );\n          }\n          // output will always have an index key\n          result[i] = _convertNumberArray(result[i], format, depth);\n        }\n        //\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        }\n\n        // output will always have an index key\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  numbers: numbers\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}