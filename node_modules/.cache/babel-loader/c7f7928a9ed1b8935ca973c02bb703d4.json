{"ast":null,"code":"export class ReplayPath {\n  static parse(replayPathStr) {\n    const [serializedCount, serializedChanges] = replayPathStr.split(':');\n    const counts = this.parseCounts(serializedCount);\n    const changes = this.parseChanges(serializedChanges);\n    return this.parseOccurences(counts, changes);\n  }\n\n  static stringify(replayPath) {\n    const occurences = this.countOccurences(replayPath);\n    const serializedCount = this.stringifyCounts(occurences);\n    const serializedChanges = this.stringifyChanges(occurences);\n    return `${serializedCount}:${serializedChanges}`;\n  }\n\n  static intToB64(n) {\n    if (n < 26) return String.fromCharCode(n + 65);\n    if (n < 52) return String.fromCharCode(n + 97 - 26);\n    if (n < 62) return String.fromCharCode(n + 48 - 52);\n    return String.fromCharCode(n === 62 ? 43 : 47);\n  }\n\n  static b64ToInt(c) {\n    if (c >= 'a') return c.charCodeAt(0) - 97 + 26;\n    if (c >= 'A') return c.charCodeAt(0) - 65;\n    if (c >= '0') return c.charCodeAt(0) - 48 + 52;\n    return c === '+' ? 62 : 63;\n  }\n\n  static countOccurences(replayPath) {\n    return replayPath.reduce((counts, cur) => {\n      if (counts.length === 0 || counts[counts.length - 1].count === 64 || counts[counts.length - 1].value !== cur) counts.push({\n        value: cur,\n        count: 1\n      });else counts[counts.length - 1].count += 1;\n      return counts;\n    }, []);\n  }\n\n  static parseOccurences(counts, changes) {\n    const replayPath = [];\n\n    for (let idx = 0; idx !== counts.length; ++idx) {\n      const count = counts[idx];\n      const value = changes[idx];\n\n      for (let num = 0; num !== count; ++num) replayPath.push(value);\n    }\n\n    return replayPath;\n  }\n\n  static stringifyChanges(occurences) {\n    let serializedChanges = '';\n\n    for (let idx = 0; idx < occurences.length; idx += 6) {\n      const changesInt = occurences.slice(idx, idx + 6).reduceRight((prev, cur) => prev * 2 + (cur.value ? 1 : 0), 0);\n      serializedChanges += this.intToB64(changesInt);\n    }\n\n    return serializedChanges;\n  }\n\n  static parseChanges(serializedChanges) {\n    const changesInt = serializedChanges.split('').map(c => this.b64ToInt(c));\n    const changes = [];\n\n    for (let idx = 0; idx !== changesInt.length; ++idx) {\n      let current = changesInt[idx];\n\n      for (let n = 0; n !== 6; ++n, current >>= 1) {\n        changes.push(current % 2 === 1);\n      }\n    }\n\n    return changes;\n  }\n\n  static stringifyCounts(occurences) {\n    return occurences.map(_ref => {\n      let {\n        count\n      } = _ref;\n      return this.intToB64(count - 1);\n    }).join('');\n  }\n\n  static parseCounts(serializedCount) {\n    return serializedCount.split('').map(c => this.b64ToInt(c) + 1);\n  }\n\n}","map":{"version":3,"names":["ReplayPath","parse","replayPathStr","serializedCount","serializedChanges","split","counts","parseCounts","changes","parseChanges","parseOccurences","stringify","replayPath","occurences","countOccurences","stringifyCounts","stringifyChanges","intToB64","n","String","fromCharCode","b64ToInt","c","charCodeAt","reduce","cur","length","count","value","push","idx","num","changesInt","slice","reduceRight","prev","map","current","join"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/check/model/ReplayPath.js"],"sourcesContent":["export class ReplayPath {\n    static parse(replayPathStr) {\n        const [serializedCount, serializedChanges] = replayPathStr.split(':');\n        const counts = this.parseCounts(serializedCount);\n        const changes = this.parseChanges(serializedChanges);\n        return this.parseOccurences(counts, changes);\n    }\n    static stringify(replayPath) {\n        const occurences = this.countOccurences(replayPath);\n        const serializedCount = this.stringifyCounts(occurences);\n        const serializedChanges = this.stringifyChanges(occurences);\n        return `${serializedCount}:${serializedChanges}`;\n    }\n    static intToB64(n) {\n        if (n < 26)\n            return String.fromCharCode(n + 65);\n        if (n < 52)\n            return String.fromCharCode(n + 97 - 26);\n        if (n < 62)\n            return String.fromCharCode(n + 48 - 52);\n        return String.fromCharCode(n === 62 ? 43 : 47);\n    }\n    static b64ToInt(c) {\n        if (c >= 'a')\n            return c.charCodeAt(0) - 97 + 26;\n        if (c >= 'A')\n            return c.charCodeAt(0) - 65;\n        if (c >= '0')\n            return c.charCodeAt(0) - 48 + 52;\n        return c === '+' ? 62 : 63;\n    }\n    static countOccurences(replayPath) {\n        return replayPath.reduce((counts, cur) => {\n            if (counts.length === 0 || counts[counts.length - 1].count === 64 || counts[counts.length - 1].value !== cur)\n                counts.push({ value: cur, count: 1 });\n            else\n                counts[counts.length - 1].count += 1;\n            return counts;\n        }, []);\n    }\n    static parseOccurences(counts, changes) {\n        const replayPath = [];\n        for (let idx = 0; idx !== counts.length; ++idx) {\n            const count = counts[idx];\n            const value = changes[idx];\n            for (let num = 0; num !== count; ++num)\n                replayPath.push(value);\n        }\n        return replayPath;\n    }\n    static stringifyChanges(occurences) {\n        let serializedChanges = '';\n        for (let idx = 0; idx < occurences.length; idx += 6) {\n            const changesInt = occurences\n                .slice(idx, idx + 6)\n                .reduceRight((prev, cur) => prev * 2 + (cur.value ? 1 : 0), 0);\n            serializedChanges += this.intToB64(changesInt);\n        }\n        return serializedChanges;\n    }\n    static parseChanges(serializedChanges) {\n        const changesInt = serializedChanges.split('').map((c) => this.b64ToInt(c));\n        const changes = [];\n        for (let idx = 0; idx !== changesInt.length; ++idx) {\n            let current = changesInt[idx];\n            for (let n = 0; n !== 6; ++n, current >>= 1) {\n                changes.push(current % 2 === 1);\n            }\n        }\n        return changes;\n    }\n    static stringifyCounts(occurences) {\n        return occurences.map(({ count }) => this.intToB64(count - 1)).join('');\n    }\n    static parseCounts(serializedCount) {\n        return serializedCount.split('').map((c) => this.b64ToInt(c) + 1);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}