{"ast":null,"code":"import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js'; // Sets\n\nconst VOID_ELEMENTS = new Set([$.AREA, $.BASE, $.BASEFONT, $.BGSOUND, $.BR, $.COL, $.EMBED, $.FRAME, $.HR, $.IMG, $.INPUT, $.KEYGEN, $.LINK, $.META, $.PARAM, $.SOURCE, $.TRACK, $.WBR]);\n\nfunction isVoidElement(node, options) {\n  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\n\nconst defaultOpts = {\n  treeAdapter: defaultTreeAdapter,\n  scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\n\nexport function serialize(node, options) {\n  const opts = { ...defaultOpts,\n    ...options\n  };\n\n  if (isVoidElement(node, opts)) {\n    return '';\n  }\n\n  return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\n\nexport function serializeOuter(node, options) {\n  const opts = { ...defaultOpts,\n    ...options\n  };\n  return serializeNode(node, opts);\n}\n\nfunction serializeChildNodes(parentNode, options) {\n  let html = ''; // Get container of the child nodes\n\n  const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === $.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n  const childNodes = options.treeAdapter.getChildNodes(container);\n\n  if (childNodes) {\n    for (const currentNode of childNodes) {\n      html += serializeNode(currentNode, options);\n    }\n  }\n\n  return html;\n}\n\nfunction serializeNode(node, options) {\n  if (options.treeAdapter.isElementNode(node)) {\n    return serializeElement(node, options);\n  }\n\n  if (options.treeAdapter.isTextNode(node)) {\n    return serializeTextNode(node, options);\n  }\n\n  if (options.treeAdapter.isCommentNode(node)) {\n    return serializeCommentNode(node, options);\n  }\n\n  if (options.treeAdapter.isDocumentTypeNode(node)) {\n    return serializeDocumentTypeNode(node, options);\n  } // Return an empty string for unknown nodes\n\n\n  return '';\n}\n\nfunction serializeElement(node, options) {\n  const tn = options.treeAdapter.getTagName(node);\n  return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\n\nfunction serializeAttributes(node, _ref) {\n  let {\n    treeAdapter\n  } = _ref;\n  let html = '';\n\n  for (const attr of treeAdapter.getAttrList(node)) {\n    html += ' ';\n\n    if (!attr.namespace) {\n      html += attr.name;\n    } else switch (attr.namespace) {\n      case NS.XML:\n        {\n          html += `xml:${attr.name}`;\n          break;\n        }\n\n      case NS.XMLNS:\n        {\n          if (attr.name !== 'xmlns') {\n            html += 'xmlns:';\n          }\n\n          html += attr.name;\n          break;\n        }\n\n      case NS.XLINK:\n        {\n          html += `xlink:${attr.name}`;\n          break;\n        }\n\n      default:\n        {\n          html += `${attr.prefix}:${attr.name}`;\n        }\n    }\n\n    html += `=\"${escapeAttribute(attr.value)}\"`;\n  }\n\n  return html;\n}\n\nfunction serializeTextNode(node, options) {\n  const {\n    treeAdapter\n  } = options;\n  const content = treeAdapter.getTextNodeContent(node);\n  const parent = treeAdapter.getParentNode(node);\n  const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n  return parentTn && treeAdapter.getNamespaceURI(parent) === NS.HTML && hasUnescapedText(parentTn, options.scriptingEnabled) ? content : escapeText(content);\n}\n\nfunction serializeCommentNode(node, _ref2) {\n  let {\n    treeAdapter\n  } = _ref2;\n  return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\n\nfunction serializeDocumentTypeNode(node, _ref3) {\n  let {\n    treeAdapter\n  } = _ref3;\n  return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}","map":{"version":3,"names":["TAG_NAMES","$","NS","hasUnescapedText","escapeText","escapeAttribute","defaultTreeAdapter","VOID_ELEMENTS","Set","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","isVoidElement","node","options","treeAdapter","isElementNode","getNamespaceURI","HTML","has","getTagName","defaultOpts","scriptingEnabled","serialize","opts","serializeChildNodes","serializeOuter","serializeNode","parentNode","html","container","TEMPLATE","getTemplateContent","childNodes","getChildNodes","currentNode","serializeElement","isTextNode","serializeTextNode","isCommentNode","serializeCommentNode","isDocumentTypeNode","serializeDocumentTypeNode","tn","serializeAttributes","attr","getAttrList","namespace","name","XML","XMLNS","XLINK","prefix","value","content","getTextNodeContent","parent","getParentNode","parentTn","getCommentNodeContent","getDocumentTypeNodeName"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/cheerio/node_modules/parse5/dist/serializer/index.js"],"sourcesContent":["import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (!attr.namespace) {\n            html += attr.name;\n        }\n        else\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module"}