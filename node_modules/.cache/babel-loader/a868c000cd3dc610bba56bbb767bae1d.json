{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unrecognizedNumberMessage = exports.wrongLengthMessage = exports.notABytestringMessage = exports.tooPreciseMessage = exports.overlongMessage = exports.specifiedTypeMessage = exports.wrappedTypeMessage = exports.negativeBytesMessage = exports.looseModeOnlyMessage = exports.invalidUtf16Message = exports.checksumFailedMessage = exports.outOfRangeEnumMessage = exports.outOfRangeMessage = exports.badEnumMessage = exports.nonSafeMessage = exports.nonNumericMessage = exports.nonIntegerMessage = exports.notAStringMessage = exports.errorResultMessage = exports.wrongArrayLengthMessage = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:wrap:messages\");\n\nconst Format = __importStar(require(\"../format\"));\n\nfunction wrongArrayLengthMessage(expected, got) {\n  return `Incorrect array length (expected ${expected.toString()} entries, got ${got})`;\n}\n\nexports.wrongArrayLengthMessage = wrongArrayLengthMessage;\nexports.errorResultMessage = \"Input is a wrapped result representing an error rather than a value\";\nexports.notAStringMessage = \"Input was not a string, type/value pair, or wrapped or boxed string\";\nexports.nonIntegerMessage = \"Input numeric value was not an integer\";\nexports.nonNumericMessage = \"Input string was not numeric\";\nexports.nonSafeMessage = \"Input number is not a Javascript safe integer\";\nexports.badEnumMessage = \"Input string was neither numeric nor a valid enum value\";\nexports.outOfRangeMessage = \"Input is outside the range of this numeric type\";\nexports.outOfRangeEnumMessage = \"Input is outside the range of this enum type\";\nexports.checksumFailedMessage = \"Address checksum failed (use all lowercase or all uppercase to circumvent)\";\nexports.invalidUtf16Message = \"Input string was not valid UTF-16\";\nexports.looseModeOnlyMessage = \"Numeric input for bytes is only allowed in loose mode and only for dynamic-length bytestrings\";\nexports.negativeBytesMessage = \"Input for bytes cannot be negative\";\n\nfunction wrappedTypeMessage(dataType) {\n  return `Input is a wrapped value of type ${Format.Types.typeString(dataType)}`;\n}\n\nexports.wrappedTypeMessage = wrappedTypeMessage;\n\nfunction specifiedTypeMessage(dataType) {\n  return `Input had type explicitly specified as ${dataType}`;\n}\n\nexports.specifiedTypeMessage = specifiedTypeMessage;\n\nfunction overlongMessage(expected, got) {\n  return `Input is too long for type (expected ${expected} bytes, got ${got} bytes)`;\n}\n\nexports.overlongMessage = overlongMessage;\n\nfunction tooPreciseMessage(expected, got) {\n  return `Input has too many decimal places for type (expected ${expected} decimal places, got ${got} decimal places)`;\n}\n\nexports.tooPreciseMessage = tooPreciseMessage;\n\nfunction notABytestringMessage(what) {\n  return `${what} is not a valid bytestring (even-length hex string)`;\n}\n\nexports.notABytestringMessage = notABytestringMessage;\n\nfunction wrongLengthMessage(what, expected, got) {\n  return `Input ${what} was ${got} bytes instead of ${expected} bytes`;\n}\n\nexports.wrongLengthMessage = wrongLengthMessage;\n\nfunction unrecognizedNumberMessage(dataType) {\n  const enumMessage = dataType.typeClass === \"enum\" ? \"enum value name, \" : \"\";\n  const byteArrayMessage = dataType.typeClass !== \"fixed\" && dataType.typeClass !== \"ufixed\" ? \"byte-array-like, \" : \"\";\n  return `Input was not a number, big integer, numeric string, ${enumMessage}type/value pair, boxed number, ${byteArrayMessage}wrapped number or enum, or recognized big number class`;\n}\n\nexports.unrecognizedNumberMessage = unrecognizedNumberMessage;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAMA,KAAK,GAAG,qBAAY,qBAAZ,CAAd;;AAIA;;AAEA,SAAgBC,uBAAhB,CAAwCC,QAAxC,EAA+DC,GAA/D,EAA0E;EACxE,OAAO,oCAAoCD,QAAQ,CAACE,QAAT,EAAmB,iBAAiBD,GAAG,GAAlF;AACD;;AAFDE;AAIaA,6BACX,qEADW;AAEAA,4BACX,qEADW;AAEAA,4BAA4B,wCAA5B;AACAA,4BAA4B,8BAA5B;AACAA,yBAAyB,+CAAzB;AACAA,yBACX,yDADW;AAEAA,4BAA4B,iDAA5B;AACAA,gCAAgC,8CAAhC;AACAA,gCACX,4EADW;AAEAA,8BAA+B,mCAA/B;AACAA,+BAA+B,+FAA/B;AACAA,+BAA+B,oCAA/B;;AAEb,SAAgBC,kBAAhB,CAAmCC,QAAnC,EAA8D;EAC5D,OAAO,oCAAoCC,MAAM,CAACC,KAAP,CAAaC,UAAb,CACzCH,QADyC,CAE1C,EAFD;AAGD;;AAJDF;;AAKA,SAAgBM,oBAAhB,CAAqCJ,QAArC,EAAqD;EACnD,OAAO,0CAA0CA,QAAQ,EAAzD;AACD;;AAFDF;;AAGA,SAAgBO,eAAhB,CAAgCV,QAAhC,EAAkDC,GAAlD,EAA6D;EAC3D,OAAO,wCAAwCD,QAAQ,eAAeC,GAAG,SAAzE;AACD;;AAFDE;;AAGA,SAAgBQ,iBAAhB,CAAkCX,QAAlC,EAAoDC,GAApD,EAA+D;EAC7D,OAAO,wDAAwDD,QAAQ,wBAAwBC,GAAG,kBAAlG;AACD;;AAFDE;;AAGA,SAAgBS,qBAAhB,CAAsCC,IAAtC,EAAkD;EAChD,OAAO,GAAGA,IAAI,qDAAd;AACD;;AAFDV;;AAGA,SAAgBW,kBAAhB,CACED,IADF,EAEEb,QAFF,EAGEC,GAHF,EAGa;EAEX,OAAO,SAASY,IAAI,QAAQZ,GAAG,qBAAqBD,QAAQ,QAA5D;AACD;;AANDG;;AAQA,SAAgBY,yBAAhB,CACEV,QADF,EAC2C;EAEzC,MAAMW,WAAW,GAAGX,QAAQ,CAACY,SAAT,KAAuB,MAAvB,GAChB,mBADgB,GAEhB,EAFJ;EAGA,MAAMC,gBAAgB,GACpBb,QAAQ,CAACY,SAAT,KAAuB,OAAvB,IAAkCZ,QAAQ,CAACY,SAAT,KAAuB,QAAzD,GACI,mBADJ,GAEI,EAHN;EAIA,OAAO,wDAAwDD,WAAW,kCAAkCE,gBAAgB,wDAA5H;AACD;;AAXDf","names":["debug","wrongArrayLengthMessage","expected","got","toString","exports","wrappedTypeMessage","dataType","Format","Types","typeString","specifiedTypeMessage","overlongMessage","tooPreciseMessage","notABytestringMessage","what","wrongLengthMessage","unrecognizedNumberMessage","enumMessage","typeClass","byteArrayMessage"],"sourceRoot":"","sources":["../../../lib/wrap/messages.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}