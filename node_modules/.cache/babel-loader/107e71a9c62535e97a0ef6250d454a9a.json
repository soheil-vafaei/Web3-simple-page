{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatFunctionLike = exports.ReturndataDecodingInspector = exports.LogDecodingInspector = exports.containsDeliberateReadError = exports.CalldataDecodingInspector = exports.nativizeEventArgs = exports.nativizeReturn = exports.nativize = exports.nativizeAccessList = exports.unsafeNativizeVariables = exports.unsafeNativize = exports.ResultInspector = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:export\");\n\nconst os_1 = __importDefault(require(\"os\"));\n\nconst util_1 = __importDefault(require(\"util\"));\n\nconst Format = __importStar(require(\"./format\"));\n\nconst Conversion = __importStar(require(\"./conversion\"));\n\nconst inspect_1 = require(\"./format/utils/inspect\");\n\nObject.defineProperty(exports, \"ResultInspector\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.ResultInspector;\n  }\n});\nObject.defineProperty(exports, \"unsafeNativize\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.unsafeNativize;\n  }\n});\nObject.defineProperty(exports, \"unsafeNativizeVariables\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.unsafeNativizeVariables;\n  }\n});\nObject.defineProperty(exports, \"nativizeAccessList\", {\n  enumerable: true,\n  get: function () {\n    return inspect_1.nativizeAccessList;\n  }\n});\n/**\n * This function is similar to\n * [[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], but is intended to\n * be safe, and also allows for different output formats.  The only currently\n * supported format is \"ethers\", which is intended to match the way that\n * Truffle Contract currently returns values (based on the Ethers decoder).  As\n * such, it only handles ABI types, and in addition does not handle the types\n * fixed, ufixed, or function.  Note that in these cases it returns `undefined`\n * rather than throwing, as we want this function to be used in contexts where\n * it had better not throw.  It also does not handle circularities, for similar\n * reasons.\n *\n * To handle numeric types, this function takes an optional numberFormatter\n * option that tells it how to handle numbers; this function should take a\n * BigInt as input.  By default, this function will be the identity, and so\n * numbers will be represented as BigInts.\n *\n * Note that this function begins by calling abify, so out-of-range enums (that\n * aren't so out-of-range as to be padding errors) will not return `undefined`.\n * Out-of-range booleans similarly will return true rather than `undefined`.\n * However, other range errors may return `undefined`; this may technically be a\n * slight incompatibility with existing behavior, but should not be relevant\n * except in quite unusual cases.\n *\n * In order to match the behavior for tuples, tuples will be transformed into\n * arrays, but named entries will additionally be keyed by name.  Moreover,\n * indexed variables of reference type will be nativized to an undecoded hex\n * string.\n */\n\nfunction nativize(result) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  const numberFormatter = options.numberFormatter || (x => x);\n\n  const format = options.format || \"ethers\";\n\n  switch (format) {\n    case \"ethers\":\n      return ethersCompatibleNativize(result, numberFormatter);\n  }\n}\n\nexports.nativize = nativize;\n\nfunction ethersCompatibleNativize(result) {\n  let numberFormatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n\n  //note: the original version of this function began by calling abify,\n  //but we don't do that here because abify requires a userDefinedTypes\n  //parameter and we don't want that.\n  //However, it only needs that to handle getting the types right.  Since\n  //we don't care about that here, we instead do away with abify and handle\n  //such matters ourselves (which is less convenient, yeah).\n  switch (result.kind) {\n    case \"error\":\n      switch (result.error.kind) {\n        case \"IndexedReferenceTypeError\":\n          //strictly speaking for arrays ethers will fail to decode\n          //rather than do this, but, eh\n          return result.error.raw;\n\n        case \"EnumOutOfRangeError\":\n          return numberFormatter(Conversion.toBigInt(result.error.rawAsBN));\n\n        default:\n          return undefined;\n      }\n\n    case \"value\":\n      switch (result.type.typeClass) {\n        case \"uint\":\n        case \"int\":\n          const asBN = result.value.asBN;\n          return numberFormatter(Conversion.toBigInt(asBN));\n\n        case \"enum\":\n          const numericAsBN = result.value.numericAsBN;\n          return numberFormatter(Conversion.toBigInt(numericAsBN));\n\n        case \"bool\":\n          return result.value.asBoolean;\n\n        case \"bytes\":\n          const asHex = result.value.asHex;\n          return asHex !== \"0x\" ? asHex : null;\n\n        case \"address\":\n          return result.value.asAddress;\n\n        case \"contract\":\n          return result.value.address;\n\n        case \"string\":\n          {\n            const coercedResult = result;\n\n            switch (coercedResult.value.kind) {\n              case \"valid\":\n                return coercedResult.value.asString;\n\n              case \"malformed\":\n                // this will turn malformed utf-8 into replacement characters (U+FFFD) (WARNING)\n                // note we need to cut off the 0x prefix\n                return Buffer.from(coercedResult.value.asHex.slice(2), \"hex\").toString();\n            }\n          }\n\n        case \"userDefinedValueType\":\n          return ethersCompatibleNativize(result.value, numberFormatter);\n\n        case \"array\":\n          return result.value.map(value => ethersCompatibleNativize(value, numberFormatter));\n\n        case \"tuple\":\n        case \"struct\":\n          //in this case, we need the result to be an array, but also\n          //to have the field names (where extant) as keys\n          const nativized = [];\n          const pairs = result.value;\n\n          for (const {\n            name,\n            value\n          } of pairs) {\n            const nativizedValue = ethersCompatibleNativize(value, numberFormatter);\n            nativized.push(nativizedValue);\n\n            if (name) {\n              nativized[name] = nativizedValue;\n            }\n          }\n\n          return nativized;\n\n        case \"function\":\n          switch (result.type.visibility) {\n            case \"external\":\n              const coercedResult = result; //ethers per se doesn't handle this, but web3's hacked version will\n              //sometimes decode these as just a bytes24, so let's do that\n\n              return coercedResult.value.contract.address.toLowerCase() + coercedResult.value.selector.slice(2);\n\n            case \"internal\":\n              return undefined;\n          }\n\n        case \"fixed\":\n        case \"ufixed\":\n        default:\n          return undefined;\n      }\n\n  }\n}\n/**\n * This function is similar to [[nativize]], but takes\n * a [[ReturndataDecoding]].  If there's only one returned value, it\n * will be run through compatibleNativize but otherwise unaltered;\n * otherwise the results will be put in an object.\n *\n * Note that if the ReturndataDecoding is not a [[ReturnDecoding]],\n * this will just return `undefined`.\n */\n\n\nfunction nativizeReturn(decoding) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  const numberFormatter = options.numberFormatter || (x => x);\n\n  const format = options.format || \"ethers\";\n\n  switch (format) {\n    case \"ethers\":\n      return ethersCompatibleNativizeReturn(decoding, numberFormatter);\n  }\n}\n\nexports.nativizeReturn = nativizeReturn;\n\nfunction ethersCompatibleNativizeReturn(decoding) {\n  let numberFormatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n\n  if (decoding.kind !== \"return\") {\n    return undefined;\n  }\n\n  if (decoding.arguments.length === 1) {\n    return ethersCompatibleNativize(decoding.arguments[0].value, numberFormatter);\n  }\n\n  const result = {};\n\n  for (let i = 0; i < decoding.arguments.length; i++) {\n    const {\n      name,\n      value\n    } = decoding.arguments[i];\n    const nativized = ethersCompatibleNativize(value, numberFormatter);\n    result[i] = nativized;\n\n    if (name) {\n      result[name] = nativized;\n    }\n  }\n\n  return result;\n}\n/**\n * This function is similar to [[compatibleNativize]], but takes\n * a [[LogDecoding]], and puts the results in an object.  Note\n * that this does not return the entire event info, but just the\n * `args` for the event.\n */\n\n\nfunction nativizeEventArgs(decoding) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  const numberFormatter = options.numberFormatter || (x => x);\n\n  const format = options.format || \"ethers\";\n\n  switch (format) {\n    case \"ethers\":\n      return ethersCompatibleNativizeEventArgs(decoding, numberFormatter);\n  }\n}\n\nexports.nativizeEventArgs = nativizeEventArgs;\n\nfunction ethersCompatibleNativizeEventArgs(decoding) {\n  let numberFormatter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n  const result = {};\n\n  for (let i = 0; i < decoding.arguments.length; i++) {\n    const {\n      name,\n      value\n    } = decoding.arguments[i];\n    const nativized = ethersCompatibleNativize(value, numberFormatter);\n    result[i] = nativized;\n\n    if (name) {\n      result[name] = nativized;\n    }\n  } //note: if you have an argument named __length__, what ethers\n  //actually does is... weird.  we're just going to do this instead,\n  //which is simpler and probably more useful, even if it's not strictly\n  //the same (I *seriously* doubt anyone was relying on the old behavior,\n  //because it's, uh, not very useful)\n\n\n  result.__length__ = decoding.arguments.length;\n  return result;\n}\n/**\n * Similar to [[ResultInspector]], but for a [[CalldataDecoding]].\n * See [[ResultInspector]] for more information.\n */\n\n\nclass CalldataDecodingInspector {\n  constructor(decoding) {\n    this.decoding = decoding;\n  }\n  /**\n   * @dev non-standard alternative interface name used by browser-util-inspect\n   *      package\n   */\n\n\n  inspect(depth, options) {\n    return this[util_1.default.inspect.custom].bind(this)(depth, options);\n  }\n\n  [util_1.default.inspect.custom](depth, options) {\n    switch (this.decoding.kind) {\n      case \"function\":\n        const fullName = `${this.decoding.class.typeName}.${this.decoding.abi.name}`;\n\n        if (this.decoding.interpretations.multicall) {\n          return formatMulticall(fullName, this.decoding.interpretations.multicall, options);\n        } else if (this.decoding.interpretations.aggregate) {\n          return formatAggregate(fullName, this.decoding.interpretations.aggregate, options);\n        } else if (this.decoding.interpretations.tryAggregate) {\n          const {\n            requireSuccess,\n            calls\n          } = this.decoding.interpretations.tryAggregate;\n          return formatAggregate(fullName, calls, options, \"requireSuccess\", options.stylize(requireSuccess.toString(), \"number\"));\n        } else if (this.decoding.interpretations.deadlinedMulticall) {\n          const {\n            deadline,\n            calls: decodings\n          } = this.decoding.interpretations.deadlinedMulticall;\n          return formatMulticall(fullName, decodings, options, \"deadline\", options.stylize(deadline.toString(), \"number\"));\n        } else if (this.decoding.interpretations.specifiedBlockhashMulticall) {\n          const {\n            specifiedBlockhash,\n            calls: decodings\n          } = this.decoding.interpretations.specifiedBlockhashMulticall;\n          return formatMulticall(fullName, decodings, options, \"previousBlockhash\", options.stylize(specifiedBlockhash, \"number\"));\n        }\n\n        return formatFunctionLike(fullName, this.decoding.arguments, options);\n\n      case \"constructor\":\n        return formatFunctionLike(`new ${this.decoding.class.typeName}`, this.decoding.arguments, options);\n\n      case \"message\":\n        const {\n          data,\n          abi\n        } = this.decoding; //we'll set up a value and inspect that :)\n\n        const codecValue = {\n          kind: \"value\",\n          type: {\n            typeClass: \"bytes\",\n            kind: \"dynamic\"\n          },\n          value: {\n            asHex: data\n          }\n        };\n\n        if (abi) {\n          return formatFunctionLike(`${this.decoding.class.typeName}.${abi.type}`, [{\n            value: codecValue\n          }], options, true // we don't need to see the type here!\n          );\n        } else {\n          return `Sent raw data to ${this.decoding.class.typeName}: ${util_1.default.inspect(new inspect_1.ResultInspector(codecValue), options)}`;\n        }\n\n      case \"unknown\":\n        return \"Receiving contract could not be identified.\";\n\n      case \"create\":\n        return \"Created contract could not be identified.\";\n    }\n  }\n\n}\n\nexports.CalldataDecodingInspector = CalldataDecodingInspector;\n\nfunction containsDeliberateReadError(result) {\n  switch (result.kind) {\n    case \"value\":\n      switch (result.type.typeClass) {\n        case \"struct\":\n          //this is currently only intended for use with storage variables, so I\n          //won't bother with handling tuple, magic, options\n          return result.value.some(_ref => {\n            let {\n              value\n            } = _ref;\n            return containsDeliberateReadError(value);\n          });\n\n        case \"array\":\n          return result.value.some(containsDeliberateReadError);\n\n        case \"mapping\":\n          return result.value.some(_ref2 => {\n            let {\n              value\n            } = _ref2;\n            return containsDeliberateReadError(value);\n          });\n\n        default:\n          return false;\n      }\n\n    case \"error\":\n      switch (result.error.kind) {\n        case \"StorageNotSuppliedError\":\n        case \"CodeNotSuppliedError\":\n          return true;\n\n        default:\n          return false;\n      }\n\n  }\n}\n\nexports.containsDeliberateReadError = containsDeliberateReadError;\n/**\n * Similar to [[ResultInspector]], but for a [[LogDecoding]].\n * See [[ResultInspector]] for more information.\n */\n\nclass LogDecodingInspector {\n  constructor(decoding) {\n    this.decoding = decoding;\n  }\n  /**\n   * @dev non-standard alternative interface name used by browser-util-inspect\n   *      package\n   */\n\n\n  inspect(depth, options) {\n    return this[util_1.default.inspect.custom].bind(this)(depth, options);\n  }\n\n  [util_1.default.inspect.custom](depth, options) {\n    const className = this.decoding.definedIn ? this.decoding.definedIn.typeName : this.decoding.class.typeName;\n    const eventName = this.decoding.abi.name;\n    const fullName = `${className}.${eventName}`;\n\n    switch (this.decoding.kind) {\n      case \"event\":\n        return formatFunctionLike(fullName, this.decoding.arguments, options);\n\n      case \"anonymous\":\n        return formatFunctionLike(`<anonymous> ${fullName}`, this.decoding.arguments, options);\n    }\n  }\n\n}\n\nexports.LogDecodingInspector = LogDecodingInspector;\n/**\n * Similar to [[ResultInspector]], but for a [[ReturndataDecoding]].\n * See [[ResultInspector]] for more information.\n */\n\nclass ReturndataDecodingInspector {\n  constructor(decoding) {\n    this.decoding = decoding;\n  }\n  /**\n   * @dev non-standard alternative interface name used by browser-util-inspect\n   *      package\n   */\n\n\n  inspect(depth, options) {\n    return this[util_1.default.inspect.custom].bind(this)(depth, options);\n  }\n\n  [util_1.default.inspect.custom](depth, options) {\n    switch (this.decoding.kind) {\n      case \"return\":\n        return formatFunctionLike(\"Returned values: \", this.decoding.arguments, options);\n\n      case \"returnmessage\":\n        const {\n          data\n        } = this.decoding; //we'll just set up a value and inspect that :)\n\n        const codecValue = {\n          kind: \"value\",\n          type: {\n            typeClass: \"bytes\",\n            kind: \"dynamic\"\n          },\n          value: {\n            asHex: data\n          }\n        };\n        const dataString = util_1.default.inspect(new inspect_1.ResultInspector(codecValue), options);\n        return `Returned raw data: ${dataString}`;\n\n      case \"selfdestruct\":\n        return \"The contract self-destructed.\";\n\n      case \"failure\":\n        return \"The transaction reverted without a message.\";\n\n      case \"revert\":\n        const name = this.decoding.definedIn ? `${this.decoding.definedIn.typeName}.${this.decoding.abi.name}` : this.decoding.abi.name;\n        return formatFunctionLike(`Error thrown:${os_1.default.EOL}${name}`, this.decoding.arguments, options);\n\n      case \"bytecode\":\n        //this one gets custom handling :P\n        const contractKind = this.decoding.class.contractKind || \"contract\";\n        const firstLine = this.decoding.address !== undefined ? `Returned bytecode for a ${contractKind} ${this.decoding.class.typeName} at ${this.decoding.address}.` : `Returned bytecode for a ${contractKind} ${this.decoding.class.typeName}.`;\n\n        if (this.decoding.immutables && this.decoding.immutables.length > 0) {\n          const prefixes = this.decoding.immutables.map(_ref3 => {\n            let {\n              name,\n              class: {\n                typeName\n              }\n            } = _ref3;\n            return `${typeName}.${name}: `;\n          });\n          const maxLength = Math.max(...prefixes.map(prefix => prefix.length));\n          const paddedPrefixes = prefixes.map(prefix => prefix.padStart(maxLength));\n          const formattedValues = this.decoding.immutables.map((value, index) => {\n            const prefix = paddedPrefixes[index];\n            const formatted = indentExcludingFirstLine(util_1.default.inspect(new inspect_1.ResultInspector(value.value), options), maxLength);\n            return prefix + formatted;\n          });\n          return `Immutable values:${os_1.default.EOL}${formattedValues.join(os_1.default.EOL)}`;\n        } else {\n          return firstLine;\n        }\n\n      case \"unknownbytecode\":\n        return \"Bytecode was returned, but it could not be identified.\";\n    }\n  }\n\n}\n\nexports.ReturndataDecodingInspector = ReturndataDecodingInspector; //copied from TestRunner, but simplified for our purposes :)\n\nfunction indentArray(input, indentation) {\n  return input.map(line => \" \".repeat(indentation) + line);\n}\n\nfunction indentExcludingFirstLine(input, indentation) {\n  const lines = input.split(/\\r?\\n/);\n  return [lines[0], ...indentArray(lines.slice(1), indentation)].join(os_1.default.EOL);\n}\n\nfunction indentMiddleLines(input, indentation) {\n  const lines = input.split(/\\r?\\n/);\n\n  if (lines.length < 2) {\n    return input;\n  }\n\n  return [lines[0], ...indentArray(lines.slice(1, -1), indentation), lines[lines.length - 1]].join(os_1.default.EOL);\n} //used for formatting things that look like function calls:\n//events (including anonymous events), identifiable transactions,\n//and revert messages\n//\"header\" param should include everything before the initial parenthesis\n\n/**\n * @hidden\n */\n\n\nfunction formatFunctionLike(header, values, options) {\n  let suppressType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let indent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;\n\n  if (values.length === 0) {\n    return `${header}()`;\n  }\n\n  let formattedValues = values.map((_ref4, index) => {\n    let {\n      name,\n      indexed,\n      value\n    } = _ref4;\n    const namePrefix = name ? `${name}: ` : \"\";\n    const indexedPrefix = indexed ? \"<indexed> \" : \"\";\n    const prefix = namePrefix + indexedPrefix;\n    const displayValue = util_1.default.inspect(new inspect_1.ResultInspector(value), options);\n    const typeString = suppressType ? \"\" : ` (type: ${Format.Types.typeStringWithoutLocation(value.type)})`;\n    return indentMiddleLines(prefix + displayValue + typeString + (index < values.length - 1 ? \",\" : \"\"), indent);\n  });\n  return indentMiddleLines(`${header}(${os_1.default.EOL}${formattedValues.join(os_1.default.EOL)}${os_1.default.EOL})`, indent);\n}\n\nexports.formatFunctionLike = formatFunctionLike;\n\nfunction formatMulticall(fullName, decodings, options, additionalParameterName, additionalParameterValue) {\n  if (decodings.length === 0) {\n    return `${fullName}()`;\n  }\n\n  const indent = 2;\n  let formattedDecodings = decodings.map((decoding, index) => {\n    const formattedDecoding = decoding === null ? \"<decoding error>\" : util_1.default.inspect(new CalldataDecodingInspector(decoding), options);\n    return formattedDecoding + (index < decodings.length - 1 ? \",\" : \"\");\n  });\n\n  if (additionalParameterName) {\n    formattedDecodings.unshift(`${additionalParameterName}: ${additionalParameterValue},`);\n  }\n\n  return indentMiddleLines(`${fullName}(${os_1.default.EOL}${formattedDecodings.join(os_1.default.EOL)}${os_1.default.EOL})`, indent);\n}\n\nfunction formatAggregate(fullName, calls, options, additionalParameterName, additionalParameterValue) {\n  if (calls.length === 0) {\n    return `${fullName}()`;\n  }\n\n  const indent = 2;\n  let formattedCalls = calls.map((_ref5, index) => {\n    let {\n      address,\n      decoding\n    } = _ref5;\n    const formattedCall = decoding === null ? \"<decoding error>\" : util_1.default.inspect(new CalldataDecodingInspector(decoding), options).replace(\".\", `(${options.stylize(address, \"number\")}).`); //HACK: splice in the address\n\n    return formattedCall + (index < calls.length - 1 ? \",\" : \"\");\n  });\n\n  if (additionalParameterName) {\n    formattedCalls.unshift(`${additionalParameterName}: ${additionalParameterValue},`);\n  }\n\n  return indentMiddleLines(`${fullName}(${os_1.default.EOL}${formattedCalls.join(os_1.default.EOL)}${os_1.default.EOL})`, indent);\n}","map":{"version":3,"mappings":"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","names":["debug","Object","enumerable","get","inspect_1","nativize","result","options","numberFormatter","x","format","ethersCompatibleNativize","exports","kind","error","raw","Conversion","toBigInt","rawAsBN","undefined","type","typeClass","asBN","value","numericAsBN","asBoolean","asHex","asAddress","address","coercedResult","asString","Buffer","from","slice","toString","map","nativized","pairs","name","nativizedValue","push","visibility","contract","toLowerCase","selector","nativizeReturn","decoding","ethersCompatibleNativizeReturn","arguments","length","i","nativizeEventArgs","ethersCompatibleNativizeEventArgs","__length__","CalldataDecodingInspector","constructor","inspect","depth","util_1","custom","bind","fullName","class","typeName","abi","interpretations","multicall","formatMulticall","aggregate","formatAggregate","tryAggregate","requireSuccess","calls","stylize","deadlinedMulticall","deadline","decodings","specifiedBlockhashMulticall","specifiedBlockhash","formatFunctionLike","data","codecValue","containsDeliberateReadError","some","LogDecodingInspector","className","definedIn","eventName","ReturndataDecodingInspector","dataString","os_1","EOL","contractKind","firstLine","immutables","prefixes","maxLength","Math","max","prefix","paddedPrefixes","padStart","formattedValues","index","formatted","indentExcludingFirstLine","join","indentArray","input","indentation","line","repeat","lines","split","indentMiddleLines","header","values","suppressType","indent","indexed","namePrefix","indexedPrefix","displayValue","typeString","Format","Types","typeStringWithoutLocation","additionalParameterName","additionalParameterValue","formattedDecodings","formattedDecoding","unshift","formattedCalls","formattedCall","replace"],"sourceRoot":"","sources":["../../lib/export.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}