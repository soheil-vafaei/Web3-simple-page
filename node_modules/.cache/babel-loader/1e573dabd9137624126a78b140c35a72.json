{"ast":null,"code":"import { asyncToStringMethod, hasAsyncToStringMethod, hasToStringMethod, toStringMethod } from '../../../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class CommandWrapper {\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.hasRan = false;\n\n    if (hasToStringMethod(cmd)) {\n      const method = cmd[toStringMethod];\n\n      this[toStringMethod] = function toStringMethod() {\n        return method.call(cmd);\n      };\n    }\n\n    if (hasAsyncToStringMethod(cmd)) {\n      const method = cmd[asyncToStringMethod];\n\n      this[asyncToStringMethod] = function asyncToStringMethod() {\n        return method.call(cmd);\n      };\n    }\n  }\n\n  check(m) {\n    return this.cmd.check(m);\n  }\n\n  run(m, r) {\n    this.hasRan = true;\n    return this.cmd.run(m, r);\n  }\n\n  clone() {\n    if (hasCloneMethod(this.cmd)) return new CommandWrapper(this.cmd[cloneMethod]());\n    return new CommandWrapper(this.cmd);\n  }\n\n  toString() {\n    return this.cmd.toString();\n  }\n\n}","map":{"version":3,"names":["asyncToStringMethod","hasAsyncToStringMethod","hasToStringMethod","toStringMethod","cloneMethod","hasCloneMethod","CommandWrapper","constructor","cmd","hasRan","method","call","check","m","run","r","clone","toString"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/fast-check/lib/esm/check/model/commands/CommandWrapper.js"],"sourcesContent":["import { asyncToStringMethod, hasAsyncToStringMethod, hasToStringMethod, toStringMethod, } from '../../../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class CommandWrapper {\n    constructor(cmd) {\n        this.cmd = cmd;\n        this.hasRan = false;\n        if (hasToStringMethod(cmd)) {\n            const method = cmd[toStringMethod];\n            this[toStringMethod] = function toStringMethod() {\n                return method.call(cmd);\n            };\n        }\n        if (hasAsyncToStringMethod(cmd)) {\n            const method = cmd[asyncToStringMethod];\n            this[asyncToStringMethod] = function asyncToStringMethod() {\n                return method.call(cmd);\n            };\n        }\n    }\n    check(m) {\n        return this.cmd.check(m);\n    }\n    run(m, r) {\n        this.hasRan = true;\n        return this.cmd.run(m, r);\n    }\n    clone() {\n        if (hasCloneMethod(this.cmd))\n            return new CommandWrapper(this.cmd[cloneMethod]());\n        return new CommandWrapper(this.cmd);\n    }\n    toString() {\n        return this.cmd.toString();\n    }\n}\n"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,sBAA9B,EAAsDC,iBAAtD,EAAyEC,cAAzE,QAAgG,6BAAhG;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,OAAO,MAAMC,cAAN,CAAqB;EACxBC,WAAW,CAACC,GAAD,EAAM;IACb,KAAKA,GAAL,GAAWA,GAAX;IACA,KAAKC,MAAL,GAAc,KAAd;;IACA,IAAIP,iBAAiB,CAACM,GAAD,CAArB,EAA4B;MACxB,MAAME,MAAM,GAAGF,GAAG,CAACL,cAAD,CAAlB;;MACA,KAAKA,cAAL,IAAuB,SAASA,cAAT,GAA0B;QAC7C,OAAOO,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAP;MACH,CAFD;IAGH;;IACD,IAAIP,sBAAsB,CAACO,GAAD,CAA1B,EAAiC;MAC7B,MAAME,MAAM,GAAGF,GAAG,CAACR,mBAAD,CAAlB;;MACA,KAAKA,mBAAL,IAA4B,SAASA,mBAAT,GAA+B;QACvD,OAAOU,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAP;MACH,CAFD;IAGH;EACJ;;EACDI,KAAK,CAACC,CAAD,EAAI;IACL,OAAO,KAAKL,GAAL,CAASI,KAAT,CAAeC,CAAf,CAAP;EACH;;EACDC,GAAG,CAACD,CAAD,EAAIE,CAAJ,EAAO;IACN,KAAKN,MAAL,GAAc,IAAd;IACA,OAAO,KAAKD,GAAL,CAASM,GAAT,CAAaD,CAAb,EAAgBE,CAAhB,CAAP;EACH;;EACDC,KAAK,GAAG;IACJ,IAAIX,cAAc,CAAC,KAAKG,GAAN,CAAlB,EACI,OAAO,IAAIF,cAAJ,CAAmB,KAAKE,GAAL,CAASJ,WAAT,GAAnB,CAAP;IACJ,OAAO,IAAIE,cAAJ,CAAmB,KAAKE,GAAxB,CAAP;EACH;;EACDS,QAAQ,GAAG;IACP,OAAO,KAAKT,GAAL,CAASS,QAAT,EAAP;EACH;;AA/BuB"},"metadata":{},"sourceType":"module"}