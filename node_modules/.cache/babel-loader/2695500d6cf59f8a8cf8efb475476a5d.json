{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\n\nvar externals_1 = require(\"./externals\");\n\nvar internal_1 = require(\"./internal\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\n\n\nvar intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \".concat(i));\n  }\n\n  return \"0x\".concat(i.toString(16));\n};\n\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\n\nvar intToBuffer = function (i) {\n  var hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\n\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\n\nvar zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\n\nvar setLength = function (msg, length, right) {\n  var buf = (0, exports.zeros)(length);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\n\nvar setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\n\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\n\nvar setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\n\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\n\nvar stripZeros = function (a) {\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\n\n\nvar unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\n\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\n\nvar unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\n\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\n\nvar unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return stripZeros(a);\n};\n\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\n\nvar toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n    }\n\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n\n  if (externals_1.BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(\"Cannot convert negative BN to buffer. Given: \".concat(v));\n    }\n\n    return v.toArrayLike(Buffer);\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n\n  throw new Error('invalid type');\n};\n\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\n\nvar bufferToInt = function (buf) {\n  return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();\n};\n\nexports.bufferToInt = bufferToInt;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\n\nvar bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\n\nexports.bufferToHex = bufferToHex;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\n\nvar fromSigned = function (num) {\n  return new externals_1.BN(num).fromTwos(256);\n};\n\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\n\nvar toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\n\nvar addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\n\nexports.addHexPrefix = addHexPrefix;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\n\nvar toUtf8 = function (hex) {\n  var zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n\n  var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\n\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\n\nvar baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return \"0x\".concat(ba.toString('hex'));\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n\n    return array;\n  }\n};\n\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\n\nvar validateNoLeadingZeroes = function (values) {\n  var e_1, _a;\n\n  try {\n    for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read(_c.value, 2),\n          k = _d[0],\n          v = _d[1];\n\n      if (v !== undefined && v.length > 0 && v[0] === 0) {\n        throw new Error(\"\".concat(k, \" cannot have leading zeroes, received: \").concat(v.toString('hex')));\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n};\n\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\n\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n\n  return arr.map(function (a) {\n    return arrToBufArr(a);\n  });\n}\n\nexports.arrToBufArr = arrToBufArr;\n\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);\n  }\n\n  return arr.map(function (a) {\n    return bufArrToArr(a);\n  });\n}\n\nexports.bufArrToArr = bufArrToArr;","map":{"version":3,"mappings":"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","names":["intToHex","i","Number","isSafeInteger","Error","toString","exports","intToBuffer","hex","Buffer","from","slice","zeros","bytes","allocUnsafe","fill","setLength","msg","length","right","buf","copy","setLengthLeft","setLengthRight","stripZeros","a","first","unpadBuffer","unpadArray","unpadHexString","toBuffer","v","undefined","isBuffer","Array","isArray","Uint8Array","externals_1","isBN","isNeg","toArrayLike","toArray","bufferToInt","toNumber","bufferToHex","fromSigned","num","fromTwos","toUnsigned","toTwos","addHexPrefix","str","toUtf8","zerosRegexp","bufferVal","replace","baToJSON","ba","array","push","validateNoLeadingZeroes","values","entries","_c","k","concat","arrToBufArr","arr","map","bufArrToArr"],"sourceRoot":"","sources":["../src/bytes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}