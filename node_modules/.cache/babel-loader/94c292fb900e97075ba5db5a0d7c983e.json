{"ast":null,"code":"export function natToStringifiedNatMapper(options) {\n  const [style, v] = options;\n\n  switch (style) {\n    case 'oct':\n      return `0${Number(v).toString(8)}`;\n\n    case 'hex':\n      return `0x${Number(v).toString(16)}`;\n\n    case 'dec':\n    default:\n      return `${v}`;\n  }\n}\nexport function tryParseStringifiedNat(stringValue, radix) {\n  const parsedNat = Number.parseInt(stringValue, radix);\n\n  if (parsedNat.toString(radix) !== stringValue) {\n    throw new Error('Invalid value');\n  }\n\n  return parsedNat;\n}\nexport function natToStringifiedNatUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Invalid type');\n  }\n\n  if (value.length >= 2 && value[0] === '0') {\n    if (value[1] === 'x') {\n      return ['hex', tryParseStringifiedNat(value.substr(2), 16)];\n    }\n\n    return ['oct', tryParseStringifiedNat(value.substr(1), 8)];\n  }\n\n  return ['dec', tryParseStringifiedNat(value, 10)];\n}","map":{"version":3,"names":["natToStringifiedNatMapper","options","style","v","Number","toString","tryParseStringifiedNat","stringValue","radix","parsedNat","parseInt","Error","natToStringifiedNatUnmapper","value","length","substr"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/arbitrary/_internals/mappers/NatToStringifiedNat.js"],"sourcesContent":["export function natToStringifiedNatMapper(options) {\n    const [style, v] = options;\n    switch (style) {\n        case 'oct':\n            return `0${Number(v).toString(8)}`;\n        case 'hex':\n            return `0x${Number(v).toString(16)}`;\n        case 'dec':\n        default:\n            return `${v}`;\n    }\n}\nexport function tryParseStringifiedNat(stringValue, radix) {\n    const parsedNat = Number.parseInt(stringValue, radix);\n    if (parsedNat.toString(radix) !== stringValue) {\n        throw new Error('Invalid value');\n    }\n    return parsedNat;\n}\nexport function natToStringifiedNatUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Invalid type');\n    }\n    if (value.length >= 2 && value[0] === '0') {\n        if (value[1] === 'x') {\n            return ['hex', tryParseStringifiedNat(value.substr(2), 16)];\n        }\n        return ['oct', tryParseStringifiedNat(value.substr(1), 8)];\n    }\n    return ['dec', tryParseStringifiedNat(value, 10)];\n}\n"],"mappings":"AAAA,OAAO,SAASA,yBAAT,CAAmCC,OAAnC,EAA4C;EAC/C,MAAM,CAACC,KAAD,EAAQC,CAAR,IAAaF,OAAnB;;EACA,QAAQC,KAAR;IACI,KAAK,KAAL;MACI,OAAQ,IAAGE,MAAM,CAACD,CAAD,CAAN,CAAUE,QAAV,CAAmB,CAAnB,CAAsB,EAAjC;;IACJ,KAAK,KAAL;MACI,OAAQ,KAAID,MAAM,CAACD,CAAD,CAAN,CAAUE,QAAV,CAAmB,EAAnB,CAAuB,EAAnC;;IACJ,KAAK,KAAL;IACA;MACI,OAAQ,GAAEF,CAAE,EAAZ;EAPR;AASH;AACD,OAAO,SAASG,sBAAT,CAAgCC,WAAhC,EAA6CC,KAA7C,EAAoD;EACvD,MAAMC,SAAS,GAAGL,MAAM,CAACM,QAAP,CAAgBH,WAAhB,EAA6BC,KAA7B,CAAlB;;EACA,IAAIC,SAAS,CAACJ,QAAV,CAAmBG,KAAnB,MAA8BD,WAAlC,EAA+C;IAC3C,MAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;EACH;;EACD,OAAOF,SAAP;AACH;AACD,OAAO,SAASG,2BAAT,CAAqCC,KAArC,EAA4C;EAC/C,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC3B,MAAM,IAAIF,KAAJ,CAAU,cAAV,CAAN;EACH;;EACD,IAAIE,KAAK,CAACC,MAAN,IAAgB,CAAhB,IAAqBD,KAAK,CAAC,CAAD,CAAL,KAAa,GAAtC,EAA2C;IACvC,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;MAClB,OAAO,CAAC,KAAD,EAAQP,sBAAsB,CAACO,KAAK,CAACE,MAAN,CAAa,CAAb,CAAD,EAAkB,EAAlB,CAA9B,CAAP;IACH;;IACD,OAAO,CAAC,KAAD,EAAQT,sBAAsB,CAACO,KAAK,CAACE,MAAN,CAAa,CAAb,CAAD,EAAkB,CAAlB,CAA9B,CAAP;EACH;;EACD,OAAO,CAAC,KAAD,EAAQT,sBAAsB,CAACO,KAAD,EAAQ,EAAR,CAA9B,CAAP;AACH"},"metadata":{},"sourceType":"module"}