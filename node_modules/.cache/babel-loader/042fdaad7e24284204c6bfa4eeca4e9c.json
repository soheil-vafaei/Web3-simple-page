{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nexport class TupleArbitrary extends Arbitrary {\n  constructor(arbs) {\n    super();\n    this.arbs = arbs;\n\n    for (let idx = 0; idx !== arbs.length; ++idx) {\n      const arb = arbs[idx];\n      if (arb == null || arb.generate == null) throw new Error(`Invalid parameter encountered at index ${idx}: expecting an Arbitrary`);\n    }\n  }\n\n  static makeItCloneable(vs, values) {\n    return Object.defineProperty(vs, cloneMethod, {\n      value: () => {\n        const cloned = [];\n\n        for (let idx = 0; idx !== values.length; ++idx) {\n          cloned.push(values[idx].value);\n        }\n\n        TupleArbitrary.makeItCloneable(cloned, values);\n        return cloned;\n      }\n    });\n  }\n\n  static wrapper(values) {\n    let cloneable = false;\n    const vs = [];\n    const ctxs = [];\n\n    for (let idx = 0; idx !== values.length; ++idx) {\n      const v = values[idx];\n      cloneable = cloneable || v.hasToBeCloned;\n      vs.push(v.value);\n      ctxs.push(v.context);\n    }\n\n    if (cloneable) {\n      TupleArbitrary.makeItCloneable(vs, values);\n    }\n\n    return new Value(vs, ctxs);\n  }\n\n  generate(mrng, biasFactor) {\n    return TupleArbitrary.wrapper(this.arbs.map(a => a.generate(mrng, biasFactor)));\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value) || value.length !== this.arbs.length) {\n      return false;\n    }\n\n    for (let index = 0; index !== this.arbs.length; ++index) {\n      if (!this.arbs[index].canShrinkWithoutContext(value[index])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  shrink(value, context) {\n    let s = Stream.nil();\n    const safeContext = Array.isArray(context) ? context : [];\n\n    for (let idx = 0; idx !== this.arbs.length; ++idx) {\n      const shrinksForIndex = this.arbs[idx].shrink(value[idx], safeContext[idx]).map(v => {\n        const nextValues = value.map((v, idx) => new Value(cloneIfNeeded(v), safeContext[idx]));\n        return nextValues.slice(0, idx).concat([v]).concat(nextValues.slice(idx + 1));\n      }).map(values => TupleArbitrary.wrapper(values));\n      s = s.join(shrinksForIndex);\n    }\n\n    return s;\n  }\n\n}","map":{"version":3,"names":["Stream","cloneIfNeeded","cloneMethod","Arbitrary","Value","TupleArbitrary","constructor","arbs","idx","length","arb","generate","Error","makeItCloneable","vs","values","Object","defineProperty","value","cloned","push","wrapper","cloneable","ctxs","v","hasToBeCloned","context","mrng","biasFactor","map","a","canShrinkWithoutContext","Array","isArray","index","shrink","s","nil","safeContext","shrinksForIndex","nextValues","slice","concat","join"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/arbitrary/_internals/TupleArbitrary.js"],"sourcesContent":["import { Stream } from '../../stream/Stream.js';\nimport { cloneIfNeeded, cloneMethod } from '../../check/symbols.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nexport class TupleArbitrary extends Arbitrary {\n    constructor(arbs) {\n        super();\n        this.arbs = arbs;\n        for (let idx = 0; idx !== arbs.length; ++idx) {\n            const arb = arbs[idx];\n            if (arb == null || arb.generate == null)\n                throw new Error(`Invalid parameter encountered at index ${idx}: expecting an Arbitrary`);\n        }\n    }\n    static makeItCloneable(vs, values) {\n        return Object.defineProperty(vs, cloneMethod, {\n            value: () => {\n                const cloned = [];\n                for (let idx = 0; idx !== values.length; ++idx) {\n                    cloned.push(values[idx].value);\n                }\n                TupleArbitrary.makeItCloneable(cloned, values);\n                return cloned;\n            },\n        });\n    }\n    static wrapper(values) {\n        let cloneable = false;\n        const vs = [];\n        const ctxs = [];\n        for (let idx = 0; idx !== values.length; ++idx) {\n            const v = values[idx];\n            cloneable = cloneable || v.hasToBeCloned;\n            vs.push(v.value);\n            ctxs.push(v.context);\n        }\n        if (cloneable) {\n            TupleArbitrary.makeItCloneable(vs, values);\n        }\n        return new Value(vs, ctxs);\n    }\n    generate(mrng, biasFactor) {\n        return TupleArbitrary.wrapper(this.arbs.map((a) => a.generate(mrng, biasFactor)));\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value) || value.length !== this.arbs.length) {\n            return false;\n        }\n        for (let index = 0; index !== this.arbs.length; ++index) {\n            if (!this.arbs[index].canShrinkWithoutContext(value[index])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    shrink(value, context) {\n        let s = Stream.nil();\n        const safeContext = Array.isArray(context) ? context : [];\n        for (let idx = 0; idx !== this.arbs.length; ++idx) {\n            const shrinksForIndex = this.arbs[idx]\n                .shrink(value[idx], safeContext[idx])\n                .map((v) => {\n                const nextValues = value.map((v, idx) => new Value(cloneIfNeeded(v), safeContext[idx]));\n                return nextValues\n                    .slice(0, idx)\n                    .concat([v])\n                    .concat(nextValues.slice(idx + 1));\n            })\n                .map((values) => TupleArbitrary.wrapper(values));\n            s = s.join(shrinksForIndex);\n        }\n        return s;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}