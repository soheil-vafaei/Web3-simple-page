{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readStackLiteral = exports.readStack = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:stack:read\");\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nconst errors_1 = require(\"../../errors\");\n\nfunction readStack(pointer, state) {\n  let {\n    from,\n    to\n  } = pointer;\n  let {\n    stack\n  } = state;\n\n  if (from < 0 || to >= stack.length) {\n    throw new errors_1.DecodingError({\n      kind: \"ReadErrorStack\",\n      from,\n      to\n    });\n  } //unforunately, Uint8Arrays don't support concat; if they did the rest of\n  //this would be one line.  Or similarly if they worked with lodash's flatten,\n  //but they don't support that either.  But neither of those are the case, so\n  //we'll have to concatenate a bit more manually.\n\n\n  let words = stack.slice(from, to + 1);\n  let result = new Uint8Array(words.length * Evm.Utils.WORD_SIZE); //shouldn't we total up the lengths? yeah, but each one should have a\n  //length of 32, so unless somehting's gone wrong we can just multiply\n\n  for (let index = 0; index < words.length; index++) {\n    result.set(words[index], index * Evm.Utils.WORD_SIZE);\n  }\n\n  return result;\n}\n\nexports.readStack = readStack;\n\nfunction readStackLiteral(pointer) {\n  return pointer.literal;\n}\n\nexports.readStackLiteral = readStackLiteral;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAMA,KAAK,GAAG,qBAAY,kBAAZ,CAAd;;AAEA;;AAEA;;AAEA,SAAgBC,SAAhB,CACEC,OADF,EAEEC,KAFF,EAEqB;EAEnB,IAAI;IAAEC,IAAF;IAAQC;EAAR,IAAeH,OAAnB;EACA,IAAI;IAAEI;EAAF,IAAYH,KAAhB;;EACA,IAAIC,IAAI,GAAG,CAAP,IAAYC,EAAE,IAAIC,KAAK,CAACC,MAA5B,EAAoC;IAClC,MAAM,IAAIC,sBAAJ,CAAkB;MACtBC,IAAI,EAAE,gBADgB;MAEtBL,IAFsB;MAGtBC;IAHsB,CAAlB,CAAN;EAKD,CAVkB,CAWnB;EACA;EACA;EACA;;;EACA,IAAIK,KAAK,GAAGJ,KAAK,CAACK,KAAN,CAAYP,IAAZ,EAAkBC,EAAE,GAAG,CAAvB,CAAZ;EACA,IAAIO,MAAM,GAAG,IAAIC,UAAJ,CAAeH,KAAK,CAACH,MAAN,GAAeO,GAAG,CAACC,KAAJ,CAAUC,SAAxC,CAAb,CAhBmB,CAiBnB;EACA;;EACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,KAAK,CAACH,MAAlC,EAA0CU,KAAK,EAA/C,EAAmD;IACjDL,MAAM,CAACM,GAAP,CAAWR,KAAK,CAACO,KAAD,CAAhB,EAAyBA,KAAK,GAAGH,GAAG,CAACC,KAAJ,CAAUC,SAA3C;EACD;;EACD,OAAOJ,MAAP;AACD;;AAzBDO;;AA2BA,SAAgBC,gBAAhB,CACElB,OADF,EACsC;EAEpC,OAAOA,OAAO,CAACmB,OAAf;AACD;;AAJDF","names":["debug","readStack","pointer","state","from","to","stack","length","errors_1","kind","words","slice","result","Uint8Array","Evm","Utils","WORD_SIZE","index","set","exports","readStackLiteral","literal"],"sourceRoot":"","sources":["../../../../lib/stack/read/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}