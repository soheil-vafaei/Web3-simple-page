{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkPaddingLeft = exports.decodeExternalFunction = exports.decodeContract = exports.decodeBasic = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:basic:decode\");\n\nconst read_1 = __importDefault(require(\"../../read\"));\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst Format = __importStar(require(\"../../format\"));\n\nconst Contexts = __importStar(require(\"../../contexts\"));\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nconst errors_1 = require(\"../../errors\");\n\nconst allocate_1 = require(\"../allocate\");\n\nfunction* decodeBasic(dataType, pointer, info) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const {\n    state\n  } = info;\n  const {\n    strictAbiMode: strict\n  } = options; //if this is undefined it'll still be falsy so it's OK\n\n  const paddingMode = options.paddingMode || \"default\";\n  let bytes;\n  let rawBytes;\n\n  try {\n    bytes = yield* (0, read_1.default)(pointer, state);\n  } catch (error) {\n    debug(\"segfault, pointer %o, state: %O\", pointer, state);\n    return (0, errors_1.handleDecodingError)(dataType, error, strict);\n  }\n\n  rawBytes = bytes;\n  debug(\"type %O\", dataType);\n  debug(\"pointer %o\", pointer);\n\n  switch (dataType.typeClass) {\n    case \"userDefinedValueType\":\n      {\n        const fullType = Format.Types.fullType(dataType, info.userDefinedTypes);\n\n        if (!fullType.underlyingType) {\n          const error = {\n            kind: \"UserDefinedTypeNotFoundError\",\n            type: fullType\n          };\n\n          if (strict || options.allowRetry) {\n            throw new errors_1.StopDecodingError(error, true); //note that we allow a retry if we couldn't locate the underlying type!\n          }\n\n          return {\n            type: fullType,\n            kind: \"error\",\n            error\n          };\n        }\n\n        const underlyingResult = yield* decodeBasic(fullType.underlyingType, pointer, info, options);\n\n        switch (underlyingResult.kind //yes this switch is a little unnecessary :P\n        ) {\n          case \"value\":\n            //wrap the value and return\n            return {\n              //no idea why need coercion here\n              type: fullType,\n              kind: \"value\",\n              value: underlyingResult\n            };\n\n          case \"error\":\n            //wrap the error and return an error result!\n            //this is inconsistent with how we handle other container types\n            //(structs, arrays, mappings), where having an error in one element\n            //does not cause an error in the whole thing, but to do that here\n            //would cause problems for the type system :-/\n            //so we'll just be inconsistent\n            return {\n              //TS is being bad again :-/\n              type: fullType,\n              kind: \"error\",\n              error: {\n                kind: \"WrappedError\",\n                error: underlyingResult\n              }\n            };\n        }\n\n        break; //to satisfy TS :P\n      }\n\n    case \"bool\":\n      {\n        if (!checkPadding(bytes, dataType, paddingMode)) {\n          let error = {\n            kind: \"BoolPaddingError\",\n            paddingType: getPaddingType(dataType, paddingMode),\n            raw: Conversion.toHexString(bytes)\n          };\n\n          if (strict) {\n            throw new errors_1.StopDecodingError(error);\n          }\n\n          return {\n            type: dataType,\n            kind: \"error\",\n            error\n          };\n        }\n\n        bytes = removePadding(bytes, dataType, paddingMode); //note: the use of the BN is a little silly here,\n        //but, kind of stuck with it for now\n\n        const numeric = Conversion.toBN(bytes);\n\n        if (numeric.eqn(0)) {\n          return {\n            type: dataType,\n            kind: \"value\",\n            value: {\n              asBoolean: false\n            }\n          };\n        } else if (numeric.eqn(1)) {\n          return {\n            type: dataType,\n            kind: \"value\",\n            value: {\n              asBoolean: true\n            }\n          };\n        } else {\n          let error = {\n            kind: \"BoolOutOfRangeError\",\n            rawAsBN: numeric\n          };\n\n          if (strict) {\n            throw new errors_1.StopDecodingError(error);\n          }\n\n          return {\n            type: dataType,\n            kind: \"error\",\n            error\n          };\n        }\n      }\n\n    case \"uint\":\n      //first, check padding (if needed)\n      if (!checkPadding(bytes, dataType, paddingMode)) {\n        let error = {\n          kind: \"UintPaddingError\",\n          paddingType: getPaddingType(dataType, paddingMode),\n          raw: Conversion.toHexString(bytes)\n        };\n\n        if (strict) {\n          throw new errors_1.StopDecodingError(error);\n        }\n\n        return {\n          type: dataType,\n          kind: \"error\",\n          error\n        };\n      } //now, truncate to appropriate length\n\n\n      bytes = removePadding(bytes, dataType, paddingMode);\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asBN: Conversion.toBN(bytes),\n          rawAsBN: Conversion.toBN(rawBytes)\n        }\n      };\n\n    case \"int\":\n      //first, check padding (if needed)\n      if (!checkPadding(bytes, dataType, paddingMode)) {\n        let error = {\n          kind: \"IntPaddingError\",\n          paddingType: getPaddingType(dataType, paddingMode),\n          raw: Conversion.toHexString(bytes)\n        };\n\n        if (strict) {\n          throw new errors_1.StopDecodingError(error);\n        }\n\n        return {\n          type: dataType,\n          kind: \"error\",\n          error\n        };\n      } //now, truncate to appropriate length (keeping the bytes on the right)\n\n\n      bytes = removePadding(bytes, dataType, paddingMode);\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asBN: Conversion.toSignedBN(bytes),\n          rawAsBN: Conversion.toSignedBN(rawBytes)\n        }\n      };\n\n    case \"address\":\n      if (!checkPadding(bytes, dataType, paddingMode)) {\n        let error = {\n          kind: \"AddressPaddingError\",\n          paddingType: getPaddingType(dataType, paddingMode),\n          raw: Conversion.toHexString(bytes)\n        };\n\n        if (strict) {\n          throw new errors_1.StopDecodingError(error);\n        }\n\n        return {\n          type: dataType,\n          kind: \"error\",\n          error\n        };\n      }\n\n      bytes = removePadding(bytes, dataType, paddingMode);\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asAddress: Evm.Utils.toAddress(bytes),\n          rawAsHex: Conversion.toHexString(rawBytes)\n        }\n      };\n\n    case \"contract\":\n      if (!checkPadding(bytes, dataType, paddingMode)) {\n        let error = {\n          kind: \"ContractPaddingError\",\n          paddingType: getPaddingType(dataType, paddingMode),\n          raw: Conversion.toHexString(bytes)\n        };\n\n        if (strict) {\n          throw new errors_1.StopDecodingError(error);\n        }\n\n        return {\n          type: dataType,\n          kind: \"error\",\n          error\n        };\n      }\n\n      bytes = removePadding(bytes, dataType, paddingMode);\n      const fullType = Format.Types.fullType(dataType, info.userDefinedTypes);\n      const contractValueInfo = yield* decodeContract(bytes, info);\n      return {\n        type: fullType,\n        kind: \"value\",\n        value: contractValueInfo\n      };\n\n    case \"bytes\":\n      //NOTE: we assume this is a *static* bytestring,\n      //because this is decodeBasic! dynamic ones should\n      //go to decodeBytes!\n      let coercedDataType = dataType; //first, check padding (if needed)\n\n      if (!checkPadding(bytes, dataType, paddingMode)) {\n        let error = {\n          kind: \"BytesPaddingError\",\n          paddingType: getPaddingType(dataType, paddingMode),\n          raw: Conversion.toHexString(bytes)\n        };\n\n        if (strict) {\n          throw new errors_1.StopDecodingError(error);\n        }\n\n        return {\n          type: coercedDataType,\n          kind: \"error\",\n          error\n        };\n      } //now, truncate to appropriate length\n\n\n      bytes = removePadding(bytes, dataType, paddingMode);\n      return {\n        type: coercedDataType,\n        kind: \"value\",\n        value: {\n          asHex: Conversion.toHexString(bytes),\n          rawAsHex: Conversion.toHexString(rawBytes)\n        }\n      };\n\n    case \"function\":\n      switch (dataType.visibility) {\n        case \"external\":\n          if (!checkPadding(bytes, dataType, paddingMode)) {\n            const error = {\n              kind: \"FunctionExternalNonStackPaddingError\",\n              paddingType: getPaddingType(dataType, paddingMode),\n              raw: Conversion.toHexString(bytes)\n            };\n\n            if (strict) {\n              throw new errors_1.StopDecodingError(error);\n            }\n\n            return {\n              type: dataType,\n              kind: \"error\",\n              error\n            };\n          }\n\n          bytes = removePadding(bytes, dataType, paddingMode);\n          const address = bytes.slice(0, Evm.Utils.ADDRESS_SIZE);\n          const selector = bytes.slice(Evm.Utils.ADDRESS_SIZE, Evm.Utils.ADDRESS_SIZE + Evm.Utils.SELECTOR_SIZE);\n          return {\n            type: dataType,\n            kind: \"value\",\n            value: yield* decodeExternalFunction(address, selector, info)\n          };\n\n        case \"internal\":\n          //note: we used to error if we hit this point with strict === true,\n          //since internal function pointers don't go in the ABI, and strict\n          //mode is intended for ABI decoding.  however, there are times when\n          //we want to use strict mode to decode immutables, and immutables can\n          //include internal function pointers.  so now we allow this.  yes,\n          //this is a bit of an abuse of strict mode, which was after all meant\n          //for ABI decoding, but oh well.\n          if (!checkPadding(bytes, dataType, paddingMode)) {\n            const error = {\n              kind: \"FunctionInternalPaddingError\",\n              paddingType: getPaddingType(dataType, paddingMode),\n              raw: Conversion.toHexString(bytes)\n            };\n\n            if (strict) {\n              throw new errors_1.StopDecodingError(error);\n            }\n\n            return {\n              type: dataType,\n              kind: \"error\",\n              error\n            };\n          }\n\n          bytes = removePadding(bytes, dataType, paddingMode);\n          const deployedPc = bytes.slice(-Evm.Utils.PC_SIZE);\n          const constructorPc = bytes.slice(-Evm.Utils.PC_SIZE * 2, -Evm.Utils.PC_SIZE);\n          return decodeInternalFunction(dataType, deployedPc, constructorPc, info, strict);\n      }\n\n      break;\n    //to satisfy TypeScript\n\n    case \"enum\":\n      {\n        let numeric = Conversion.toBN(bytes);\n        const fullType = Format.Types.fullType(dataType, info.userDefinedTypes);\n\n        if (!fullType.options) {\n          let error = {\n            kind: \"EnumNotFoundDecodingError\",\n            type: fullType,\n            rawAsBN: numeric\n          };\n\n          if (strict || options.allowRetry) {\n            throw new errors_1.StopDecodingError(error, true); //note that we allow a retry if we couldn't locate the enum type!\n          }\n\n          return {\n            type: fullType,\n            kind: \"error\",\n            error\n          };\n        } //note: I'm doing the padding checks a little more manually on this one\n        //so that we can have the right type of error\n\n\n        const numOptions = fullType.options.length;\n        const numBytes = Math.ceil(Math.log2(numOptions) / 8);\n        const paddingType = getPaddingType(dataType, paddingMode);\n\n        if (!checkPaddingDirect(bytes, numBytes, paddingType)) {\n          let error = {\n            kind: \"EnumPaddingError\",\n            type: fullType,\n            paddingType,\n            raw: Conversion.toHexString(bytes)\n          };\n\n          if (strict) {\n            throw new errors_1.StopDecodingError(error);\n          }\n\n          return {\n            type: dataType,\n            kind: \"error\",\n            error\n          };\n        }\n\n        bytes = removePaddingDirect(bytes, numBytes, paddingType);\n        numeric = Conversion.toBN(bytes); //alter numeric!\n\n        if (numeric.ltn(numOptions)) {\n          const name = fullType.options[numeric.toNumber()]; //NOTE: despite the use of toNumber(), I'm NOT catching exceptions here and returning an\n          //error value like elsewhere; I'm just letting this one fail.  Why?  Because if we have\n          //an enum with that many options in the first place, we have bigger problems!\n\n          return {\n            type: fullType,\n            kind: \"value\",\n            value: {\n              name,\n              numericAsBN: numeric\n            }\n          };\n        } else {\n          let error = {\n            kind: \"EnumOutOfRangeError\",\n            type: fullType,\n            rawAsBN: numeric\n          };\n\n          if (strict) {\n            //note:\n            //if the enum is merely out of range rather than out of the ABI range,\n            //we do NOT throw an error here!  instead we simply return an error value,\n            //which we normally avoid doing in strict mode.  (the error will be caught\n            //later at the re-encoding step instead.)  why?  because we might be running\n            //in ABI mode, so we may need to abify this \"value\" rather than just throwing\n            //it out.\n            throw new errors_1.StopDecodingError(error); //note that we do NOT allow a retry here!\n            //if we *can* find the enum type but the value is out of range,\n            //we *know* that it is invalid!\n          }\n\n          return {\n            type: fullType,\n            kind: \"error\",\n            error\n          };\n        }\n      }\n\n    case \"fixed\":\n      {\n        //first, check padding (if needed)\n        if (!checkPadding(bytes, dataType, paddingMode)) {\n          let error = {\n            kind: \"FixedPaddingError\",\n            paddingType: getPaddingType(dataType, paddingMode),\n            raw: Conversion.toHexString(bytes)\n          };\n\n          if (strict) {\n            throw new errors_1.StopDecodingError(error);\n          }\n\n          return {\n            type: dataType,\n            kind: \"error\",\n            error\n          };\n        } //now, truncate to appropriate length (keeping the bytes on the right)\n\n\n        bytes = removePadding(bytes, dataType, paddingMode);\n        let asBN = Conversion.toSignedBN(bytes);\n        let rawAsBN = Conversion.toSignedBN(rawBytes);\n        let asBig = Conversion.shiftBigDown(Conversion.toBig(asBN), dataType.places);\n        let rawAsBig = Conversion.shiftBigDown(Conversion.toBig(rawAsBN), dataType.places);\n        return {\n          type: dataType,\n          kind: \"value\",\n          value: {\n            asBig,\n            rawAsBig\n          }\n        };\n      }\n\n    case \"ufixed\":\n      {\n        //first, check padding (if needed)\n        if (!checkPadding(bytes, dataType, paddingMode)) {\n          let error = {\n            kind: \"UfixedPaddingError\",\n            paddingType: getPaddingType(dataType, paddingMode),\n            raw: Conversion.toHexString(bytes)\n          };\n\n          if (strict) {\n            throw new errors_1.StopDecodingError(error);\n          }\n\n          return {\n            type: dataType,\n            kind: \"error\",\n            error\n          };\n        } //now, truncate to appropriate length (keeping the bytes on the right)\n\n\n        bytes = removePadding(bytes, dataType, paddingMode);\n        let asBN = Conversion.toBN(bytes);\n        let rawAsBN = Conversion.toBN(rawBytes);\n        let asBig = Conversion.shiftBigDown(Conversion.toBig(asBN), dataType.places);\n        let rawAsBig = Conversion.shiftBigDown(Conversion.toBig(rawAsBN), dataType.places);\n        return {\n          type: dataType,\n          kind: \"value\",\n          value: {\n            asBig,\n            rawAsBig\n          }\n        };\n      }\n  }\n}\n\nexports.decodeBasic = decodeBasic; //NOTE that this function returns a ContractValueInfo, not a ContractResult\n\nfunction* decodeContract(addressBytes, info) {\n  return (yield* decodeContractAndContext(addressBytes, info)).contractInfo;\n}\n\nexports.decodeContract = decodeContract;\n\nfunction* decodeContractAndContext(addressBytes, info) {\n  let address = Evm.Utils.toAddress(addressBytes);\n  let rawAddress = Conversion.toHexString(addressBytes);\n  let codeBytes = yield {\n    type: \"code\",\n    address\n  };\n  let code = Conversion.toHexString(codeBytes);\n  let context = Contexts.Utils.findContext(info.contexts, code);\n\n  if (context !== null) {\n    return {\n      context,\n      contractInfo: {\n        kind: \"known\",\n        address,\n        rawAddress,\n        class: Contexts.Import.contextToType(context)\n      }\n    };\n  } else {\n    return {\n      context,\n      contractInfo: {\n        kind: \"unknown\",\n        address,\n        rawAddress\n      }\n    };\n  }\n} //note: address can have extra zeroes on the left like elsewhere, but selector should be exactly 4 bytes\n//NOTE this again returns a FunctionExternalValueInfo, not a FunctionExternalResult\n\n\nfunction* decodeExternalFunction(addressBytes, selectorBytes, info) {\n  let {\n    contractInfo: contract,\n    context\n  } = yield* decodeContractAndContext(addressBytes, info);\n  let selector = Conversion.toHexString(selectorBytes);\n\n  if (contract.kind === \"unknown\") {\n    return {\n      kind: \"unknown\",\n      contract,\n      selector\n    };\n  }\n\n  let abiEntry = context.abi !== undefined ? context.abi[selector] : undefined;\n\n  if (abiEntry === undefined) {\n    return {\n      kind: \"invalid\",\n      contract,\n      selector\n    };\n  }\n\n  return {\n    kind: \"known\",\n    contract,\n    selector,\n    abi: abiEntry\n  };\n}\n\nexports.decodeExternalFunction = decodeExternalFunction; //this one works a bit differently -- in order to handle errors, it *does* return a FunctionInternalResult\n\nfunction decodeInternalFunction(dataType, deployedPcBytes, constructorPcBytes, info, strict) {\n  const deployedPc = Conversion.toBN(deployedPcBytes).toNumber();\n  const constructorPc = Conversion.toBN(constructorPcBytes).toNumber();\n  const context = Contexts.Import.contextToType(info.currentContext); //before anything else: do we even have an internal functions table?\n  //if not, we'll just return the info we have without really attemting to decode\n\n  if (!info.internalFunctionsTable) {\n    return {\n      type: dataType,\n      kind: \"value\",\n      value: {\n        kind: \"unknown\",\n        context,\n        deployedProgramCounter: deployedPc,\n        constructorProgramCounter: constructorPc\n      }\n    };\n  } //also before we continue: is the PC zero? if so let's just return that\n\n\n  if (deployedPc === 0 && constructorPc === 0) {\n    return {\n      type: dataType,\n      kind: \"value\",\n      value: {\n        kind: \"exception\",\n        context,\n        deployedProgramCounter: deployedPc,\n        constructorProgramCounter: constructorPc\n      }\n    };\n  } //another check: is only the deployed PC zero?\n\n\n  if (deployedPc === 0 && constructorPc !== 0) {\n    const error = {\n      kind: \"MalformedInternalFunctionError\",\n      context,\n      deployedProgramCounter: 0,\n      constructorProgramCounter: constructorPc\n    };\n\n    if (strict) {\n      throw new errors_1.StopDecodingError(error);\n    }\n\n    return {\n      type: dataType,\n      kind: \"error\",\n      error\n    };\n  } //one last pre-check: is this a deployed-format pointer in a constructor?\n\n\n  if (info.currentContext.isConstructor && constructorPc === 0) {\n    const error = {\n      kind: \"DeployedFunctionInConstructorError\",\n      context,\n      deployedProgramCounter: deployedPc,\n      constructorProgramCounter: 0\n    };\n\n    if (strict) {\n      throw new errors_1.StopDecodingError(error);\n    }\n\n    return {\n      type: dataType,\n      kind: \"error\",\n      error\n    };\n  } //otherwise, we get our function\n\n\n  const pc = info.currentContext.isConstructor ? constructorPc : deployedPc;\n  const functionEntry = info.internalFunctionsTable[pc];\n\n  if (!functionEntry) {\n    //if it's not zero and there's no entry... error!\n    const error = {\n      kind: \"NoSuchInternalFunctionError\",\n      context,\n      deployedProgramCounter: deployedPc,\n      constructorProgramCounter: constructorPc\n    };\n\n    if (strict) {\n      throw new errors_1.StopDecodingError(error);\n    }\n\n    return {\n      type: dataType,\n      kind: \"error\",\n      error\n    };\n  }\n\n  if (functionEntry.isDesignatedInvalid) {\n    return {\n      type: dataType,\n      kind: \"value\",\n      value: {\n        kind: \"exception\",\n        context,\n        deployedProgramCounter: deployedPc,\n        constructorProgramCounter: constructorPc\n      }\n    };\n  }\n\n  const name = functionEntry.name;\n  const mutability = functionEntry.mutability;\n  const definedIn = Evm.Import.functionTableEntryToType(functionEntry); //may be null\n\n  const id = Evm.Import.makeInternalFunctionId(functionEntry);\n  return {\n    type: dataType,\n    kind: \"value\",\n    value: {\n      kind: \"function\",\n      context,\n      deployedProgramCounter: deployedPc,\n      constructorProgramCounter: constructorPc,\n      name,\n      id,\n      definedIn,\n      mutability\n    }\n  };\n}\n\nfunction checkPadding(bytes, dataType, paddingMode, userDefinedTypes) {\n  const length = (0, allocate_1.byteLength)(dataType, userDefinedTypes);\n  const paddingType = getPaddingType(dataType, paddingMode);\n\n  if (paddingMode === \"permissive\") {\n    switch (dataType.typeClass) {\n      case \"bool\":\n      case \"enum\":\n      case \"function\":\n        //these three types are checked even in permissive mode\n        return checkPaddingDirect(bytes, length, paddingType);\n\n      default:\n        return true;\n    }\n  } else {\n    return checkPaddingDirect(bytes, length, paddingType);\n  }\n}\n\nfunction removePadding(bytes, dataType, paddingMode, userDefinedTypes) {\n  const length = (0, allocate_1.byteLength)(dataType, userDefinedTypes);\n  const paddingType = getPaddingType(dataType, paddingMode);\n  return removePaddingDirect(bytes, length, paddingType);\n}\n\nfunction removePaddingDirect(bytes, length, paddingType) {\n  switch (paddingType) {\n    case \"right\":\n      return bytes.slice(0, length);\n\n    default:\n      return bytes.slice(-length);\n  }\n}\n\nfunction checkPaddingDirect(bytes, length, paddingType) {\n  switch (paddingType) {\n    case \"left\":\n      return checkPaddingLeft(bytes, length);\n\n    case \"right\":\n      return checkPaddingRight(bytes, length);\n\n    case \"signed\":\n      return checkPaddingSigned(bytes, length);\n\n    case \"signedOrLeft\":\n      return checkPaddingSigned(bytes, length) || checkPaddingLeft(bytes, length);\n  }\n}\n\nfunction getPaddingType(dataType, paddingMode) {\n  switch (paddingMode) {\n    case \"right\":\n      return \"right\";\n\n    case \"default\":\n    case \"permissive\":\n      return defaultPaddingType(dataType);\n\n    case \"zero\":\n      {\n        const defaultType = defaultPaddingType(dataType);\n        return defaultType === \"signed\" ? \"left\" : defaultType;\n      }\n\n    case \"defaultOrZero\":\n      {\n        const defaultType = defaultPaddingType(dataType);\n        return defaultType === \"signed\" ? \"signedOrLeft\" : defaultType;\n      }\n  }\n}\n\nfunction defaultPaddingType(dataType) {\n  switch (dataType.typeClass) {\n    case \"bytes\":\n      return \"right\";\n\n    case \"int\":\n    case \"fixed\":\n      return \"signed\";\n\n    case \"function\":\n      if (dataType.visibility === \"external\") {\n        return \"right\";\n      }\n\n    //otherwise, fall through to default\n\n    default:\n      return \"left\";\n  }\n}\n\nfunction checkPaddingRight(bytes, length) {\n  let padding = bytes.slice(length); //cut off the first length bytes\n\n  return padding.every(paddingByte => paddingByte === 0);\n} //exporting this one for use in stack.ts\n\n\nfunction checkPaddingLeft(bytes, length) {\n  let padding = bytes.slice(0, -length); //cut off the last length bytes\n\n  return padding.every(paddingByte => paddingByte === 0);\n}\n\nexports.checkPaddingLeft = checkPaddingLeft;\n\nfunction checkPaddingSigned(bytes, length) {\n  let padding = bytes.slice(0, -length); //padding is all but the last length bytes\n\n  let value = bytes.slice(-length); //meanwhile the actual value is those last length bytes\n\n  let signByte = value[0] & 0x80 ? 0xff : 0x00;\n  return padding.every(paddingByte => paddingByte === signByte);\n}","map":{"version":3,"mappings":"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","names":["debug","decodeBasic","dataType","pointer","info","options","state","strictAbiMode","strict","paddingMode","bytes","rawBytes","error","typeClass","fullType","Format","Types","userDefinedTypes","underlyingType","kind","type","allowRetry","errors_1","underlyingResult","value","checkPadding","paddingType","getPaddingType","raw","Conversion","toHexString","removePadding","numeric","toBN","eqn","asBoolean","rawAsBN","asBN","toSignedBN","asAddress","Evm","Utils","toAddress","rawAsHex","contractValueInfo","decodeContract","coercedDataType","asHex","visibility","address","slice","ADDRESS_SIZE","selector","SELECTOR_SIZE","decodeExternalFunction","deployedPc","PC_SIZE","constructorPc","decodeInternalFunction","numOptions","length","numBytes","Math","ceil","log2","checkPaddingDirect","removePaddingDirect","ltn","name","toNumber","numericAsBN","asBig","shiftBigDown","toBig","places","rawAsBig","exports","addressBytes","decodeContractAndContext","contractInfo","rawAddress","codeBytes","code","context","Contexts","findContext","contexts","class","Import","contextToType","selectorBytes","contract","abiEntry","abi","undefined","deployedPcBytes","constructorPcBytes","currentContext","internalFunctionsTable","deployedProgramCounter","constructorProgramCounter","isConstructor","pc","functionEntry","isDesignatedInvalid","mutability","definedIn","functionTableEntryToType","id","makeInternalFunctionId","checkPaddingLeft","checkPaddingRight","checkPaddingSigned","defaultPaddingType","defaultType","padding","every","paddingByte","signByte"],"sourceRoot":"","sources":["../../../../lib/basic/decode/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}