{"ast":null,"code":"'use strict';\n\nconst encoder = require('./encoder');\n\nconst decoder = require('./decoder');\n\nconst constants = require('./constants');\n\nconst MT = constants.MT;\n/**\n * Wrapper around a JavaScript Map object that allows the keys to be\n * any complex type.  The base Map object allows this, but will only\n * compare the keys by identity, not by value.  CborMap translates keys\n * to CBOR first (and base64's them to ensure by-value comparison).\n *\n * This is not a subclass of Object, because it would be tough to get\n * the semantics to be an exact match.\n *\n * @class CborMap\n * @extends {Map}\n */\n\nclass CborMap extends Map {\n  /**\n   * Creates an instance of CborMap.\n   * @param {Iterable<any, any>} [iterable] An Array or other iterable\n   *   object whose elements are key-value pairs (arrays with two elements, e.g.\n   *   <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>). Each key-value pair is added\n   *   to the new CborMap; null values are treated as undefined.\n   */\n  constructor(iterable) {\n    super(iterable);\n  }\n  /**\n   * @private\n   */\n\n\n  static _encode(key) {\n    return encoder.encodeCanonical(key).toString('base64');\n  }\n  /**\n   * @private\n   */\n\n\n  static _decode(key) {\n    return decoder.decodeFirstSync(key, 'base64');\n  }\n  /**\n   * Retrieve a specified element.\n   *\n   * @param {any} key The key identifying the element to retrieve.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @returns {any} The element if it exists, or <code>undefined</code>.\n   */\n\n\n  get(key) {\n    return super.get(CborMap._encode(key));\n  }\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {any} key The key identifying the element to store.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @param {any} val The element to store\n   */\n\n\n  set(key, val) {\n    return super.set(CborMap._encode(key), val);\n  }\n  /**\n   * Removes the specified element.\n   *\n   * @param {any} key The key identifying the element to delete.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @returns {boolean}\n   */\n\n\n  delete(key) {\n    return super.delete(CborMap._encode(key));\n  }\n  /**\n   * Does an element with the specified key exist?\n   *\n   * @param {any} key The key identifying the element to check.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @returns {boolean}\n   */\n\n\n  has(key) {\n    return super.has(CborMap._encode(key));\n  }\n  /**\n   * Returns a new Iterator object that contains the keys for each element\n   * in the Map object in insertion order.  The keys are decoded into their\n   * original format.\n   *\n   * @returns {IterableIterator<any>}\n   */\n\n\n  *keys() {\n    for (const k of super.keys()) {\n      yield CborMap._decode(k);\n    }\n  }\n  /**\n   * Returns a new Iterator object that contains the [key, value] pairs for\n   * each element in the Map object in insertion order.\n   *\n   * @returns {IterableIterator}\n   */\n\n\n  *entries() {\n    for (const kv of super.entries()) {\n      yield [CborMap._decode(kv[0]), kv[1]];\n    }\n  }\n  /**\n   * Returns a new Iterator object that contains the [key, value] pairs for\n   * each element in the Map object in insertion order.\n   *\n   * @returns {IterableIterator}\n   */\n\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n  /**\n   * Executes a provided function once per each key/value pair in the Map\n   * object, in insertion order.\n   *\n   * @param {function(any, any, Map): undefined} fun Function to execute for\n   *  each element, which takes a value, a key, and the Map being traversed.\n   * @param {any} thisArg Value to use as this when executing callback\n   */\n\n\n  forEach(fun, thisArg) {\n    if (typeof fun !== 'function') {\n      throw new TypeError('Must be function');\n    }\n\n    for (const kv of super.entries()) {\n      fun.call(this, kv[1], CborMap._decode(kv[0]), this);\n    }\n  }\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {Object} gen The generator to push onto\n   * @returns {boolean} true on success\n   */\n\n\n  encodeCBOR(gen) {\n    if (!gen._pushInt(this.size, MT.MAP)) {\n      return false;\n    }\n\n    if (gen.canonical) {\n      const entries = Array.from(super.entries()).map(kv => [Buffer.from(kv[0], 'base64'), kv[1]]);\n      entries.sort((a, b) => a[0].compare(b[0]));\n\n      for (const kv of entries) {\n        if (!(gen.push(kv[0]) && gen.pushAny(kv[1]))) {\n          return false;\n        }\n      }\n    } else {\n      for (const kv of super.entries()) {\n        if (!(gen.push(Buffer.from(kv[0], 'base64')) && gen.pushAny(kv[1]))) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n}\n\nmodule.exports = CborMap;","map":{"version":3,"names":["encoder","require","decoder","constants","MT","CborMap","Map","constructor","iterable","_encode","key","encodeCanonical","toString","_decode","decodeFirstSync","get","set","val","delete","has","keys","k","entries","kv","Symbol","iterator","forEach","fun","thisArg","TypeError","call","encodeCBOR","gen","_pushInt","size","MAP","canonical","Array","from","map","Buffer","sort","a","b","compare","push","pushAny","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/cbor/lib/map.js"],"sourcesContent":["'use strict'\n\nconst encoder = require('./encoder')\nconst decoder = require('./decoder')\nconst constants = require('./constants')\nconst MT = constants.MT\n\n/**\n * Wrapper around a JavaScript Map object that allows the keys to be\n * any complex type.  The base Map object allows this, but will only\n * compare the keys by identity, not by value.  CborMap translates keys\n * to CBOR first (and base64's them to ensure by-value comparison).\n *\n * This is not a subclass of Object, because it would be tough to get\n * the semantics to be an exact match.\n *\n * @class CborMap\n * @extends {Map}\n */\nclass CborMap extends Map {\n  /**\n   * Creates an instance of CborMap.\n   * @param {Iterable<any, any>} [iterable] An Array or other iterable\n   *   object whose elements are key-value pairs (arrays with two elements, e.g.\n   *   <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>). Each key-value pair is added\n   *   to the new CborMap; null values are treated as undefined.\n   */\n  constructor(iterable) {\n    super(iterable)\n  }\n\n  /**\n   * @private\n   */\n  static _encode(key) {\n    return encoder.encodeCanonical(key).toString('base64')\n  }\n\n  /**\n   * @private\n   */\n  static _decode(key) {\n    return decoder.decodeFirstSync(key, 'base64')\n  }\n\n  /**\n   * Retrieve a specified element.\n   *\n   * @param {any} key The key identifying the element to retrieve.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @returns {any} The element if it exists, or <code>undefined</code>.\n   */\n  get(key) {\n    return super.get(CborMap._encode(key))\n  }\n\n  /**\n   * Adds or updates an element with a specified key and value.\n   *\n   * @param {any} key The key identifying the element to store.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @param {any} val The element to store\n   */\n  set(key, val) {\n    return super.set(CborMap._encode(key), val)\n  }\n\n  /**\n   * Removes the specified element.\n   *\n   * @param {any} key The key identifying the element to delete.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @returns {boolean}\n   */\n  delete(key) {\n    return super.delete(CborMap._encode(key))\n  }\n\n  /**\n   * Does an element with the specified key exist?\n   *\n   * @param {any} key The key identifying the element to check.\n   *   Can be any type, which will be serialized into CBOR and compared by\n   *   value.\n   * @returns {boolean}\n   */\n  has(key) {\n    return super.has(CborMap._encode(key))\n  }\n\n  /**\n   * Returns a new Iterator object that contains the keys for each element\n   * in the Map object in insertion order.  The keys are decoded into their\n   * original format.\n   *\n   * @returns {IterableIterator<any>}\n   */\n  *keys() {\n    for (const k of super.keys()) {\n      yield CborMap._decode(k)\n    }\n  }\n\n  /**\n   * Returns a new Iterator object that contains the [key, value] pairs for\n   * each element in the Map object in insertion order.\n   *\n   * @returns {IterableIterator}\n   */\n  *entries() {\n    for (const kv of super.entries()) {\n      yield [CborMap._decode(kv[0]), kv[1]]\n    }\n  }\n\n  /**\n   * Returns a new Iterator object that contains the [key, value] pairs for\n   * each element in the Map object in insertion order.\n   *\n   * @returns {IterableIterator}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * Executes a provided function once per each key/value pair in the Map\n   * object, in insertion order.\n   *\n   * @param {function(any, any, Map): undefined} fun Function to execute for\n   *  each element, which takes a value, a key, and the Map being traversed.\n   * @param {any} thisArg Value to use as this when executing callback\n   */\n  forEach(fun, thisArg) {\n    if (typeof(fun) !== 'function') {\n      throw new TypeError('Must be function')\n    }\n    for (const kv of super.entries()) {\n      fun.call(this, kv[1], CborMap._decode(kv[0]), this)\n    }\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {Object} gen The generator to push onto\n   * @returns {boolean} true on success\n   */\n  encodeCBOR(gen) {\n    if (!gen._pushInt(this.size, MT.MAP)) {\n      return false\n    }\n    if (gen.canonical) {\n      const entries = Array.from(super.entries())\n        .map((kv) => [Buffer.from(kv[0], 'base64'), kv[1]])\n      entries.sort((a, b) => a[0].compare(b[0]))\n      for (const kv of entries) {\n        if (!(gen.push(kv[0]) && gen.pushAny(kv[1]))) {\n          return false\n        }\n      }\n    } else {\n      for (const kv of super.entries()) {\n        if (!(gen.push(Buffer.from(kv[0], 'base64')) && gen.pushAny(kv[1]))) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n}\n\nmodule.exports = CborMap\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}