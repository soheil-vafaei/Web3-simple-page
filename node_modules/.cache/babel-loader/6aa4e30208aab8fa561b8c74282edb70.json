{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\n\n\nfunction either() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\n\nfunction ini(hljs) {\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [{\n      begin: /([+-]+)?[\\d]+_[\\d_]+/\n    }, {\n      begin: hljs.NUMBER_RE\n    }]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [{\n    begin: /;/,\n    end: /$/\n  }, {\n    begin: /#/,\n    end: /$/\n  }];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [{\n      begin: /\\$[\\w\\d\"][\\w\\d_]*/\n    }, {\n      begin: /\\$\\{(.*?)\\}/\n    }]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [{\n      begin: \"'''\",\n      end: \"'''\",\n      relevance: 10\n    }, {\n      begin: '\"\"\"',\n      end: '\"\"\"',\n      relevance: 10\n    }, {\n      begin: '\"',\n      end: '\"'\n    }, {\n      begin: \"'\",\n      end: \"'\"\n    }]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [COMMENTS, LITERALS, VARIABLES, STRINGS, NUMBERS, 'self'],\n    relevance: 0\n  };\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);\n  const DOTTED_KEY = concat(ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*', lookahead(/\\s*=\\s*[^#\\s]/));\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [COMMENTS, {\n      className: 'section',\n      begin: /\\[+/,\n      end: /\\]+/\n    }, {\n      begin: DOTTED_KEY,\n      className: 'attr',\n      starts: {\n        end: /$/,\n        contains: [COMMENTS, ARRAY, LITERALS, VARIABLES, STRINGS, NUMBERS]\n      }\n    }]\n  };\n}\n\nmodule.exports = ini;","map":{"version":3,"names":["source","re","lookahead","concat","args","joined","map","x","join","either","ini","hljs","NUMBERS","className","relevance","variants","begin","NUMBER_RE","COMMENTS","COMMENT","end","VARIABLES","LITERALS","STRINGS","contains","BACKSLASH_ESCAPE","ARRAY","BARE_KEY","QUOTED_KEY_DOUBLE_QUOTE","QUOTED_KEY_SINGLE_QUOTE","ANY_KEY","DOTTED_KEY","name","aliases","case_insensitive","illegal","starts","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/highlight.js/lib/languages/ini.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\nfunction ini(hljs) {\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        begin: /([+-]+)?[\\d]+_[\\d_]+/\n      },\n      {\n        begin: hljs.NUMBER_RE\n      }\n    ]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [\n    {\n      begin: /;/,\n      end: /$/\n    },\n    {\n      begin: /#/,\n      end: /$/\n    }\n  ];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [\n      {\n        begin: /\\$[\\w\\d\"][\\w\\d_]*/\n      },\n      {\n        begin: /\\$\\{(.*?)\\}/\n      }\n    ]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: \"'''\",\n        end: \"'''\",\n        relevance: 10\n      },\n      {\n        begin: '\"\"\"',\n        end: '\"\"\"',\n        relevance: 10\n      },\n      {\n        begin: '\"',\n        end: '\"'\n      },\n      {\n        begin: \"'\",\n        end: \"'\"\n      }\n    ]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [\n      COMMENTS,\n      LITERALS,\n      VARIABLES,\n      STRINGS,\n      NUMBERS,\n      'self'\n    ],\n    relevance: 0\n  };\n\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = either(\n    BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE\n  );\n  const DOTTED_KEY = concat(\n    ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*',\n    lookahead(/\\s*=\\s*[^#\\s]/)\n  );\n\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [\n      COMMENTS,\n      {\n        className: 'section',\n        begin: /\\[+/,\n        end: /\\]+/\n      },\n      {\n        begin: DOTTED_KEY,\n        className: 'attr',\n        starts: {\n          end: /$/,\n          contains: [\n            COMMENTS,\n            ARRAY,\n            LITERALS,\n            VARIABLES,\n            STRINGS,\n            NUMBERS\n          ]\n        }\n      }\n    ]\n  };\n}\n\nmodule.exports = ini;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}