{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\n\nvar assert_1 = __importDefault(require(\"assert\"));\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar account_1 = require(\"./account\");\n\nvar Address =\n/** @class */\nfunction () {\n  function Address(buf) {\n    (0, assert_1.default)(buf.length === 20, 'Invalid address length');\n    this.buf = buf;\n  }\n  /**\n   * Returns the zero address.\n   */\n\n\n  Address.zero = function () {\n    return new Address((0, bytes_1.zeros)(20));\n  };\n  /**\n   * Returns an Address object from a hex-encoded string.\n   * @param str - Hex-encoded address\n   */\n\n\n  Address.fromString = function (str) {\n    (0, assert_1.default)((0, account_1.isValidAddress)(str), 'Invalid address');\n    return new Address((0, bytes_1.toBuffer)(str));\n  };\n  /**\n   * Returns an address for a given public key.\n   * @param pubKey The two points of an uncompressed key\n   */\n\n\n  Address.fromPublicKey = function (pubKey) {\n    (0, assert_1.default)(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n    var buf = (0, account_1.pubToAddress)(pubKey);\n    return new Address(buf);\n  };\n  /**\n   * Returns an address for a given private key.\n   * @param privateKey A private key must be 256 bits wide\n   */\n\n\n  Address.fromPrivateKey = function (privateKey) {\n    (0, assert_1.default)(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n    var buf = (0, account_1.privateToAddress)(privateKey);\n    return new Address(buf);\n  };\n  /**\n   * Generates an address for a newly created contract.\n   * @param from The address which is creating this new address\n   * @param nonce The nonce of the from account\n   */\n\n\n  Address.generate = function (from, nonce) {\n    (0, assert_1.default)(externals_1.BN.isBN(nonce));\n    return new Address((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));\n  };\n  /**\n   * Generates an address for a contract created using CREATE2.\n   * @param from The address which is creating this new address\n   * @param salt A salt\n   * @param initCode The init code of the contract being created\n   */\n\n\n  Address.generate2 = function (from, salt, initCode) {\n    (0, assert_1.default)(Buffer.isBuffer(salt));\n    (0, assert_1.default)(Buffer.isBuffer(initCode));\n    return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));\n  };\n  /**\n   * Is address equal to another.\n   */\n\n\n  Address.prototype.equals = function (address) {\n    return this.buf.equals(address.buf);\n  };\n  /**\n   * Is address zero.\n   */\n\n\n  Address.prototype.isZero = function () {\n    return this.equals(Address.zero());\n  };\n  /**\n   * True if address is in the address range defined\n   * by EIP-1352\n   */\n\n\n  Address.prototype.isPrecompileOrSystemAddress = function () {\n    var addressBN = new externals_1.BN(this.buf);\n    var rangeMin = new externals_1.BN(0);\n    var rangeMax = new externals_1.BN('ffff', 'hex');\n    return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);\n  };\n  /**\n   * Returns hex encoding of address.\n   */\n\n\n  Address.prototype.toString = function () {\n    return '0x' + this.buf.toString('hex');\n  };\n  /**\n   * Returns Buffer representation of address.\n   */\n\n\n  Address.prototype.toBuffer = function () {\n    return Buffer.from(this.buf);\n  };\n\n  return Address;\n}();\n\nexports.Address = Address;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAQA;AAAA;AAAA;EAGE,iBAAYA,GAAZ,EAAuB;IACrB,sBAAOA,GAAG,CAACC,MAAJ,KAAe,EAAtB,EAA0B,wBAA1B;IACA,KAAKD,GAAL,GAAWA,GAAX;EACD;EAED;;;;;EAGOE,eAAP;IACE,OAAO,IAAIA,OAAJ,CAAY,mBAAM,EAAN,CAAZ,CAAP;EACD,CAFM;EAIP;;;;;;EAIOA,qBAAP,UAAkBC,GAAlB,EAA6B;IAC3B,sBAAO,8BAAeA,GAAf,CAAP,EAA4B,iBAA5B;IACA,OAAO,IAAID,OAAJ,CAAY,sBAASC,GAAT,CAAZ,CAAP;EACD,CAHM;EAKP;;;;;;EAIOD,wBAAP,UAAqBE,MAArB,EAAmC;IACjC,sBAAOC,MAAM,CAACC,QAAP,CAAgBF,MAAhB,CAAP,EAAgC,6BAAhC;IACA,IAAMJ,GAAG,GAAG,4BAAaI,MAAb,CAAZ;IACA,OAAO,IAAIF,OAAJ,CAAYF,GAAZ,CAAP;EACD,CAJM;EAMP;;;;;;EAIOE,yBAAP,UAAsBK,UAAtB,EAAwC;IACtC,sBAAOF,MAAM,CAACC,QAAP,CAAgBC,UAAhB,CAAP,EAAoC,8BAApC;IACA,IAAMP,GAAG,GAAG,gCAAiBO,UAAjB,CAAZ;IACA,OAAO,IAAIL,OAAJ,CAAYF,GAAZ,CAAP;EACD,CAJM;EAMP;;;;;;;EAKOE,mBAAP,UAAgBM,IAAhB,EAA+BC,KAA/B,EAAwC;IACtC,sBAAOC,eAAGC,IAAH,CAAQF,KAAR,CAAP;IACA,OAAO,IAAIP,OAAJ,CAAY,+BAAgBM,IAAI,CAACR,GAArB,EAA0BS,KAAK,CAACG,WAAN,CAAkBP,MAAlB,CAA1B,CAAZ,CAAP;EACD,CAHM;EAKP;;;;;;;;EAMOH,oBAAP,UAAiBM,IAAjB,EAAgCK,IAAhC,EAA8CC,QAA9C,EAA8D;IAC5D,sBAAOT,MAAM,CAACC,QAAP,CAAgBO,IAAhB,CAAP;IACA,sBAAOR,MAAM,CAACC,QAAP,CAAgBQ,QAAhB,CAAP;IACA,OAAO,IAAIZ,OAAJ,CAAY,gCAAiBM,IAAI,CAACR,GAAtB,EAA2Ba,IAA3B,EAAiCC,QAAjC,CAAZ,CAAP;EACD,CAJM;EAMP;;;;;EAGAZ,qCAAOa,OAAP,EAAuB;IACrB,OAAO,KAAKf,GAAL,CAASgB,MAAT,CAAgBD,OAAO,CAACf,GAAxB,CAAP;EACD,CAFD;EAIA;;;;;EAGAE;IACE,OAAO,KAAKc,MAAL,CAAYd,OAAO,CAACe,IAAR,EAAZ,CAAP;EACD,CAFD;EAIA;;;;;;EAIAf;IACE,IAAMgB,SAAS,GAAG,IAAIR,cAAJ,CAAO,KAAKV,GAAZ,CAAlB;IACA,IAAMmB,QAAQ,GAAG,IAAIT,cAAJ,CAAO,CAAP,CAAjB;IACA,IAAMU,QAAQ,GAAG,IAAIV,cAAJ,CAAO,MAAP,EAAe,KAAf,CAAjB;IAEA,OAAOQ,SAAS,CAACG,GAAV,CAAcF,QAAd,KAA2BD,SAAS,CAACI,GAAV,CAAcF,QAAd,CAAlC;EACD,CAND;EAQA;;;;;EAGAlB;IACE,OAAO,OAAO,KAAKF,GAAL,CAASuB,QAAT,CAAkB,KAAlB,CAAd;EACD,CAFD;EAIA;;;;;EAGArB;IACE,OAAOG,MAAM,CAACG,IAAP,CAAY,KAAKR,GAAjB,CAAP;EACD,CAFD;;EAGF;AAAC,CAzGD;;AAAawB","names":["buf","length","Address","str","pubKey","Buffer","isBuffer","privateKey","from","nonce","externals_1","isBN","toArrayLike","salt","initCode","address","equals","zero","addressBN","rangeMin","rangeMax","gte","lte","toString","exports"],"sourceRoot":"","sources":["../src/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}