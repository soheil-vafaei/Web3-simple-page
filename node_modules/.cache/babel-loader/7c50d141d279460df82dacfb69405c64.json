{"ast":null,"code":"import { htmlDecodeTree, xmlDecodeTree, BinTrieFlags, determineBranch, replaceCodePoint } from \"entities/lib/decode.js\";\nvar CharCodes;\n\n(function (CharCodes) {\n  CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n  CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n  CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n  CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n  CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n  CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n  CharCodes[CharCodes[\"Num\"] = 35] = \"Num\";\n  CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n  CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n  CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n  CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n  CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n  CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n  CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n  CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n  CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n  CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n  CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n  CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n  CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n  CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n  CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n  CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */\n\n\nvar State;\n\n(function (State) {\n  State[State[\"Text\"] = 1] = \"Text\";\n  State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n  State[State[\"InTagName\"] = 3] = \"InTagName\";\n  State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n  State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n  State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n  State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\"; // Attributes\n\n  State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n  State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n  State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n  State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n  State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n  State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n  State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\"; // Declarations\n\n  State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n  State[State[\"InDeclaration\"] = 16] = \"InDeclaration\"; // Processing instructions\n\n  State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\"; // Comments & CDATA\n\n  State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n  State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n  State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n  State[State[\"InCommentLike\"] = 21] = \"InCommentLike\"; // Special tags\n\n  State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n  State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n  State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n  State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n  State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n  State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n  State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n  State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\n\nfunction isWhitespace(c) {\n  return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\n\nfunction isEndOfTagSection(c) {\n  return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\n\nfunction isNumber(c) {\n  return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\n\nfunction isASCIIAlpha(c) {\n  return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\n\nfunction isHexDigit(c) {\n  return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\n\nexport var QuoteType;\n\n(function (QuoteType) {\n  QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n  QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n  QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n  QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType || (QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\n\n\nconst Sequences = {\n  Cdata: new Uint8Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n  CdataEnd: new Uint8Array([0x5d, 0x5d, 0x3e]),\n  CommentEnd: new Uint8Array([0x2d, 0x2d, 0x3e]),\n  ScriptEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),\n  StyleEnd: new Uint8Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n  TitleEnd: new Uint8Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]) // `</title`\n\n};\nexport default class Tokenizer {\n  constructor(_ref, cbs) {\n    let {\n      xmlMode = false,\n      decodeEntities = true\n    } = _ref;\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n\n    this.state = State.Text;\n    /** The read buffer. */\n\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n\n    this.index = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n\n    this.baseState = State.Text;\n    /** For special parsing behavior inside of script and style tags. */\n\n    this.isSpecial = false;\n    /** Indicates whether the tokenizer has been paused. */\n\n    this.running = true;\n    /** The offset of the current buffer. */\n\n    this.offset = 0;\n    this.sequenceIndex = 0;\n    this.trieIndex = 0;\n    this.trieCurrent = 0;\n    /** For named entities, the index of the value. For numeric entities, the code point. */\n\n    this.entityResult = 0;\n    this.entityExcess = 0;\n    this.xmlMode = xmlMode;\n    this.decodeEntities = decodeEntities;\n    this.entityTrie = xmlMode ? xmlDecodeTree : htmlDecodeTree;\n  }\n\n  reset() {\n    this.state = State.Text;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this.index = 0;\n    this.baseState = State.Text;\n    this.currentSequence = undefined;\n    this.running = true;\n    this.offset = 0;\n  }\n\n  write(chunk) {\n    this.offset += this.buffer.length;\n    this.buffer = chunk;\n    this.parse();\n  }\n\n  end() {\n    if (this.running) this.finish();\n  }\n\n  pause() {\n    this.running = false;\n  }\n\n  resume() {\n    this.running = true;\n\n    if (this.index < this.buffer.length + this.offset) {\n      this.parse();\n    }\n  }\n  /**\n   * The current index within all of the written data.\n   */\n\n\n  getIndex() {\n    return this.index;\n  }\n  /**\n   * The start of the current section.\n   */\n\n\n  getSectionStart() {\n    return this.sectionStart;\n  }\n\n  stateText(c) {\n    if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n      if (this.index > this.sectionStart) {\n        this.cbs.ontext(this.sectionStart, this.index);\n      }\n\n      this.state = State.BeforeTagName;\n      this.sectionStart = this.index;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.state = State.BeforeEntity;\n    }\n  }\n\n  stateSpecialStartSequence(c) {\n    const isEnd = this.sequenceIndex === this.currentSequence.length;\n    const isMatch = isEnd ? // If we are at the end of the sequence, make sure the tag name has ended\n    isEndOfTagSection(c) : // Otherwise, do a case-insensitive comparison\n    (c | 0x20) === this.currentSequence[this.sequenceIndex];\n\n    if (!isMatch) {\n      this.isSpecial = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n\n    this.sequenceIndex = 0;\n    this.state = State.InTagName;\n    this.stateInTagName(c);\n  }\n  /** Look for an end tag. For <title> tags, also decode entities. */\n\n\n  stateInSpecialTag(c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === CharCodes.Gt || isWhitespace(c)) {\n        const endOfText = this.index - this.currentSequence.length;\n\n        if (this.sectionStart < endOfText) {\n          // Spoof the index so that reported locations match up.\n          const actualIndex = this.index;\n          this.index = endOfText;\n          this.cbs.ontext(this.sectionStart, endOfText);\n          this.index = actualIndex;\n        }\n\n        this.isSpecial = false;\n        this.sectionStart = endOfText + 2; // Skip over the `</`\n\n        this.stateInClosingTagName(c);\n        return; // We are done; skip the rest of the function.\n      }\n\n      this.sequenceIndex = 0;\n    }\n\n    if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd) {\n        // We have to parse entities in <title> tags.\n        if (this.decodeEntities && c === CharCodes.Amp) {\n          this.state = State.BeforeEntity;\n        }\n      } else if (this.fastForwardTo(CharCodes.Lt)) {\n        // Outside of <title> tags, we can fast-forward.\n        this.sequenceIndex = 1;\n      }\n    } else {\n      // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n      this.sequenceIndex = Number(c === CharCodes.Lt);\n    }\n  }\n\n  stateCDATASequence(c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this.state = State.InCommentLike;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this.state = State.InDeclaration;\n      this.stateInDeclaration(c); // Reconsume the character\n    }\n  }\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n\n\n  fastForwardTo(c) {\n    while (++this.index < this.buffer.length + this.offset) {\n      if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n        return true;\n      }\n    }\n    /*\n     * We increment the index at the end of the `parse` loop,\n     * so set it to `buffer.length - 1` here.\n     *\n     * TODO: Refactor `parse` to increment index before calling states.\n     */\n\n\n    this.index = this.buffer.length + this.offset - 1;\n    return false;\n  }\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n\n\n  stateInCommentLike(c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(this.sectionStart, this.index, 2);\n        } else {\n          this.cbs.oncomment(this.sectionStart, this.index, 2);\n        }\n\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n        this.state = State.Text;\n      }\n    } else if (this.sequenceIndex === 0) {\n      // Fast-forward to the first character of the sequence\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      // Allow long sequences, eg. --->, ]]]>\n      this.sequenceIndex = 0;\n    }\n  }\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n\n\n  isTagStartChar(c) {\n    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n  }\n\n  startSpecial(sequence, offset) {\n    this.isSpecial = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n    this.state = State.SpecialStartSequence;\n  }\n\n  stateBeforeTagName(c) {\n    if (c === CharCodes.ExclamationMark) {\n      this.state = State.BeforeDeclaration;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Questionmark) {\n      this.state = State.InProcessingInstruction;\n      this.sectionStart = this.index + 1;\n    } else if (this.isTagStartChar(c)) {\n      const lower = c | 0x20;\n      this.sectionStart = this.index;\n\n      if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n        this.startSpecial(Sequences.TitleEnd, 3);\n      } else {\n        this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n      }\n    } else if (c === CharCodes.Slash) {\n      this.state = State.BeforeClosingTagName;\n    } else {\n      this.state = State.Text;\n      this.stateText(c);\n    }\n  }\n\n  stateInTagName(c) {\n    if (isEndOfTagSection(c)) {\n      this.cbs.onopentagname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  }\n\n  stateBeforeClosingTagName(c) {\n    if (isWhitespace(c)) {// Ignore\n    } else if (c === CharCodes.Gt) {\n      this.state = State.Text;\n    } else {\n      this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n      this.sectionStart = this.index;\n    }\n  }\n\n  stateInClosingTagName(c) {\n    if (c === CharCodes.Gt || isWhitespace(c)) {\n      this.cbs.onclosetag(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterClosingTagName;\n      this.stateAfterClosingTagName(c);\n    }\n  }\n\n  stateAfterClosingTagName(c) {\n    // Skip everything until \">\"\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n\n  stateBeforeAttributeName(c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onopentagend(this.index);\n\n      if (this.isSpecial) {\n        this.state = State.InSpecialTag;\n        this.sequenceIndex = 0;\n      } else {\n        this.state = State.Text;\n      }\n\n      this.baseState = this.state;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.Slash) {\n      this.state = State.InSelfClosingTag;\n    } else if (!isWhitespace(c)) {\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  }\n\n  stateInSelfClosingTag(c) {\n    if (c === CharCodes.Gt) {\n      this.cbs.onselfclosingtag(this.index);\n      this.state = State.Text;\n      this.baseState = State.Text;\n      this.sectionStart = this.index + 1;\n      this.isSpecial = false; // Reset special state, in case of self-closing special tags\n    } else if (!isWhitespace(c)) {\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    }\n  }\n\n  stateInAttributeName(c) {\n    if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = State.AfterAttributeName;\n      this.stateAfterAttributeName(c);\n    }\n  }\n\n  stateAfterAttributeName(c) {\n    if (c === CharCodes.Eq) {\n      this.state = State.BeforeAttributeValue;\n    } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(QuoteType.NoValue, this.index);\n      this.state = State.InAttributeName;\n      this.sectionStart = this.index;\n    }\n  }\n\n  stateBeforeAttributeValue(c) {\n    if (c === CharCodes.DoubleQuote) {\n      this.state = State.InAttributeValueDq;\n      this.sectionStart = this.index + 1;\n    } else if (c === CharCodes.SingleQuote) {\n      this.state = State.InAttributeValueSq;\n      this.sectionStart = this.index + 1;\n    } else if (!isWhitespace(c)) {\n      this.sectionStart = this.index;\n      this.state = State.InAttributeValueNq;\n      this.stateInAttributeValueNoQuotes(c); // Reconsume token\n    }\n  }\n\n  handleInAttributeValue(c, quote) {\n    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n      this.state = State.BeforeAttributeName;\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  }\n\n  stateInAttributeValueDoubleQuotes(c) {\n    this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n  }\n\n  stateInAttributeValueSingleQuotes(c) {\n    this.handleInAttributeValue(c, CharCodes.SingleQuote);\n  }\n\n  stateInAttributeValueNoQuotes(c) {\n    if (isWhitespace(c) || c === CharCodes.Gt) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(QuoteType.Unquoted, this.index);\n      this.state = State.BeforeAttributeName;\n      this.stateBeforeAttributeName(c);\n    } else if (this.decodeEntities && c === CharCodes.Amp) {\n      this.baseState = this.state;\n      this.state = State.BeforeEntity;\n    }\n  }\n\n  stateBeforeDeclaration(c) {\n    if (c === CharCodes.OpeningSquareBracket) {\n      this.state = State.CDATASequence;\n      this.sequenceIndex = 0;\n    } else {\n      this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n    }\n  }\n\n  stateInDeclaration(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.ondeclaration(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n\n  stateInProcessingInstruction(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n\n  stateBeforeComment(c) {\n    if (c === CharCodes.Dash) {\n      this.state = State.InCommentLike;\n      this.currentSequence = Sequences.CommentEnd; // Allow short comments (eg. <!-->)\n\n      this.sequenceIndex = 2;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = State.InDeclaration;\n    }\n  }\n\n  stateInSpecialComment(c) {\n    if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n      this.cbs.oncomment(this.sectionStart, this.index, 0);\n      this.state = State.Text;\n      this.sectionStart = this.index + 1;\n    }\n  }\n\n  stateBeforeSpecialS(c) {\n    const lower = c | 0x20;\n\n    if (lower === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (lower === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this.state = State.InTagName;\n      this.stateInTagName(c); // Consume the token again\n    }\n  }\n\n  stateBeforeEntity(c) {\n    // Start excess with 1 to include the '&'\n    this.entityExcess = 1;\n    this.entityResult = 0;\n\n    if (c === CharCodes.Num) {\n      this.state = State.BeforeNumericEntity;\n    } else if (c === CharCodes.Amp) {// We have two `&` characters in a row. Stay in the current state.\n    } else {\n      this.trieIndex = 0;\n      this.trieCurrent = this.entityTrie[0];\n      this.state = State.InNamedEntity;\n      this.stateInNamedEntity(c);\n    }\n  }\n\n  stateInNamedEntity(c) {\n    this.entityExcess += 1;\n    this.trieIndex = determineBranch(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n\n    if (this.trieIndex < 0) {\n      this.emitNamedEntity();\n      this.index--;\n      return;\n    }\n\n    this.trieCurrent = this.entityTrie[this.trieIndex];\n    const masked = this.trieCurrent & BinTrieFlags.VALUE_LENGTH; // If the branch is a value, store it and continue\n\n    if (masked) {\n      // The mask is the number of bytes of the value, including the current byte.\n      const valueLength = (masked >> 14) - 1; // If we have a legacy entity while parsing strictly, just skip the number of bytes\n\n      if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n        this.trieIndex += valueLength;\n      } else {\n        // Add 1 as we have already incremented the excess\n        const entityStart = this.index - this.entityExcess + 1;\n\n        if (entityStart > this.sectionStart) {\n          this.emitPartial(this.sectionStart, entityStart);\n        } // If this is a surrogate pair, consume the next two bytes\n\n\n        this.entityResult = this.trieIndex;\n        this.trieIndex += valueLength;\n        this.entityExcess = 0;\n        this.sectionStart = this.index + 1;\n\n        if (valueLength === 0) {\n          this.emitNamedEntity();\n        }\n      }\n    }\n  }\n\n  emitNamedEntity() {\n    this.state = this.baseState;\n\n    if (this.entityResult === 0) {\n      return;\n    }\n\n    const valueLength = (this.entityTrie[this.entityResult] & BinTrieFlags.VALUE_LENGTH) >> 14;\n\n    switch (valueLength) {\n      case 1:\n        this.emitCodePoint(this.entityTrie[this.entityResult] & ~BinTrieFlags.VALUE_LENGTH);\n        break;\n\n      case 2:\n        this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n        break;\n\n      case 3:\n        {\n          this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n          this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n        }\n    }\n  }\n\n  stateBeforeNumericEntity(c) {\n    if ((c | 0x20) === CharCodes.LowerX) {\n      this.entityExcess++;\n      this.state = State.InHexEntity;\n    } else {\n      this.state = State.InNumericEntity;\n      this.stateInNumericEntity(c);\n    }\n  }\n\n  emitNumericEntity(strict) {\n    const entityStart = this.index - this.entityExcess - 1;\n    const numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n\n    if (numberStart !== this.index) {\n      // Emit leading data if any\n      if (entityStart > this.sectionStart) {\n        this.emitPartial(this.sectionStart, entityStart);\n      }\n\n      this.sectionStart = this.index + Number(strict);\n      this.emitCodePoint(replaceCodePoint(this.entityResult));\n    }\n\n    this.state = this.baseState;\n  }\n\n  stateInNumericEntity(c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n\n      this.index--;\n    }\n  }\n\n  stateInHexEntity(c) {\n    if (c === CharCodes.Semi) {\n      this.emitNumericEntity(true);\n    } else if (isNumber(c)) {\n      this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n      this.entityExcess++;\n    } else if (isHexDigit(c)) {\n      this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n      this.entityExcess++;\n    } else {\n      if (this.allowLegacyEntity()) {\n        this.emitNumericEntity(false);\n      } else {\n        this.state = this.baseState;\n      }\n\n      this.index--;\n    }\n  }\n\n  allowLegacyEntity() {\n    return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n  }\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n\n\n  cleanup() {\n    // If we are inside of text or attributes, emit what we already have.\n    if (this.running && this.sectionStart !== this.index) {\n      if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n        this.cbs.ontext(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n        this.cbs.onattribdata(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      }\n    }\n  }\n\n  shouldContinue() {\n    return this.index < this.buffer.length + this.offset && this.running;\n  }\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n\n\n  parse() {\n    while (this.shouldContinue()) {\n      const c = this.buffer.charCodeAt(this.index - this.offset);\n\n      if (this.state === State.Text) {\n        this.stateText(c);\n      } else if (this.state === State.SpecialStartSequence) {\n        this.stateSpecialStartSequence(c);\n      } else if (this.state === State.InSpecialTag) {\n        this.stateInSpecialTag(c);\n      } else if (this.state === State.CDATASequence) {\n        this.stateCDATASequence(c);\n      } else if (this.state === State.InAttributeValueDq) {\n        this.stateInAttributeValueDoubleQuotes(c);\n      } else if (this.state === State.InAttributeName) {\n        this.stateInAttributeName(c);\n      } else if (this.state === State.InCommentLike) {\n        this.stateInCommentLike(c);\n      } else if (this.state === State.InSpecialComment) {\n        this.stateInSpecialComment(c);\n      } else if (this.state === State.BeforeAttributeName) {\n        this.stateBeforeAttributeName(c);\n      } else if (this.state === State.InTagName) {\n        this.stateInTagName(c);\n      } else if (this.state === State.InClosingTagName) {\n        this.stateInClosingTagName(c);\n      } else if (this.state === State.BeforeTagName) {\n        this.stateBeforeTagName(c);\n      } else if (this.state === State.AfterAttributeName) {\n        this.stateAfterAttributeName(c);\n      } else if (this.state === State.InAttributeValueSq) {\n        this.stateInAttributeValueSingleQuotes(c);\n      } else if (this.state === State.BeforeAttributeValue) {\n        this.stateBeforeAttributeValue(c);\n      } else if (this.state === State.BeforeClosingTagName) {\n        this.stateBeforeClosingTagName(c);\n      } else if (this.state === State.AfterClosingTagName) {\n        this.stateAfterClosingTagName(c);\n      } else if (this.state === State.BeforeSpecialS) {\n        this.stateBeforeSpecialS(c);\n      } else if (this.state === State.InAttributeValueNq) {\n        this.stateInAttributeValueNoQuotes(c);\n      } else if (this.state === State.InSelfClosingTag) {\n        this.stateInSelfClosingTag(c);\n      } else if (this.state === State.InDeclaration) {\n        this.stateInDeclaration(c);\n      } else if (this.state === State.BeforeDeclaration) {\n        this.stateBeforeDeclaration(c);\n      } else if (this.state === State.BeforeComment) {\n        this.stateBeforeComment(c);\n      } else if (this.state === State.InProcessingInstruction) {\n        this.stateInProcessingInstruction(c);\n      } else if (this.state === State.InNamedEntity) {\n        this.stateInNamedEntity(c);\n      } else if (this.state === State.BeforeEntity) {\n        this.stateBeforeEntity(c);\n      } else if (this.state === State.InHexEntity) {\n        this.stateInHexEntity(c);\n      } else if (this.state === State.InNumericEntity) {\n        this.stateInNumericEntity(c);\n      } else {\n        // `this._state === State.BeforeNumericEntity`\n        this.stateBeforeNumericEntity(c);\n      }\n\n      this.index++;\n    }\n\n    this.cleanup();\n  }\n\n  finish() {\n    if (this.state === State.InNamedEntity) {\n      this.emitNamedEntity();\n    } // If there is remaining data, emit it in a reasonable way\n\n\n    if (this.sectionStart < this.index) {\n      this.handleTrailingData();\n    }\n\n    this.cbs.onend();\n  }\n  /** Handle any trailing data. */\n\n\n  handleTrailingData() {\n    const endIndex = this.buffer.length + this.offset;\n\n    if (this.state === State.InCommentLike) {\n      if (this.currentSequence === Sequences.CdataEnd) {\n        this.cbs.oncdata(this.sectionStart, endIndex, 0);\n      } else {\n        this.cbs.oncomment(this.sectionStart, endIndex, 0);\n      }\n    } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false); // All trailing data will have been consumed\n    } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n      this.emitNumericEntity(false); // All trailing data will have been consumed\n    } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n      /*\n       * If we are currently in an opening or closing tag, us not calling the\n       * respective callback signals that the tag should be ignored.\n       */\n    } else {\n      this.cbs.ontext(this.sectionStart, endIndex);\n    }\n  }\n\n  emitPartial(start, endIndex) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribdata(start, endIndex);\n    } else {\n      this.cbs.ontext(start, endIndex);\n    }\n  }\n\n  emitCodePoint(cp) {\n    if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n      this.cbs.onattribentity(cp);\n    } else {\n      this.cbs.ontextentity(cp);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["htmlDecodeTree","xmlDecodeTree","BinTrieFlags","determineBranch","replaceCodePoint","CharCodes","State","isWhitespace","c","Space","NewLine","Tab","FormFeed","CarriageReturn","isEndOfTagSection","Slash","Gt","isNumber","Zero","Nine","isASCIIAlpha","LowerA","LowerZ","UpperA","UpperZ","isHexDigit","UpperF","LowerF","QuoteType","Sequences","Cdata","Uint8Array","CdataEnd","CommentEnd","ScriptEnd","StyleEnd","TitleEnd","Tokenizer","constructor","cbs","xmlMode","decodeEntities","Text","entityTrie","reset","state","buffer","sectionStart","index","baseState","currentSequence","undefined","running","offset","write","chunk","length","parse","end","finish","pause","resume","getIndex","getSectionStart","stateText","Lt","fastForwardTo","ontext","BeforeTagName","Amp","BeforeEntity","stateSpecialStartSequence","isEnd","sequenceIndex","isMatch","isSpecial","InTagName","stateInTagName","stateInSpecialTag","endOfText","actualIndex","stateInClosingTagName","Number","stateCDATASequence","InCommentLike","InDeclaration","stateInDeclaration","charCodeAt","stateInCommentLike","oncdata","oncomment","isTagStartChar","startSpecial","sequence","SpecialStartSequence","stateBeforeTagName","ExclamationMark","BeforeDeclaration","Questionmark","InProcessingInstruction","lower","BeforeSpecialS","BeforeClosingTagName","onopentagname","BeforeAttributeName","stateBeforeAttributeName","stateBeforeClosingTagName","InClosingTagName","InSpecialComment","onclosetag","AfterClosingTagName","stateAfterClosingTagName","onopentagend","InSpecialTag","InSelfClosingTag","InAttributeName","stateInSelfClosingTag","onselfclosingtag","stateInAttributeName","Eq","onattribname","AfterAttributeName","stateAfterAttributeName","BeforeAttributeValue","onattribend","NoValue","stateBeforeAttributeValue","DoubleQuote","InAttributeValueDq","SingleQuote","InAttributeValueSq","InAttributeValueNq","stateInAttributeValueNoQuotes","handleInAttributeValue","quote","onattribdata","Double","Single","stateInAttributeValueDoubleQuotes","stateInAttributeValueSingleQuotes","Unquoted","stateBeforeDeclaration","OpeningSquareBracket","CDATASequence","Dash","BeforeComment","ondeclaration","stateInProcessingInstruction","onprocessinginstruction","stateBeforeComment","stateInSpecialComment","stateBeforeSpecialS","stateBeforeEntity","entityExcess","entityResult","Num","BeforeNumericEntity","trieIndex","trieCurrent","InNamedEntity","stateInNamedEntity","emitNamedEntity","masked","VALUE_LENGTH","valueLength","allowLegacyEntity","Semi","entityStart","emitPartial","emitCodePoint","stateBeforeNumericEntity","LowerX","InHexEntity","InNumericEntity","stateInNumericEntity","emitNumericEntity","strict","numberStart","stateInHexEntity","cleanup","shouldContinue","handleTrailingData","onend","endIndex","start","cp","onattribentity","ontextentity"],"sourceRoot":"https://raw.githubusercontent.com/fb55/htmlparser2/4763205746cd80120b5d2b69041197a394d24ba9/src/","sources":["Tokenizer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}