{"ast":null,"code":"import { readConfigureGlobal } from '../../../check/runner/configuration/GlobalParameters.js';\nexport const MaxLengthUpperBound = 0x7fffffff;\nconst orderedSize = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nconst orderedRelativeSize = ['-4', '-3', '-2', '-1', '=', '+1', '+2', '+3', '+4'];\nexport const DefaultSize = 'small';\nexport function maxLengthFromMinLength(minLength, size) {\n  switch (size) {\n    case 'xsmall':\n      return Math.floor(1.1 * minLength) + 1;\n\n    case 'small':\n      return 2 * minLength + 10;\n\n    case 'medium':\n      return 11 * minLength + 100;\n\n    case 'large':\n      return 101 * minLength + 1000;\n\n    case 'xlarge':\n      return 1001 * minLength + 10000;\n\n    default:\n      throw new Error(`Unable to compute lengths based on received size: ${size}`);\n  }\n}\nexport function relativeSizeToSize(size, defaultSize) {\n  const sizeInRelative = orderedRelativeSize.indexOf(size);\n\n  if (sizeInRelative === -1) {\n    return size;\n  }\n\n  const defaultSizeInSize = orderedSize.indexOf(defaultSize);\n\n  if (defaultSizeInSize === -1) {\n    throw new Error(`Unable to offset size based on the unknown defaulted one: ${defaultSize}`);\n  }\n\n  const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;\n  return resultingSizeInSize < 0 ? orderedSize[0] : resultingSizeInSize >= orderedSize.length ? orderedSize[orderedSize.length - 1] : orderedSize[resultingSizeInSize];\n}\nexport function maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength) {\n  const {\n    baseSize: defaultSize = DefaultSize,\n    defaultSizeToMaxWhenMaxSpecified\n  } = readConfigureGlobal() || {};\n  const definedSize = size !== undefined ? size : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n\n  if (definedSize === 'max') {\n    return maxLength;\n  }\n\n  const finalSize = relativeSizeToSize(definedSize, defaultSize);\n  return Math.min(maxLengthFromMinLength(minLength, finalSize), maxLength);\n}\nexport function depthBiasFromSizeForArbitrary(depthSizeOrSize, specifiedMaxDepth) {\n  if (typeof depthSizeOrSize === 'number') {\n    return 1 / depthSizeOrSize;\n  }\n\n  const {\n    baseSize: defaultSize = DefaultSize,\n    defaultSizeToMaxWhenMaxSpecified\n  } = readConfigureGlobal() || {};\n  const definedSize = depthSizeOrSize !== undefined ? depthSizeOrSize : specifiedMaxDepth && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n\n  if (definedSize === 'max') {\n    return 0;\n  }\n\n  const finalSize = relativeSizeToSize(definedSize, defaultSize);\n\n  switch (finalSize) {\n    case 'xsmall':\n      return 1;\n\n    case 'small':\n      return 0.5;\n\n    case 'medium':\n      return 0.25;\n\n    case 'large':\n      return 0.125;\n\n    case 'xlarge':\n      return 0.0625;\n  }\n}\nexport function resolveSize(size) {\n  const {\n    baseSize: defaultSize = DefaultSize\n  } = readConfigureGlobal() || {};\n\n  if (size === undefined) {\n    return defaultSize;\n  }\n\n  return relativeSizeToSize(size, defaultSize);\n}","map":{"version":3,"names":["readConfigureGlobal","MaxLengthUpperBound","orderedSize","orderedRelativeSize","DefaultSize","maxLengthFromMinLength","minLength","size","Math","floor","Error","relativeSizeToSize","defaultSize","sizeInRelative","indexOf","defaultSizeInSize","resultingSizeInSize","length","maxGeneratedLengthFromSizeForArbitrary","maxLength","specifiedMaxLength","baseSize","defaultSizeToMaxWhenMaxSpecified","definedSize","undefined","finalSize","min","depthBiasFromSizeForArbitrary","depthSizeOrSize","specifiedMaxDepth","resolveSize"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/fast-check/lib/esm/arbitrary/_internals/helpers/MaxLengthFromMinLength.js"],"sourcesContent":["import { readConfigureGlobal } from '../../../check/runner/configuration/GlobalParameters.js';\nexport const MaxLengthUpperBound = 0x7fffffff;\nconst orderedSize = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nconst orderedRelativeSize = ['-4', '-3', '-2', '-1', '=', '+1', '+2', '+3', '+4'];\nexport const DefaultSize = 'small';\nexport function maxLengthFromMinLength(minLength, size) {\n    switch (size) {\n        case 'xsmall':\n            return Math.floor(1.1 * minLength) + 1;\n        case 'small':\n            return 2 * minLength + 10;\n        case 'medium':\n            return 11 * minLength + 100;\n        case 'large':\n            return 101 * minLength + 1000;\n        case 'xlarge':\n            return 1001 * minLength + 10000;\n        default:\n            throw new Error(`Unable to compute lengths based on received size: ${size}`);\n    }\n}\nexport function relativeSizeToSize(size, defaultSize) {\n    const sizeInRelative = orderedRelativeSize.indexOf(size);\n    if (sizeInRelative === -1) {\n        return size;\n    }\n    const defaultSizeInSize = orderedSize.indexOf(defaultSize);\n    if (defaultSizeInSize === -1) {\n        throw new Error(`Unable to offset size based on the unknown defaulted one: ${defaultSize}`);\n    }\n    const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;\n    return resultingSizeInSize < 0\n        ? orderedSize[0]\n        : resultingSizeInSize >= orderedSize.length\n            ? orderedSize[orderedSize.length - 1]\n            : orderedSize[resultingSizeInSize];\n}\nexport function maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength) {\n    const { baseSize: defaultSize = DefaultSize, defaultSizeToMaxWhenMaxSpecified } = readConfigureGlobal() || {};\n    const definedSize = size !== undefined ? size : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n    if (definedSize === 'max') {\n        return maxLength;\n    }\n    const finalSize = relativeSizeToSize(definedSize, defaultSize);\n    return Math.min(maxLengthFromMinLength(minLength, finalSize), maxLength);\n}\nexport function depthBiasFromSizeForArbitrary(depthSizeOrSize, specifiedMaxDepth) {\n    if (typeof depthSizeOrSize === 'number') {\n        return 1 / depthSizeOrSize;\n    }\n    const { baseSize: defaultSize = DefaultSize, defaultSizeToMaxWhenMaxSpecified } = readConfigureGlobal() || {};\n    const definedSize = depthSizeOrSize !== undefined\n        ? depthSizeOrSize\n        : specifiedMaxDepth && defaultSizeToMaxWhenMaxSpecified\n            ? 'max'\n            : defaultSize;\n    if (definedSize === 'max') {\n        return 0;\n    }\n    const finalSize = relativeSizeToSize(definedSize, defaultSize);\n    switch (finalSize) {\n        case 'xsmall':\n            return 1;\n        case 'small':\n            return 0.5;\n        case 'medium':\n            return 0.25;\n        case 'large':\n            return 0.125;\n        case 'xlarge':\n            return 0.0625;\n    }\n}\nexport function resolveSize(size) {\n    const { baseSize: defaultSize = DefaultSize } = readConfigureGlobal() || {};\n    if (size === undefined) {\n        return defaultSize;\n    }\n    return relativeSizeToSize(size, defaultSize);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}