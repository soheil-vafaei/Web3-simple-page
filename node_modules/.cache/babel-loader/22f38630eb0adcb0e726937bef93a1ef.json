{"ast":null,"code":"import { isTag, hasChildren } from \"domhandler\";\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\n\nexport function filter(test, node) {\n  let recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n  if (!Array.isArray(node)) node = [node];\n  return find(test, node, recurse, limit);\n}\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\n\nexport function find(test, nodes, recurse, limit) {\n  const result = [];\n\n  for (const elem of nodes) {\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) break;\n    }\n\n    if (recurse && hasChildren(elem) && elem.children.length > 0) {\n      const children = find(test, elem.children, recurse, limit);\n      result.push(...children);\n      limit -= children.length;\n      if (limit <= 0) break;\n    }\n  }\n\n  return result;\n}\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\n\nexport function findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\n\nexport function findOne(test, nodes) {\n  let recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let elem = null;\n\n  for (let i = 0; i < nodes.length && !elem; i++) {\n    const checked = nodes[i];\n\n    if (!isTag(checked)) {\n      continue;\n    } else if (test(checked)) {\n      elem = checked;\n    } else if (recurse && checked.children.length > 0) {\n      elem = findOne(test, checked.children, true);\n    }\n  }\n\n  return elem;\n}\n/**\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\n\nexport function existsOne(test, nodes) {\n  return nodes.some(checked => isTag(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children)));\n}\n/**\n * Search and array of nodes and its children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\n\nexport function findAll(test, nodes) {\n  var _a;\n\n  const result = [];\n  const stack = nodes.filter(isTag);\n  let elem;\n\n  while (elem = stack.shift()) {\n    const children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(isTag);\n\n    if (children && children.length > 0) {\n      stack.unshift(...children);\n    }\n\n    if (test(elem)) result.push(elem);\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["isTag","hasChildren","filter","test","node","recurse","limit","Infinity","Array","isArray","find","nodes","result","elem","push","children","length","findOneChild","findOne","i","checked","existsOne","some","findAll","stack","shift","_a","unshift"],"sourceRoot":"https://raw.githubusercontent.com/fb55/domutils/f7e357b5c210b6731c2a60e0b7b3cfaa1f96b706/src/","sources":["querying.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}