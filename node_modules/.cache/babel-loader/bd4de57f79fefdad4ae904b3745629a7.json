{"ast":null,"code":"import { Parser } from \"./Parser.js\";\nexport { Parser };\nimport { DomHandler } from \"domhandler\";\nexport { DomHandler }; // Helper methods\n\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\n\nexport function parseDocument(data, options) {\n  const handler = new DomHandler(undefined, options);\n  new Parser(handler, options).end(data);\n  return handler.root;\n}\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\n\nexport function parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param cb A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\n\nexport function createDomStream(cb, options, elementCb) {\n  const handler = new DomHandler(cb, options, elementCb);\n  return new Parser(handler, options);\n}\nexport { default as Tokenizer } from \"./Tokenizer.js\";\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\n\nimport * as ElementType from \"domelementtype\";\nexport { ElementType };\nimport { getFeed } from \"domutils\";\nexport { getFeed };\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\n\nexport function parseFeed(feed) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    xmlMode: true\n  };\n  return getFeed(parseDOM(feed, options));\n}\nimport * as _DomUtils from \"domutils\";\nexport { _DomUtils as DomUtils }; // Old name for DomHandler\n\nexport { DomHandler as DefaultHandler };","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAsC,aAAtC;AACA,SAASA,MAAT;AAEA,SACIC,UADJ,QAMO,YANP;AAQA,SAASA,UAAT,G,CAIA;;AAEA;;;;;;;AAMA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAAsCC,OAAtC,EAAuD;EACzD,MAAMC,OAAO,GAAG,IAAIJ,UAAJ,CAAeK,SAAf,EAA0BF,OAA1B,CAAhB;EACA,IAAIJ,MAAJ,CAAWK,OAAX,EAAoBD,OAApB,EAA6BG,GAA7B,CAAiCJ,IAAjC;EACA,OAAOE,OAAO,CAACG,IAAf;AACH;AACD;;;;;;;;;;;AAUA,OAAM,SAAUC,QAAV,CAAmBN,IAAnB,EAAiCC,OAAjC,EAAkD;EACpD,OAAOF,aAAa,CAACC,IAAD,EAAOC,OAAP,CAAb,CAA6BM,QAApC;AACH;AACD;;;;;;;;AAOA,OAAM,SAAUC,eAAV,CACFC,EADE,EAEFR,OAFE,EAGFS,SAHE,EAGoC;EAEtC,MAAMR,OAAO,GAAG,IAAIJ,UAAJ,CAAeW,EAAf,EAAmBR,OAAnB,EAA4BS,SAA5B,CAAhB;EACA,OAAO,IAAIb,MAAJ,CAAWK,OAAX,EAAoBD,OAApB,CAAP;AACH;AAED,SACIU,OAAO,IAAIC,SADf,QAGO,gBAHP;AAKA;;;;;AAIA,OAAO,KAAKC,WAAZ,MAA6B,gBAA7B;AACA,SAASA,WAAT;AAEA,SAASC,OAAT,QAA8B,UAA9B;AAEA,SAASA,OAAT;AAEA;;;;;;;AAMA,OAAM,SAAUC,SAAV,CACFC,IADE,EAE4D;EAAA,IAA9Df,OAA8D,uEAAjB;IAAEgB,OAAO,EAAE;EAAX,CAAiB;EAE9D,OAAOH,OAAO,CAACR,QAAQ,CAACU,IAAD,EAAOf,OAAP,CAAT,CAAd;AACH;2BAEyB,U;sBAAdiB,Q,IAEZ;;AACA,SAASpB,UAAU,IAAIqB,cAAvB","names":["Parser","DomHandler","parseDocument","data","options","handler","undefined","end","root","parseDOM","children","createDomStream","cb","elementCb","default","Tokenizer","ElementType","getFeed","parseFeed","feed","xmlMode","DomUtils","DefaultHandler"],"sourceRoot":"https://raw.githubusercontent.com/fb55/htmlparser2/4763205746cd80120b5d2b69041197a394d24ba9/src/","sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}