{"ast":null,"code":"import { float } from './float.js';\nimport { array } from './array.js';\n\nfunction toTypedMapper(data) {\n  return Float32Array.from(data);\n}\n\nfunction fromTypedUnmapper(value) {\n  if (!(value instanceof Float32Array)) throw new Error('Unexpected type');\n  return [...value];\n}\n\nexport function float32Array() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return array(float(constraints), constraints).map(toTypedMapper, fromTypedUnmapper);\n}","map":{"version":3,"names":["float","array","toTypedMapper","data","Float32Array","from","fromTypedUnmapper","value","Error","float32Array","constraints","map"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/arbitrary/float32Array.js"],"sourcesContent":["import { float } from './float.js';\nimport { array } from './array.js';\nfunction toTypedMapper(data) {\n    return Float32Array.from(data);\n}\nfunction fromTypedUnmapper(value) {\n    if (!(value instanceof Float32Array))\n        throw new Error('Unexpected type');\n    return [...value];\n}\nexport function float32Array(constraints = {}) {\n    return array(float(constraints), constraints).map(toTypedMapper, fromTypedUnmapper);\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EACzB,OAAOC,YAAY,CAACC,IAAb,CAAkBF,IAAlB,CAAP;AACH;;AACD,SAASG,iBAAT,CAA2BC,KAA3B,EAAkC;EAC9B,IAAI,EAAEA,KAAK,YAAYH,YAAnB,CAAJ,EACI,MAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;EACJ,OAAO,CAAC,GAAGD,KAAJ,CAAP;AACH;;AACD,OAAO,SAASE,YAAT,GAAwC;EAAA,IAAlBC,WAAkB,uEAAJ,EAAI;EAC3C,OAAOT,KAAK,CAACD,KAAK,CAACU,WAAD,CAAN,EAAqBA,WAArB,CAAL,CAAuCC,GAAvC,CAA2CT,aAA3C,EAA0DI,iBAA1D,CAAP;AACH"},"metadata":{},"sourceType":"module"}