{"ast":null,"code":"const debug = require(\"debug\")(\"contract:utils\");\n\nconst web3Utils = require(\"web3-utils\");\n\nconst {\n  bigNumberify\n} = require(\"ethers/utils/bignumber\");\n\nconst abi = require(\"web3-eth-abi\");\n\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\n\nconst reformat = require(\"../reformat\");\n\nconst ens = require(\"./ens\");\n\nconst allowedTxParams = new Set([\"from\", \"to\", \"gas\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\", \"data\", \"nonce\", \"accessList\", \"type\", \"privateFor\", \"overwrite\"]);\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false; //NOTE: For some reason, contrary to the docs,\n    //web3Utils.isBigNumber returns true not only for\n    //bignumber.js BigNumbers, but also for ethers BigNumbers,\n    //even though these are totally different things.\n\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n\n  isTxParams(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n    return Object.keys(val).some(fieldName => allowedTxParams.has(fieldName));\n  },\n\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n    return logs.map(log => {\n      const logABI = constructor.events[log.topics[0]];\n      if (logABI == null) return null;\n      const copy = Utils.merge({}, log);\n      copy.event = logABI.name;\n      copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n      if (copy.data === \"0x\") copy.data = \"\";\n      let logArgs;\n\n      try {\n        logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n        copy.args = reformat.numbers.call(constructor, logArgs, logABI.inputs);\n      } catch (_) {\n        return null;\n      }\n\n      delete copy.data;\n      delete copy.topics;\n      return copy;\n    }).filter(log => log != null);\n  },\n\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    } // Or reformat items in the existing array\n\n\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n    return events;\n  },\n\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n\n    return merged;\n  },\n\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n    return bytecode;\n  },\n\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args) {\n    let ignoreDefaultGasPriceParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const constructor = this;\n    const expectedArgCount = methodABI ? methodABI.inputs.length : 0;\n    let txParams = {};\n    const lastArg = args[args.length - 1];\n\n    if (args.length === expectedArgCount + 1 && Utils.isTxParams(lastArg)) {\n      txParams = args.pop();\n    }\n\n    let defaultParams = constructor.class_defaults;\n\n    if (ignoreDefaultGasPriceParams) {\n      //this parameter is set when making calls (as opposed to transactions)\n      //gas price params can cause problems with those on some networks, so\n      //we ignore any defaults, and only include them if they were explicitly\n      //specified\n      defaultParams = { ...constructor.class_defaults\n      }; //clone\n\n      delete defaultParams.gasPrice;\n      delete defaultParams.maxFeePerGas;\n      delete defaultParams.maxPriorityFeePerGas;\n    }\n\n    return Utils.merge(defaultParams, txParams);\n  },\n\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinkedLibraries = constructor.binary.match(regex);\n\n    if (unlinkedLibraries !== null) {\n      unlinkedLibraries = unlinkedLibraries.map((name // Remove underscores\n      ) => name.replace(/_/g, \"\")).sort().filter((name, index, arr) => {\n        // Remove duplicates\n        if (index + 1 >= arr.length) {\n          return true;\n        }\n\n        return name !== arr[index + 1];\n      }).join(\", \");\n      const error = `${constructor.contractName} contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${constructor.contractName}: ${unlinkedLibraries}`;\n      throw new Error(error);\n    }\n  },\n\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item)); // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        //HACK: Since we can't rely on web3Utils.isBigNumber to tell\n        //whether we have a bignumber.js BigNumber, we'll just check\n        //whether it has the toFixed method\n        const stringValue = item.toFixed ? item.toFixed() //prevents use of scientific notation\n        : item.toString();\n        const ethersBN = bigNumberify(stringValue);\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of significant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n\n    const significantFigures = Math.min(decimal.toString().length - 1, // length less one because `.`\n    maxPrecision);\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const multiplier = Math.round(decimal * denominator);\n    const numerator = bigNumberify(multiplier).mul(bignum);\n    return numerator.div(denominator);\n  },\n\n  // checks if given contract instance has a set provider\n  checkProvider(_ref) {\n    let {\n      currentProvider,\n      contractName\n    } = _ref;\n    if (!currentProvider) throw new Error(`${contractName} error: Please call setProvider() first before calling new().`);\n  },\n\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch(_ref2) {\n    let {\n      networks,\n      network_id,\n      contractName\n    } = _ref2;\n    if (networks[network_id] == null) throw new Error(`${contractName} has not been deployed to detected network (network/artifact mismatch)`);\n  },\n\n  // verifies contract instance has been deployed\n  checkDeployment(_ref3) {\n    let {\n      isDeployed,\n      contractName,\n      network_id\n    } = _ref3;\n    if (!isDeployed()) throw new Error(`${contractName} has not been deployed to detected network (${network_id})`);\n  },\n\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\") throw new Error(`Cannot create instance of ${contractName}; no code at address ${address}`);\n  },\n\n  // parses known contract instance networks\n  async parseKnownNetworks(_ref4, gasLimit) {\n    let {\n      networks,\n      currentProvider,\n      setNetwork,\n      network_id\n    } = _ref4;\n\n    if (!networks && Object.keys(networks).length === 0) {\n      return false;\n    } // go through all the networks that are listed as\n    // blockchain uris and see if they match\n\n\n    for (const network in networks) {\n      if (network.startsWith(\"blockchain://\")) {\n        const networkMatches = await BlockchainUtils.matches(network, currentProvider);\n\n        if (networkMatches) {\n          setNetwork(network);\n          return {\n            id: network_id,\n            blockLimit: gasLimit\n          };\n        }\n      }\n    } // no match found!\n\n\n    return false;\n  },\n\n  // sets a contract instance network ID\n  async setInstanceNetworkID(TruffleContractInstance, chainNetworkID, gasLimit) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    } // chainNetworkID not present,\n    // parse all known networks\n\n\n    const matchedNetwork = await Utils.parseKnownNetworks(TruffleContractInstance, gasLimit);\n    if (matchedNetwork) return matchedNetwork; // network unknown, trust the provider and use given chainNetworkID\n\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return {\n      id: TruffleContractInstance.network_id,\n      blockLimit: gasLimit\n    };\n  }\n\n};\nUtils.ens = ens;\nUtils.bigNumberify = bigNumberify;\nmodule.exports = Utils;","map":{"version":3,"names":["debug","require","web3Utils","bigNumberify","abi","BlockchainUtils","reformat","ens","allowedTxParams","Set","Utils","is_object","val","Array","isArray","is_big_number","isBN","isBigNumber","isTxParams","Object","keys","some","fieldName","has","decodeLogs","_logs","isSingle","constructor","logs","toTruffleLog","map","log","logABI","events","topics","copy","merge","event","name","anonymous","slice","data","logArgs","decodeLog","inputs","args","numbers","call","_","filter","temp","push","raw","forEach","merged","prototype","arguments","i","length","object","j","key","value","linkBytecode","bytecode","links","library_name","library_address","regex","RegExp","replace","getTxParams","methodABI","ignoreDefaultGasPriceParams","expectedArgCount","txParams","lastArg","pop","defaultParams","class_defaults","gasPrice","maxFeePerGas","maxPriorityFeePerGas","checkLibraries","unlinkedLibraries","binary","match","sort","index","arr","join","error","contractName","Error","convertToEthersBN","original","converted","item","stringValue","toFixed","toString","ethersBN","multiplyBigNumberByDecimal","bignum","decimal","maxPrecision","significantFigures","Math","min","denominator","pow","multiplier","round","numerator","mul","div","checkProvider","currentProvider","checkNetworkArtifactMatch","networks","network_id","checkDeployment","isDeployed","checkCode","onChainCode","address","parseKnownNetworks","gasLimit","setNetwork","network","startsWith","networkMatches","matches","id","blockLimit","setInstanceNetworkID","TruffleContractInstance","chainNetworkID","hasNetwork","matchedNetwork","module","exports"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/@truffle/contract/lib/utils/index.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:utils\");\nconst web3Utils = require(\"web3-utils\");\nconst { bigNumberify } = require(\"ethers/utils/bignumber\");\nconst abi = require(\"web3-eth-abi\");\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\nconst reformat = require(\"../reformat\");\nconst ens = require(\"./ens\");\n\nconst allowedTxParams = new Set([\n  \"from\",\n  \"to\",\n  \"gas\",\n  \"gasPrice\",\n  \"maxFeePerGas\",\n  \"maxPriorityFeePerGas\",\n  \"value\",\n  \"data\",\n  \"nonce\",\n  \"accessList\",\n  \"type\",\n  \"privateFor\",\n  \"overwrite\"\n]);\n\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false;\n\n    //NOTE: For some reason, contrary to the docs,\n    //web3Utils.isBigNumber returns true not only for\n    //bignumber.js BigNumbers, but also for ethers BigNumbers,\n    //even though these are totally different things.\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n\n  isTxParams(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n    return Object.keys(val).some(fieldName => allowedTxParams.has(fieldName));\n  },\n\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n\n    return logs\n      .map(log => {\n        const logABI = constructor.events[log.topics[0]];\n\n        if (logABI == null) return null;\n\n        const copy = Utils.merge({}, log);\n\n        copy.event = logABI.name;\n        copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n\n        if (copy.data === \"0x\") copy.data = \"\";\n\n        let logArgs;\n        try {\n          logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n          copy.args = reformat.numbers.call(\n            constructor,\n            logArgs,\n            logABI.inputs\n          );\n        } catch (_) {\n          return null;\n        }\n\n        delete copy.data;\n        delete copy.topics;\n\n        return copy;\n      })\n      .filter(log => log != null);\n  },\n\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    }\n\n    // Or reformat items in the existing array\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n\n    return events;\n  },\n\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n\n    return merged;\n  },\n\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n\n    return bytecode;\n  },\n\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args, ignoreDefaultGasPriceParams = false) {\n    const constructor = this;\n\n    const expectedArgCount = methodABI ? methodABI.inputs.length : 0;\n\n    let txParams = {};\n    const lastArg = args[args.length - 1];\n\n    if (args.length === expectedArgCount + 1 && Utils.isTxParams(lastArg)) {\n      txParams = args.pop();\n    }\n\n    let defaultParams = constructor.class_defaults;\n    if (ignoreDefaultGasPriceParams) {\n      //this parameter is set when making calls (as opposed to transactions)\n      //gas price params can cause problems with those on some networks, so\n      //we ignore any defaults, and only include them if they were explicitly\n      //specified\n      defaultParams = { ...constructor.class_defaults }; //clone\n      delete defaultParams.gasPrice;\n      delete defaultParams.maxFeePerGas;\n      delete defaultParams.maxPriorityFeePerGas;\n    }\n\n    return Utils.merge(defaultParams, txParams);\n  },\n\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinkedLibraries = constructor.binary.match(regex);\n\n    if (unlinkedLibraries !== null) {\n      unlinkedLibraries = unlinkedLibraries\n        .map(\n          (\n            name // Remove underscores\n          ) => name.replace(/_/g, \"\")\n        )\n        .sort()\n        .filter((name, index, arr) => {\n          // Remove duplicates\n          if (index + 1 >= arr.length) {\n            return true;\n          }\n\n          return name !== arr[index + 1];\n        })\n        .join(\", \");\n\n      const error = `${constructor.contractName} contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${constructor.contractName}: ${unlinkedLibraries}`;\n\n      throw new Error(error);\n    }\n  },\n\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item));\n\n        // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        //HACK: Since we can't rely on web3Utils.isBigNumber to tell\n        //whether we have a bignumber.js BigNumber, we'll just check\n        //whether it has the toFixed method\n        const stringValue = item.toFixed\n          ? item.toFixed() //prevents use of scientific notation\n          : item.toString();\n        const ethersBN = bigNumberify(stringValue);\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of significant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n\n    const significantFigures = Math.min(\n      decimal.toString().length - 1, // length less one because `.`\n      maxPrecision\n    );\n\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const multiplier = Math.round(decimal * denominator);\n    const numerator = bigNumberify(multiplier).mul(bignum);\n\n    return numerator.div(denominator);\n  },\n\n  // checks if given contract instance has a set provider\n  checkProvider({ currentProvider, contractName }) {\n    if (!currentProvider)\n      throw new Error(\n        `${contractName} error: Please call setProvider() first before calling new().`\n      );\n  },\n\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch({ networks, network_id, contractName }) {\n    if (networks[network_id] == null)\n      throw new Error(\n        `${contractName} has not been deployed to detected network (network/artifact mismatch)`\n      );\n  },\n\n  // verifies contract instance has been deployed\n  checkDeployment({ isDeployed, contractName, network_id }) {\n    if (!isDeployed())\n      throw new Error(\n        `${contractName} has not been deployed to detected network (${network_id})`\n      );\n  },\n\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\")\n      throw new Error(\n        `Cannot create instance of ${contractName}; no code at address ${address}`\n      );\n  },\n\n  // parses known contract instance networks\n  async parseKnownNetworks(\n    { networks, currentProvider, setNetwork, network_id },\n    gasLimit\n  ) {\n    if (!networks && Object.keys(networks).length === 0) {\n      return false;\n    }\n    // go through all the networks that are listed as\n    // blockchain uris and see if they match\n    for (const network in networks) {\n      if (network.startsWith(\"blockchain://\")) {\n        const networkMatches = await BlockchainUtils.matches(\n          network,\n          currentProvider\n        );\n        if (networkMatches) {\n          setNetwork(network);\n          return {\n            id: network_id,\n            blockLimit: gasLimit\n          };\n        }\n      }\n    }\n    // no match found!\n    return false;\n  },\n\n  // sets a contract instance network ID\n  async setInstanceNetworkID(\n    TruffleContractInstance,\n    chainNetworkID,\n    gasLimit\n  ) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    }\n    // chainNetworkID not present,\n    // parse all known networks\n    const matchedNetwork = await Utils.parseKnownNetworks(\n      TruffleContractInstance,\n      gasLimit\n    );\n    if (matchedNetwork) return matchedNetwork;\n\n    // network unknown, trust the provider and use given chainNetworkID\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return { id: TruffleContractInstance.network_id, blockLimit: gasLimit };\n  }\n};\n\nUtils.ens = ens;\nUtils.bigNumberify = bigNumberify;\n\nmodule.exports = Utils;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}