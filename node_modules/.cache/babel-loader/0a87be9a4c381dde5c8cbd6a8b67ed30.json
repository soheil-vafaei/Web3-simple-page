{"ast":null,"code":"var lowerCase = require('lower-case');\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp');\n\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp');\n\nvar CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp');\n/**\n * Sentence case a string.\n *\n * @param  {string} str\n * @param  {string} locale\n * @param  {string} replacement\n * @return {string}\n */\n\n\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return '';\n  }\n\n  replacement = typeof replacement !== 'string' ? ' ' : replacement;\n\n  function replace(match, index, value) {\n    if (index === 0 || index === value.length - match.length) {\n      return '';\n    }\n\n    return replacement;\n  }\n\n  str = String(str) // Support camel case (\"camelCase\" -> \"camel Case\").\n  .replace(CAMEL_CASE_REGEXP, '$1 $2') // Support odd camel case (\"CAMELCase\" -> \"CAMEL Case\").\n  .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2') // Remove all non-word characters and replace with a single space.\n  .replace(NON_WORD_REGEXP, replace); // Lower case the entire string.\n\n  return lowerCase(str, locale);\n};","map":{"version":3,"names":["lowerCase","require","NON_WORD_REGEXP","CAMEL_CASE_REGEXP","CAMEL_CASE_UPPER_REGEXP","module","exports","str","locale","replacement","replace","match","index","value","length","String"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/change-case/node_modules/no-case/no-case.js"],"sourcesContent":["var lowerCase = require('lower-case')\n\nvar NON_WORD_REGEXP = require('./vendor/non-word-regexp')\nvar CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp')\nvar CAMEL_CASE_UPPER_REGEXP = require('./vendor/camel-case-upper-regexp')\n\n/**\n * Sentence case a string.\n *\n * @param  {string} str\n * @param  {string} locale\n * @param  {string} replacement\n * @return {string}\n */\nmodule.exports = function (str, locale, replacement) {\n  if (str == null) {\n    return ''\n  }\n\n  replacement = typeof replacement !== 'string' ? ' ' : replacement\n\n  function replace (match, index, value) {\n    if (index === 0 || index === (value.length - match.length)) {\n      return ''\n    }\n\n    return replacement\n  }\n\n  str = String(str)\n    // Support camel case (\"camelCase\" -> \"camel Case\").\n    .replace(CAMEL_CASE_REGEXP, '$1 $2')\n    // Support odd camel case (\"CAMELCase\" -> \"CAMEL Case\").\n    .replace(CAMEL_CASE_UPPER_REGEXP, '$1 $2')\n    // Remove all non-word characters and replace with a single space.\n    .replace(NON_WORD_REGEXP, replace)\n\n  // Lower case the entire string.\n  return lowerCase(str, locale)\n}\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIC,eAAe,GAAGD,OAAO,CAAC,0BAAD,CAA7B;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAA/B;;AACA,IAAIG,uBAAuB,GAAGH,OAAO,CAAC,kCAAD,CAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,WAAvB,EAAoC;EACnD,IAAIF,GAAG,IAAI,IAAX,EAAiB;IACf,OAAO,EAAP;EACD;;EAEDE,WAAW,GAAG,OAAOA,WAAP,KAAuB,QAAvB,GAAkC,GAAlC,GAAwCA,WAAtD;;EAEA,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;IACrC,IAAID,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAMC,KAAK,CAACC,MAAN,GAAeH,KAAK,CAACG,MAAnD,EAA4D;MAC1D,OAAO,EAAP;IACD;;IAED,OAAOL,WAAP;EACD;;EAEDF,GAAG,GAAGQ,MAAM,CAACR,GAAD,CAAN,CACJ;EADI,CAEHG,OAFG,CAEKP,iBAFL,EAEwB,OAFxB,EAGJ;EAHI,CAIHO,OAJG,CAIKN,uBAJL,EAI8B,OAJ9B,EAKJ;EALI,CAMHM,OANG,CAMKR,eANL,EAMsBQ,OANtB,CAAN,CAfmD,CAuBnD;;EACA,OAAOV,SAAS,CAACO,GAAD,EAAMC,MAAN,CAAhB;AACD,CAzBD"},"metadata":{},"sourceType":"script"}