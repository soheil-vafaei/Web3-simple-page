{"ast":null,"code":"import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\n\nfunction nat(arg) {\n  const max = typeof arg === 'number' ? arg : arg && arg.max !== undefined ? arg.max : 0x7fffffff;\n\n  if (max < 0) {\n    throw new Error('fc.nat value should be greater than or equal to 0');\n  }\n\n  if (!Number.isInteger(max)) {\n    throw new Error('fc.nat maximum value should be an integer');\n  }\n\n  return new IntegerArbitrary(0, max);\n}\n\nexport { nat };","map":{"version":3,"names":["IntegerArbitrary","nat","arg","max","undefined","Error","Number","isInteger"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/fast-check/lib/esm/arbitrary/nat.js"],"sourcesContent":["import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction nat(arg) {\n    const max = typeof arg === 'number' ? arg : arg && arg.max !== undefined ? arg.max : 0x7fffffff;\n    if (max < 0) {\n        throw new Error('fc.nat value should be greater than or equal to 0');\n    }\n    if (!Number.isInteger(max)) {\n        throw new Error('fc.nat maximum value should be an integer');\n    }\n    return new IntegerArbitrary(0, max);\n}\nexport { nat };\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kCAAjC;;AACA,SAASC,GAAT,CAAaC,GAAb,EAAkB;EACd,MAAMC,GAAG,GAAG,OAAOD,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCA,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYC,SAAnB,GAA+BF,GAAG,CAACC,GAAnC,GAAyC,UAArF;;EACA,IAAIA,GAAG,GAAG,CAAV,EAAa;IACT,MAAM,IAAIE,KAAJ,CAAU,mDAAV,CAAN;EACH;;EACD,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBJ,GAAjB,CAAL,EAA4B;IACxB,MAAM,IAAIE,KAAJ,CAAU,2CAAV,CAAN;EACH;;EACD,OAAO,IAAIL,gBAAJ,CAAqB,CAArB,EAAwBG,GAAxB,CAAP;AACH;;AACD,SAASF,GAAT"},"metadata":{},"sourceType":"module"}