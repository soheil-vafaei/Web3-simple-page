{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSkippedInMemoryStructs = exports.getMemoryAllocations = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:memory:allocate\");\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nfunction getMemoryAllocations(userDefinedTypes) {\n  let allocations = {};\n\n  for (const dataType of Object.values(userDefinedTypes)) {\n    if (dataType.typeClass === \"struct\") {\n      allocations[dataType.id] = allocateStruct(dataType);\n    }\n  }\n\n  return allocations;\n}\n\nexports.getMemoryAllocations = getMemoryAllocations;\n\nfunction isSkippedInMemoryStructs(dataType) {\n  if (dataType.typeClass === \"mapping\") {\n    return true;\n  } else if (dataType.typeClass === \"array\") {\n    return isSkippedInMemoryStructs(dataType.baseType);\n  } else {\n    return false;\n  }\n}\n\nexports.isSkippedInMemoryStructs = isSkippedInMemoryStructs; //unlike in storage and calldata, we'll just return the one allocation, nothing fancy\n//that's because allocating one struct can never necessitate allocating another\n\nfunction allocateStruct(dataType) {\n  let memberAllocations = [];\n  let position = 0;\n\n  for (const {\n    name,\n    type: memberType\n  } of dataType.memberTypes) {\n    const length = isSkippedInMemoryStructs(memberType) ? 0 : Evm.Utils.WORD_SIZE;\n    memberAllocations.push({\n      name,\n      type: memberType,\n      pointer: {\n        location: \"memory\",\n        start: position,\n        length\n      }\n    });\n    position += length;\n  }\n\n  return {\n    members: memberAllocations\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAMA,KAAK,GAAG,qBAAY,uBAAZ,CAAd;;AAOA;;AAKA,SAAgBC,oBAAhB,CACEC,gBADF,EAC0C;EAExC,IAAIC,WAAW,GAAsB,EAArC;;EACA,KAAK,MAAMC,QAAX,IAAuBC,MAAM,CAACC,MAAP,CAAcJ,gBAAd,CAAvB,EAAwD;IACtD,IAAIE,QAAQ,CAACG,SAAT,KAAuB,QAA3B,EAAqC;MACnCJ,WAAW,CAACC,QAAQ,CAACI,EAAV,CAAX,GAA2BC,cAAc,CAACL,QAAD,CAAzC;IACD;EACF;;EACD,OAAOD,WAAP;AACD;;AAVDO;;AAYA,SAAgBC,wBAAhB,CAAyCP,QAAzC,EAAoE;EAClE,IAAIA,QAAQ,CAACG,SAAT,KAAuB,SAA3B,EAAsC;IACpC,OAAO,IAAP;EACD,CAFD,MAEO,IAAIH,QAAQ,CAACG,SAAT,KAAuB,OAA3B,EAAoC;IACzC,OAAOI,wBAAwB,CAACP,QAAQ,CAACQ,QAAV,CAA/B;EACD,CAFM,MAEA;IACL,OAAO,KAAP;EACD;AACF;;AARDF,4D,CAUA;AACA;;AACA,SAASD,cAAT,CAAwBL,QAAxB,EAAyD;EACvD,IAAIS,iBAAiB,GAA6B,EAAlD;EACA,IAAIC,QAAQ,GAAG,CAAf;;EACA,KAAK,MAAM;IAAEC,IAAF;IAAQC,IAAI,EAAEC;EAAd,CAAX,IAAyCb,QAAQ,CAACc,WAAlD,EAA+D;IAC7D,MAAMC,MAAM,GAAGR,wBAAwB,CAACM,UAAD,CAAxB,GACX,CADW,GAEXG,GAAG,CAACC,KAAJ,CAAUC,SAFd;IAGAT,iBAAiB,CAACU,IAAlB,CAAuB;MACrBR,IADqB;MAErBC,IAAI,EAAEC,UAFe;MAGrBO,OAAO,EAAE;QACPC,QAAQ,EAAE,QADH;QAEPC,KAAK,EAAEZ,QAFA;QAGPK;MAHO;IAHY,CAAvB;IASAL,QAAQ,IAAIK,MAAZ;EACD;;EAED,OAAO;IACLQ,OAAO,EAAEd;EADJ,CAAP;AAGD","names":["debug","getMemoryAllocations","userDefinedTypes","allocations","dataType","Object","values","typeClass","id","allocateStruct","exports","isSkippedInMemoryStructs","baseType","memberAllocations","position","name","type","memberType","memberTypes","length","Evm","Utils","WORD_SIZE","push","pointer","location","start","members"],"sourceRoot":"","sources":["../../../../lib/memory/allocate/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}