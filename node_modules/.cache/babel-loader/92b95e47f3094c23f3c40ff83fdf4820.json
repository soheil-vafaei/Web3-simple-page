{"ast":null,"code":"import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\n\nexport function parseWithParse5(content, options, isDocument, context) {\n  const opts = {\n    scriptingEnabled: typeof options.scriptingEnabled === 'boolean' ? options.scriptingEnabled : true,\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo\n  };\n  return isDocument ? parseDocument(content, opts) : parseFragment(context, content, opts);\n}\nconst renderOpts = {\n  treeAdapter: htmlparser2Adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\n\nexport function renderWithParse5(dom) {\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n  const nodes = 'length' in dom ? dom : [dom];\n\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n\n    if (isDocument(node)) {\n      Array.prototype.splice.call(nodes, index, 1, ...node.children);\n    }\n  }\n\n  let result = '';\n\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    result += serializeOuter(node, renderOpts);\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAAA,SAA4BA,UAA5B,QAA0D,YAA1D;AACA,SAASC,KAAK,IAAIC,aAAlB,EAAiCC,aAAjC,EAAgDC,cAAhD,QAAsE,QAAtE;AACA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,iCAA9C;AAGA;;;;;;;;;;AASA,OAAM,SAAUC,eAAV,CACJC,OADI,EAEJC,OAFI,EAGJT,UAHI,EAIJU,OAJI,EAIsB;EAE1B,MAAMC,IAAI,GAAG;IACXC,gBAAgB,EACd,OAAOH,OAAO,CAACG,gBAAf,KAAoC,SAApC,GACIH,OAAO,CAACG,gBADZ,GAEI,IAJK;IAKXC,WAAW,EAAEP,kBALF;IAMXQ,sBAAsB,EAAEL,OAAO,CAACK;EANrB,CAAb;EASA,OAAOd,UAAU,GACbE,aAAa,CAACM,OAAD,EAAUG,IAAV,CADA,GAEbR,aAAa,CAACO,OAAD,EAAUF,OAAV,EAAmBG,IAAnB,CAFjB;AAGD;AAED,MAAMI,UAAU,GAAG;EAAEF,WAAW,EAAEP;AAAf,CAAnB;AAEA;;;;;;;AAMA,OAAM,SAAUU,gBAAV,CAA2BC,GAA3B,EAA4D;EAChE;;;;;EAKA,MAAMC,KAAK,GAAG,YAAYD,GAAZ,GAAkBA,GAAlB,GAAwB,CAACA,GAAD,CAAtC;;EACA,KAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,KAAK,CAACE,MAAlC,EAA0CD,KAAK,IAAI,CAAnD,EAAsD;IACpD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAD,CAAlB;;IACA,IAAInB,UAAU,CAACqB,IAAD,CAAd,EAAsB;MACpBC,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,IAAvB,CAA4BP,KAA5B,EAAmCC,KAAnC,EAA0C,CAA1C,EAA6C,GAAGE,IAAI,CAACK,QAArD;IACD;EACF;;EAED,IAAIC,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIR,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,KAAK,CAACE,MAAlC,EAA0CD,KAAK,IAAI,CAAnD,EAAsD;IACpD,MAAME,IAAI,GAAGH,KAAK,CAACC,KAAD,CAAlB;IACAQ,MAAM,IAAIvB,cAAc,CAACiB,IAAD,EAAON,UAAP,CAAxB;EACD;;EAED,OAAOY,MAAP;AACD","names":["isDocument","parse","parseDocument","parseFragment","serializeOuter","adapter","htmlparser2Adapter","parseWithParse5","content","options","context","opts","scriptingEnabled","treeAdapter","sourceCodeLocationInfo","renderOpts","renderWithParse5","dom","nodes","index","length","node","Array","prototype","splice","call","children","result"],"sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sources":["parsers/parse5-adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}