{"ast":null,"code":"import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { isSubarrayOf } from './helpers/IsSubarrayOf.js';\nimport { IntegerArbitrary } from './IntegerArbitrary.js';\nexport class SubarrayArbitrary extends Arbitrary {\n  constructor(originalArray, isOrdered, minLength, maxLength) {\n    super();\n    this.originalArray = originalArray;\n    this.isOrdered = isOrdered;\n    this.minLength = minLength;\n    this.maxLength = maxLength;\n    if (minLength < 0 || minLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n    if (maxLength < 0 || maxLength > originalArray.length) throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n    if (minLength > maxLength) throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n    this.lengthArb = new IntegerArbitrary(minLength, maxLength);\n    this.biasedLengthArb = minLength !== maxLength ? new IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2))) : this.lengthArb;\n  }\n\n  generate(mrng, biasFactor) {\n    const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n    const size = lengthArb.generate(mrng, undefined);\n    const sizeValue = size.value;\n    const remainingElements = this.originalArray.map((_v, idx) => idx);\n    const ids = [];\n\n    for (let index = 0; index !== sizeValue; ++index) {\n      const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n      ids.push(remainingElements[selectedIdIndex]);\n      remainingElements.splice(selectedIdIndex, 1);\n    }\n\n    if (this.isOrdered) {\n      ids.sort((a, b) => a - b);\n    }\n\n    return new Value(ids.map(i => this.originalArray[i]), size.context);\n  }\n\n  canShrinkWithoutContext(value) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n\n    if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n      return false;\n    }\n\n    return isSubarrayOf(this.originalArray, value);\n  }\n\n  shrink(value, context) {\n    if (value.length === 0) {\n      return Stream.nil();\n    }\n\n    return this.lengthArb.shrink(value.length, context).map(newSize => {\n      return new Value(value.slice(value.length - newSize.value), newSize.context);\n    }).join(value.length > this.minLength ? makeLazy(() => this.shrink(value.slice(1), undefined).filter(newValue => this.minLength <= newValue.value.length + 1).map(newValue => new Value([value[0]].concat(newValue.value), undefined))) : Stream.nil());\n  }\n\n}","map":{"version":3,"names":["Arbitrary","Value","makeLazy","Stream","isSubarrayOf","IntegerArbitrary","SubarrayArbitrary","constructor","originalArray","isOrdered","minLength","maxLength","length","Error","lengthArb","biasedLengthArb","Math","floor","log","generate","mrng","biasFactor","undefined","nextInt","size","sizeValue","value","remainingElements","map","_v","idx","ids","index","selectedIdIndex","push","splice","sort","a","b","i","context","canShrinkWithoutContext","Array","isArray","shrink","nil","newSize","slice","join","filter","newValue","concat"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/arbitrary/_internals/SubarrayArbitrary.js"],"sourcesContent":["import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { isSubarrayOf } from './helpers/IsSubarrayOf.js';\nimport { IntegerArbitrary } from './IntegerArbitrary.js';\nexport class SubarrayArbitrary extends Arbitrary {\n    constructor(originalArray, isOrdered, minLength, maxLength) {\n        super();\n        this.originalArray = originalArray;\n        this.isOrdered = isOrdered;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        if (minLength < 0 || minLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be between 0 and the size of the original array');\n        if (maxLength < 0 || maxLength > originalArray.length)\n            throw new Error('fc.*{s|S}ubarrayOf expects the maximal length to be between 0 and the size of the original array');\n        if (minLength > maxLength)\n            throw new Error('fc.*{s|S}ubarrayOf expects the minimal length to be inferior or equal to the maximal length');\n        this.lengthArb = new IntegerArbitrary(minLength, maxLength);\n        this.biasedLengthArb =\n            minLength !== maxLength\n                ? new IntegerArbitrary(minLength, minLength + Math.floor(Math.log(maxLength - minLength) / Math.log(2)))\n                : this.lengthArb;\n    }\n    generate(mrng, biasFactor) {\n        const lengthArb = biasFactor !== undefined && mrng.nextInt(1, biasFactor) === 1 ? this.biasedLengthArb : this.lengthArb;\n        const size = lengthArb.generate(mrng, undefined);\n        const sizeValue = size.value;\n        const remainingElements = this.originalArray.map((_v, idx) => idx);\n        const ids = [];\n        for (let index = 0; index !== sizeValue; ++index) {\n            const selectedIdIndex = mrng.nextInt(0, remainingElements.length - 1);\n            ids.push(remainingElements[selectedIdIndex]);\n            remainingElements.splice(selectedIdIndex, 1);\n        }\n        if (this.isOrdered) {\n            ids.sort((a, b) => a - b);\n        }\n        return new Value(ids.map((i) => this.originalArray[i]), size.context);\n    }\n    canShrinkWithoutContext(value) {\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        if (!this.lengthArb.canShrinkWithoutContext(value.length)) {\n            return false;\n        }\n        return isSubarrayOf(this.originalArray, value);\n    }\n    shrink(value, context) {\n        if (value.length === 0) {\n            return Stream.nil();\n        }\n        return this.lengthArb\n            .shrink(value.length, context)\n            .map((newSize) => {\n            return new Value(value.slice(value.length - newSize.value), newSize.context);\n        })\n            .join(value.length > this.minLength\n            ? makeLazy(() => this.shrink(value.slice(1), undefined)\n                .filter((newValue) => this.minLength <= newValue.value.length + 1)\n                .map((newValue) => new Value([value[0]].concat(newValue.value), undefined)))\n            : Stream.nil());\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}