{"ast":null,"code":"'use strict'; // detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\n\nconst INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n  let result = 0;\n  let maxUsed = 0;\n  let maxWeight = 0;\n\n  for (const entry of indents) {\n    // TODO: use destructuring when targeting Node.js 6\n    const key = entry[0];\n    const val = entry[1];\n    const u = val[0];\n    const w = val[1];\n\n    if (u > maxUsed || u === maxUsed && w > maxWeight) {\n      maxUsed = u;\n      maxWeight = w;\n      result = Number(key);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = str => {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  } // used to see if tabs or spaces are the most used\n\n\n  let tabs = 0;\n  let spaces = 0; // remember the size of previous line's indentation\n\n  let prev = 0; // remember how many indents/unindents as occurred for a given size\n  // and how much lines follow a given indentation\n  //\n  // indents = {\n  //    3: [1, 0],\n  //    4: [1, 5],\n  //    5: [1, 0],\n  //   12: [1, 0],\n  // }\n\n  const indents = new Map(); // pointer to the array of last used indent\n\n  let current; // whether the last action was an indent (opposed to an unindent)\n\n  let isIndent;\n\n  for (const line of str.split(/\\n/g)) {\n    if (!line) {\n      // ignore empty lines\n      continue;\n    }\n\n    let indent;\n    const matches = line.match(INDENT_RE);\n\n    if (matches) {\n      indent = matches[0].length;\n\n      if (matches[1]) {\n        spaces++;\n      } else {\n        tabs++;\n      }\n    } else {\n      indent = 0;\n    }\n\n    const diff = indent - prev;\n    prev = indent;\n\n    if (diff) {\n      // an indent or unindent has been detected\n      isIndent = diff > 0;\n      current = indents.get(isIndent ? diff : -diff);\n\n      if (current) {\n        current[0]++;\n      } else {\n        current = [1, 0];\n        indents.set(diff, current);\n      }\n    } else if (current) {\n      // if the last action was an indent, increment the weight\n      current[1] += Number(isIndent);\n    }\n  }\n\n  const amount = getMostUsed(indents);\n  let type;\n  let indent;\n\n  if (!amount) {\n    type = null;\n    indent = '';\n  } else if (spaces >= tabs) {\n    type = 'space';\n    indent = ' '.repeat(amount);\n  } else {\n    type = 'tab';\n    indent = '\\t'.repeat(amount);\n  }\n\n  return {\n    amount,\n    type,\n    indent\n  };\n};","map":{"version":3,"names":["INDENT_RE","getMostUsed","indents","result","maxUsed","maxWeight","entry","key","val","u","w","Number","module","exports","str","TypeError","tabs","spaces","prev","Map","current","isIndent","line","split","indent","matches","match","length","diff","get","set","amount","type","repeat"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/detect-indent/index.js"],"sourcesContent":["'use strict';\n\n// detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\nconst INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n\tlet result = 0;\n\tlet maxUsed = 0;\n\tlet maxWeight = 0;\n\n\tfor (const entry of indents) {\n\t\t// TODO: use destructuring when targeting Node.js 6\n\t\tconst key = entry[0];\n\t\tconst val = entry[1];\n\n\t\tconst u = val[0];\n\t\tconst w = val[1];\n\n\t\tif (u > maxUsed || (u === maxUsed && w > maxWeight)) {\n\t\t\tmaxUsed = u;\n\t\t\tmaxWeight = w;\n\t\t\tresult = Number(key);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nmodule.exports = str => {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// used to see if tabs or spaces are the most used\n\tlet tabs = 0;\n\tlet spaces = 0;\n\n\t// remember the size of previous line's indentation\n\tlet prev = 0;\n\n\t// remember how many indents/unindents as occurred for a given size\n\t// and how much lines follow a given indentation\n\t//\n\t// indents = {\n\t//    3: [1, 0],\n\t//    4: [1, 5],\n\t//    5: [1, 0],\n\t//   12: [1, 0],\n\t// }\n\tconst indents = new Map();\n\n\t// pointer to the array of last used indent\n\tlet current;\n\n\t// whether the last action was an indent (opposed to an unindent)\n\tlet isIndent;\n\n\tfor (const line of str.split(/\\n/g)) {\n\t\tif (!line) {\n\t\t\t// ignore empty lines\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet indent;\n\t\tconst matches = line.match(INDENT_RE);\n\n\t\tif (matches) {\n\t\t\tindent = matches[0].length;\n\n\t\t\tif (matches[1]) {\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\ttabs++;\n\t\t\t}\n\t\t} else {\n\t\t\tindent = 0;\n\t\t}\n\n\t\tconst diff = indent - prev;\n\t\tprev = indent;\n\n\t\tif (diff) {\n\t\t\t// an indent or unindent has been detected\n\n\t\t\tisIndent = diff > 0;\n\n\t\t\tcurrent = indents.get(isIndent ? diff : -diff);\n\n\t\t\tif (current) {\n\t\t\t\tcurrent[0]++;\n\t\t\t} else {\n\t\t\t\tcurrent = [1, 0];\n\t\t\t\tindents.set(diff, current);\n\t\t\t}\n\t\t} else if (current) {\n\t\t\t// if the last action was an indent, increment the weight\n\t\t\tcurrent[1] += Number(isIndent);\n\t\t}\n\t}\n\n\tconst amount = getMostUsed(indents);\n\n\tlet type;\n\tlet indent;\n\tif (!amount) {\n\t\ttype = null;\n\t\tindent = '';\n\t} else if (spaces >= tabs) {\n\t\ttype = 'space';\n\t\tindent = ' '.repeat(amount);\n\t} else {\n\t\ttype = 'tab';\n\t\tindent = '\\t'.repeat(amount);\n\t}\n\n\treturn {\n\t\tamount,\n\t\ttype,\n\t\tindent\n\t};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}