{"ast":null,"code":"/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\n;\n\n(function (GLOBAL) {\n  'use strict';\n\n  var Big,\n\n  /************************************** EDITABLE DEFAULTS *****************************************/\n  // The default values below must be integers within the stated ranges.\n\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\n  DP = 20,\n      // 0 to MAX_DP\n\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\n  RM = 1,\n      // 0, 1, 2 or 3\n  // The maximum value of DP and Big.DP.\n  MAX_DP = 1E6,\n      // 0 to 1000000\n  // The maximum magnitude of the exponent argument to the pow method.\n  MAX_POWER = 1E6,\n      // 1 to 1000000\n\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\n  NE = -7,\n      // 0 to -1000000\n\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n   */\n  PE = 21,\n      // 0 to 1000000\n\n  /*\r\n   * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n   * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n   * primitive number without a loss of precision.\r\n   */\n  STRICT = false,\n      // true or false\n\n  /**************************************************************************************************/\n  // Error messages.\n  NAME = '[big.js] ',\n      INVALID = NAME + 'Invalid ',\n      INVALID_DP = INVALID + 'decimal places',\n      INVALID_RM = INVALID + 'rounding mode',\n      DIV_BY_ZERO = NAME + 'Division by zero',\n      // The shared prototype object.\n  P = {},\n      UNDEFINED = void 0,\n      NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n  /*\r\n   * Create and return a Big constructor.\r\n   */\n\n  function _Big_() {\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\n    function Big(n) {\n      var x = this; // Enable constructor usage without new.\n\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n); // Duplicate.\n\n      if (n instanceof Big) {\n        x.s = n.s;\n        x.e = n.e;\n        x.c = n.c.slice();\n      } else {\n        if (typeof n !== 'string') {\n          if (Big.strict === true && typeof n !== 'bigint') {\n            throw TypeError(INVALID + 'value');\n          } // Minus zero?\n\n\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\n        }\n\n        parse(x, n);\n      } // Retain a reference to this Big constructor.\n      // Shadow Big.prototype.constructor which points to Object.\n\n\n      x.constructor = Big;\n    }\n\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.strict = STRICT;\n    Big.roundDown = 0;\n    Big.roundHalfUp = 1;\n    Big.roundHalfEven = 2;\n    Big.roundUp = 3;\n    return Big;\n  }\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\n\n\n  function parse(x, n) {\n    var e, i, nl;\n\n    if (!NUMERIC.test(n)) {\n      throw Error(INVALID + 'number');\n    } // Determine sign.\n\n\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1; // Decimal point?\n\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', ''); // Exponential form?\n\n    if ((i = n.search(/e/i)) > 0) {\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +n.slice(i + 1);\n      n = n.substring(0, i);\n    } else if (e < 0) {\n      // Integer.\n      e = n.length;\n    }\n\n    nl = n.length; // Determine leading zeros.\n\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n\n    if (i == nl) {\n      // Zero.\n      x.c = [x.e = 0];\n    } else {\n      // Determine trailing zeros.\n      for (; nl > 0 && n.charAt(--nl) == '0';);\n\n      x.e = e - i - 1;\n      x.c = []; // Convert string to array of digits without leading/trailing zeros.\n\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n\n    return x;\n  }\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\n\n\n  function round(x, sd, rm, more) {\n    var xc = x.c;\n    if (rm === UNDEFINED) rm = x.constructor.RM;\n\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\n      throw Error(INVALID_RM);\n    }\n\n    if (sd < 1) {\n      more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));\n      xc.length = 1;\n\n      if (more) {\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n        x.e = x.e - sd + 1;\n        xc[0] = 1;\n      } else {\n        // Zero.\n        xc[0] = x.e = 0;\n      }\n    } else if (sd < xc.length) {\n      // xc[sd] is the digit after the digit that may be rounded up.\n      more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]); // Remove any digits after the required precision.\n\n      xc.length = sd; // Round up?\n\n      if (more) {\n        // Rounding up may mean the previous digit has to be rounded up.\n        for (; ++xc[--sd] > 9;) {\n          xc[sd] = 0;\n\n          if (sd === 0) {\n            ++x.e;\n            xc.unshift(1);\n            break;\n          }\n        }\n      } // Remove trailing zeros.\n\n\n      for (sd = xc.length; !xc[--sd];) xc.pop();\n    }\n\n    return x;\n  }\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\n\n\n  function stringify(x, doExponential, isNonzero) {\n    var e = x.e,\n        s = x.c.join(''),\n        n = s.length; // Exponential notation?\n\n    if (doExponential) {\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e; // Normal notation.\n    } else if (e < 0) {\n      for (; ++e;) s = '0' + s;\n\n      s = '0.' + s;\n    } else if (e > 0) {\n      if (++e > n) {\n        for (e -= n; e--;) s += '0';\n      } else if (e < n) {\n        s = s.slice(0, e) + '.' + s.slice(e);\n      }\n    } else if (n > 1) {\n      s = s.charAt(0) + '.' + s.slice(1);\n    }\n\n    return x.s < 0 && isNonzero ? '-' + s : s;\n  } // Prototype/instance methods\n\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\n\n\n  P.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n  };\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\n\n\n  P.cmp = function (y) {\n    var isneg,\n        x = this,\n        xc = x.c,\n        yc = (y = new x.constructor(y)).c,\n        i = x.s,\n        j = y.s,\n        k = x.e,\n        l = y.e; // Either zero?\n\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i; // Signs differ?\n\n    if (i != j) return i;\n    isneg = i < 0; // Compare exponents.\n\n    if (k != l) return k > l ^ isneg ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l; // Compare digit by digit.\n\n    for (i = -1; ++i < j;) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    } // Compare lengths.\n\n\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\n\n\n  P.div = function (y) {\n    var x = this,\n        Big = x.constructor,\n        a = x.c,\n        // dividend\n    b = (y = new Big(y)).c,\n        // divisor\n    k = x.s == y.s ? 1 : -1,\n        dp = Big.DP;\n\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n      throw Error(INVALID_DP);\n    } // Divisor is zero?\n\n\n    if (!b[0]) {\n      throw Error(DIV_BY_ZERO);\n    } // Dividend is 0? Return +-0.\n\n\n    if (!a[0]) {\n      y.s = k;\n      y.c = [y.e = 0];\n      return y;\n    }\n\n    var bl,\n        bt,\n        n,\n        cmp,\n        ri,\n        bz = b.slice(),\n        ai = bl = b.length,\n        al = a.length,\n        r = a.slice(0, bl),\n        // remainder\n    rl = r.length,\n        q = y,\n        // quotient\n    qc = q.c = [],\n        qi = 0,\n        p = dp + (q.e = x.e - y.e) + 1; // precision of the result\n\n    q.s = k;\n    k = p < 0 ? 0 : p; // Create version of divisor with leading zero.\n\n    bz.unshift(0); // Add zeros to make remainder as long as divisor.\n\n    for (; rl++ < bl;) r.push(0);\n\n    do {\n      // n is how many times the divisor goes into current remainder.\n      for (n = 0; n < 10; n++) {\n        // Compare divisor and remainder.\n        if (bl != (rl = r.length)) {\n          cmp = bl > rl ? 1 : -1;\n        } else {\n          for (ri = -1, cmp = 0; ++ri < bl;) {\n            if (b[ri] != r[ri]) {\n              cmp = b[ri] > r[ri] ? 1 : -1;\n              break;\n            }\n          }\n        } // If divisor < remainder, subtract divisor from remainder.\n\n\n        if (cmp < 0) {\n          // Remainder can't be more than 1 digit longer than divisor.\n          // Equalise lengths using divisor with extra leading zero?\n          for (bt = rl == bl ? b : bz; rl;) {\n            if (r[--rl] < bt[rl]) {\n              ri = rl;\n\n              for (; ri && !r[--ri];) r[ri] = 9;\n\n              --r[ri];\n              r[rl] += 10;\n            }\n\n            r[rl] -= bt[rl];\n          }\n\n          for (; !r[0];) r.shift();\n        } else {\n          break;\n        }\n      } // Add the digit n to the result array.\n\n\n      qc[qi++] = cmp ? n : ++n; // Update the remainder.\n\n      if (r[0] && cmp) r[rl] = a[ai] || 0;else r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--); // Leading zero? Do not remove if result is simply zero (qi == 1).\n\n\n    if (!qc[0] && qi != 1) {\n      // There can't be more than one zero.\n      qc.shift();\n      q.e--;\n      p--;\n    } // Round?\n\n\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\n    return q;\n  };\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\n\n\n  P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\n\n\n  P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\n\n\n  P.gte = function (y) {\n    return this.cmp(y) > -1;\n  };\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\n\n\n  P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\n\n\n  P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\n\n\n  P.minus = P.sub = function (y) {\n    var i,\n        j,\n        t,\n        xlty,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s; // Signs differ?\n\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xc = x.c.slice(),\n        xe = x.e,\n        yc = y.c,\n        ye = y.e; // Either zero?\n\n    if (!xc[0] || !yc[0]) {\n      if (yc[0]) {\n        y.s = -b;\n      } else if (xc[0]) {\n        y = new Big(x);\n      } else {\n        y.s = 1;\n      }\n\n      return y;\n    } // Determine which is the bigger number. Prepend zeros to equalise exponents.\n\n\n    if (a = xe - ye) {\n      if (xlty = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse();\n\n      for (b = a; b--;) t.push(0);\n\n      t.reverse();\n    } else {\n      // Exponents equal. Check digit by digit.\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xlty = xc[b] < yc[b];\n          break;\n        }\n      }\n    } // x < y? Point xc to the array of the bigger number.\n\n\n    if (xlty) {\n      t = xc;\n      xc = yc;\n      yc = t;\n      y.s = -y.s;\n    }\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\n\n\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0; // Subtract yc from xc.\n\n    for (b = i; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i];) xc[i] = 9;\n\n        --xc[i];\n        xc[j] += 10;\n      }\n\n      xc[j] -= yc[j];\n    } // Remove trailing zeros.\n\n\n    for (; xc[--b] === 0;) xc.pop(); // Remove leading zeros and adjust exponent accordingly.\n\n\n    for (; xc[0] === 0;) {\n      xc.shift();\n      --ye;\n    }\n\n    if (!xc[0]) {\n      // n - n = +0\n      y.s = 1; // Result must be zero.\n\n      xc = [ye = 0];\n    }\n\n    y.c = xc;\n    y.e = ye;\n    return y;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\n\n\n  P.mod = function (y) {\n    var ygtx,\n        x = this,\n        Big = x.constructor,\n        a = x.s,\n        b = (y = new Big(y)).s;\n\n    if (!y.c[0]) {\n      throw Error(DIV_BY_ZERO);\n    }\n\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx) return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\n\n\n  P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return x;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\n\n\n  P.plus = P.add = function (y) {\n    var e,\n        k,\n        t,\n        x = this,\n        Big = x.constructor;\n    y = new Big(y); // Signs differ?\n\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n\n    var xe = x.e,\n        xc = x.c,\n        ye = y.e,\n        yc = y.c; // Either zero?\n\n    if (!xc[0] || !yc[0]) {\n      if (!yc[0]) {\n        if (xc[0]) {\n          y = new Big(x);\n        } else {\n          y.s = x.s;\n        }\n      }\n\n      return y;\n    }\n\n    xc = xc.slice(); // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n\n    if (e = xe - ye) {\n      if (e > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        e = -e;\n        t = xc;\n      }\n\n      t.reverse();\n\n      for (; e--;) t.push(0);\n\n      t.reverse();\n    } // Point xc to the longer array.\n\n\n    if (xc.length - yc.length < 0) {\n      t = yc;\n      yc = xc;\n      xc = t;\n    }\n\n    e = yc.length; // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0; // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n    if (k) {\n      xc.unshift(k);\n      ++ye;\n    } // Remove trailing zeros.\n\n\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\n\n    y.c = xc;\n    y.e = ye;\n    return y;\n  };\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\n\n\n  P.pow = function (n) {\n    var x = this,\n        one = new x.constructor('1'),\n        y = one,\n        isneg = n < 0;\n\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n      throw Error(INVALID + 'exponent');\n    }\n\n    if (isneg) n = -n;\n\n    for (;;) {\n      if (n & 1) y = y.times(x);\n      n >>= 1;\n      if (!n) break;\n      x = x.times(x);\n    }\n\n    return isneg ? one.div(y) : y;\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\n\n\n  P.prec = function (sd, rm) {\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n      throw Error(INVALID + 'precision');\n    }\n\n    return round(new this.constructor(this), sd, rm);\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\n\n\n  P.round = function (dp, rm) {\n    if (dp === UNDEFINED) dp = 0;else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\n      throw Error(INVALID_DP);\n    }\n    return round(new this.constructor(this), dp + this.e + 1, rm);\n  };\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\n\n\n  P.sqrt = function () {\n    var r,\n        c,\n        t,\n        x = this,\n        Big = x.constructor,\n        s = x.s,\n        e = x.e,\n        half = new Big('0.5'); // Zero?\n\n    if (!x.c[0]) return new Big(x); // Negative?\n\n    if (s < 0) {\n      throw Error(NAME + 'No square root');\n    } // Estimate.\n\n\n    s = Math.sqrt(x + ''); // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n\n    if (s === 0 || s === 1 / 0) {\n      c = x.c.join('');\n      if (!(c.length + e & 1)) c += '0';\n      s = Math.sqrt(c);\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    } else {\n      r = new Big(s + '');\n    }\n\n    e = r.e + (Big.DP += 4); // Newton-Raphson iteration.\n\n    do {\n      t = r;\n      r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n  };\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\n\n\n  P.times = P.mul = function (y) {\n    var c,\n        x = this,\n        Big = x.constructor,\n        xc = x.c,\n        yc = (y = new Big(y)).c,\n        a = xc.length,\n        b = yc.length,\n        i = x.e,\n        j = y.e; // Determine sign of result.\n\n    y.s = x.s == y.s ? 1 : -1; // Return signed 0 if either 0.\n\n    if (!xc[0] || !yc[0]) {\n      y.c = [y.e = 0];\n      return y;\n    } // Initialise exponent of result as x.e + y.e.\n\n\n    y.e = i + j; // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n\n    if (a < b) {\n      c = xc;\n      xc = yc;\n      yc = c;\n      j = a;\n      a = b;\n      b = j;\n    } // Initialise coefficient array of result with zeros.\n\n\n    for (c = new Array(j = a + b); j--;) c[j] = 0; // Multiply.\n    // i is initially xc.length.\n\n\n    for (i = b; i--;) {\n      b = 0; // a is yc.length.\n\n      for (j = a + i; j > i;) {\n        // Current sum of products at this digit position, plus carry.\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\n        c[j--] = b % 10; // carry\n\n        b = b / 10 | 0;\n      }\n\n      c[j] = b;\n    } // Increment result exponent if there is a final carry, otherwise remove leading zero.\n\n\n    if (b) ++y.e;else c.shift(); // Remove trailing zeros.\n\n    for (i = c.length; !c[--i];) c.pop();\n\n    y.c = c;\n    return y;\n  };\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\n\n\n  P.toExponential = function (dp, rm) {\n    var x = this,\n        n = x.c[0];\n\n    if (dp !== UNDEFINED) {\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n      }\n\n      x = round(new x.constructor(x), ++dp, rm);\n\n      for (; x.c.length < dp;) x.c.push(0);\n    }\n\n    return stringify(x, true, !!n);\n  };\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\n\n\n  P.toFixed = function (dp, rm) {\n    var x = this,\n        n = x.c[0];\n\n    if (dp !== UNDEFINED) {\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n      }\n\n      x = round(new x.constructor(x), dp + x.e + 1, rm); // x.e may have changed if the value is rounded up.\n\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\n    }\n\n    return stringify(x, false, !!n);\n  };\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\n\n\n  P.toJSON = P.toString = function () {\n    var x = this,\n        Big = x.constructor;\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n  };\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\n\n\n  P.toNumber = function () {\n    var n = Number(stringify(this, true, true));\n\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\n      throw Error(NAME + 'Imprecise conversion');\n    }\n\n    return n;\n  };\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\n\n\n  P.toPrecision = function (sd, rm) {\n    var x = this,\n        Big = x.constructor,\n        n = x.c[0];\n\n    if (sd !== UNDEFINED) {\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n        throw Error(INVALID + 'precision');\n      }\n\n      x = round(new Big(x), sd, rm);\n\n      for (; x.c.length < sd;) x.c.push(0);\n    }\n\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n  };\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\n\n\n  P.valueOf = function () {\n    var x = this,\n        Big = x.constructor;\n\n    if (Big.strict === true) {\n      throw Error(NAME + 'valueOf disallowed');\n    }\n\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n  }; // Export\n\n\n  Big = _Big_();\n  Big['default'] = Big.Big = Big; //AMD.\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Big;\n    }); // Node and other CommonJS-like environments that support module.exports.\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Big; //Browser.\n  } else {\n    GLOBAL.Big = Big;\n  }\n})(this);","map":{"version":3,"names":["GLOBAL","Big","DP","RM","MAX_DP","MAX_POWER","NE","PE","STRICT","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","_Big_","n","x","s","e","c","slice","strict","TypeError","String","parse","constructor","prototype","roundDown","roundHalfUp","roundHalfEven","roundUp","i","nl","test","Error","charAt","indexOf","replace","search","substring","length","round","sd","rm","more","xc","unshift","pop","stringify","doExponential","isNonzero","join","abs","cmp","y","isneg","yc","j","k","l","div","a","b","dp","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","p","push","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","neg","add","pow","one","prec","sqrt","half","Math","toExponential","mul","Array","toFixed","toJSON","toString","toNumber","Number","toPrecision","valueOf","define","amd","module","exports"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/@truffle/codec/node_modules/big.js/big.js"],"sourcesContent":["/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true && typeof n !== 'bigint') {\r\n            throw TypeError(INVALID + 'value');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n        rm === 1 && xc[0] >= 5 ||\r\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n      );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[--sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (sd === 0) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n  \r\n  \r\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\r\n  P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}