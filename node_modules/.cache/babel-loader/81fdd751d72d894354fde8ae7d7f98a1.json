{"ast":null,"code":"import { stream, Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { add64, halve64, isEqual64, isStrictlyNegative64, isStrictlyPositive64, isStrictlySmaller64, isZero64, logLike64, substract64, Unit64, Zero64 } from './helpers/ArrayInt64.js';\n\nclass ArrayInt64Arbitrary extends Arbitrary {\n  constructor(min, max) {\n    super();\n    this.min = min;\n    this.max = max;\n    this.biasedRanges = null;\n  }\n\n  generate(mrng, biasFactor) {\n    const range = this.computeGenerateRange(mrng, biasFactor);\n    const uncheckedValue = mrng.nextArrayInt(range.min, range.max);\n\n    if (uncheckedValue.data.length === 1) {\n      uncheckedValue.data.unshift(0);\n    }\n\n    return new Value(uncheckedValue, undefined);\n  }\n\n  computeGenerateRange(mrng, biasFactor) {\n    if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n      return {\n        min: this.min,\n        max: this.max\n      };\n    }\n\n    const ranges = this.retrieveBiasedRanges();\n\n    if (ranges.length === 1) {\n      return ranges[0];\n    }\n\n    const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n    return id < 0 ? ranges[0] : ranges[id + 1];\n  }\n\n  canShrinkWithoutContext(value) {\n    const unsafeValue = value;\n    return typeof value === 'object' && value !== null && (unsafeValue.sign === -1 || unsafeValue.sign === 1) && Array.isArray(unsafeValue.data) && unsafeValue.data.length === 2 && (isStrictlySmaller64(this.min, unsafeValue) && isStrictlySmaller64(unsafeValue, this.max) || isEqual64(this.min, unsafeValue) || isEqual64(this.max, unsafeValue));\n  }\n\n  shrinkArrayInt64(value, target, tryTargetAsap) {\n    const realGap = substract64(value, target);\n\n    function* shrinkGen() {\n      let previous = tryTargetAsap ? undefined : target;\n      const gap = tryTargetAsap ? realGap : halve64(realGap);\n\n      for (let toremove = gap; !isZero64(toremove); toremove = halve64(toremove)) {\n        const next = substract64(value, toremove);\n        yield new Value(next, previous);\n        previous = next;\n      }\n    }\n\n    return stream(shrinkGen());\n  }\n\n  shrink(current, context) {\n    if (!ArrayInt64Arbitrary.isValidContext(current, context)) {\n      const target = this.defaultTarget();\n      return this.shrinkArrayInt64(current, target, true);\n    }\n\n    if (this.isLastChanceTry(current, context)) {\n      return Stream.of(new Value(context, undefined));\n    }\n\n    return this.shrinkArrayInt64(current, context, false);\n  }\n\n  defaultTarget() {\n    if (!isStrictlyPositive64(this.min) && !isStrictlyNegative64(this.max)) {\n      return Zero64;\n    }\n\n    return isStrictlyNegative64(this.min) ? this.max : this.min;\n  }\n\n  isLastChanceTry(current, context) {\n    if (isZero64(current)) {\n      return false;\n    }\n\n    if (current.sign === 1) {\n      return isEqual64(current, add64(context, Unit64)) && isStrictlyPositive64(substract64(current, this.min));\n    } else {\n      return isEqual64(current, substract64(context, Unit64)) && isStrictlyNegative64(substract64(current, this.max));\n    }\n  }\n\n  static isValidContext(_current, context) {\n    if (context === undefined) {\n      return false;\n    }\n\n    if (typeof context !== 'object' || context === null || !('sign' in context) || !('data' in context)) {\n      throw new Error(`Invalid context type passed to ArrayInt64Arbitrary (#1)`);\n    }\n\n    return true;\n  }\n\n  retrieveBiasedRanges() {\n    if (this.biasedRanges != null) {\n      return this.biasedRanges;\n    }\n\n    if (isEqual64(this.min, this.max)) {\n      this.biasedRanges = [{\n        min: this.min,\n        max: this.max\n      }];\n      return this.biasedRanges;\n    }\n\n    const minStrictlySmallerZero = isStrictlyNegative64(this.min);\n    const maxStrictlyGreaterZero = isStrictlyPositive64(this.max);\n\n    if (minStrictlySmallerZero && maxStrictlyGreaterZero) {\n      const logMin = logLike64(this.min);\n      const logMax = logLike64(this.max);\n      this.biasedRanges = [{\n        min: logMin,\n        max: logMax\n      }, {\n        min: substract64(this.max, logMax),\n        max: this.max\n      }, {\n        min: this.min,\n        max: substract64(this.min, logMin)\n      }];\n    } else {\n      const logGap = logLike64(substract64(this.max, this.min));\n      const arbCloseToMin = {\n        min: this.min,\n        max: add64(this.min, logGap)\n      };\n      const arbCloseToMax = {\n        min: substract64(this.max, logGap),\n        max: this.max\n      };\n      this.biasedRanges = minStrictlySmallerZero ? [arbCloseToMax, arbCloseToMin] : [arbCloseToMin, arbCloseToMax];\n    }\n\n    return this.biasedRanges;\n  }\n\n}\n\nexport function arrayInt64(min, max) {\n  const arb = new ArrayInt64Arbitrary(min, max);\n  return arb;\n}","map":{"version":3,"names":["stream","Stream","Arbitrary","Value","add64","halve64","isEqual64","isStrictlyNegative64","isStrictlyPositive64","isStrictlySmaller64","isZero64","logLike64","substract64","Unit64","Zero64","ArrayInt64Arbitrary","constructor","min","max","biasedRanges","generate","mrng","biasFactor","range","computeGenerateRange","uncheckedValue","nextArrayInt","data","length","unshift","undefined","nextInt","ranges","retrieveBiasedRanges","id","canShrinkWithoutContext","value","unsafeValue","sign","Array","isArray","shrinkArrayInt64","target","tryTargetAsap","realGap","shrinkGen","previous","gap","toremove","next","shrink","current","context","isValidContext","defaultTarget","isLastChanceTry","of","_current","Error","minStrictlySmallerZero","maxStrictlyGreaterZero","logMin","logMax","logGap","arbCloseToMin","arbCloseToMax","arrayInt64","arb"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/arbitrary/_internals/ArrayInt64Arbitrary.js"],"sourcesContent":["import { stream, Stream } from '../../stream/Stream.js';\nimport { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { add64, halve64, isEqual64, isStrictlyNegative64, isStrictlyPositive64, isStrictlySmaller64, isZero64, logLike64, substract64, Unit64, Zero64, } from './helpers/ArrayInt64.js';\nclass ArrayInt64Arbitrary extends Arbitrary {\n    constructor(min, max) {\n        super();\n        this.min = min;\n        this.max = max;\n        this.biasedRanges = null;\n    }\n    generate(mrng, biasFactor) {\n        const range = this.computeGenerateRange(mrng, biasFactor);\n        const uncheckedValue = mrng.nextArrayInt(range.min, range.max);\n        if (uncheckedValue.data.length === 1) {\n            uncheckedValue.data.unshift(0);\n        }\n        return new Value(uncheckedValue, undefined);\n    }\n    computeGenerateRange(mrng, biasFactor) {\n        if (biasFactor === undefined || mrng.nextInt(1, biasFactor) !== 1) {\n            return { min: this.min, max: this.max };\n        }\n        const ranges = this.retrieveBiasedRanges();\n        if (ranges.length === 1) {\n            return ranges[0];\n        }\n        const id = mrng.nextInt(-2 * (ranges.length - 1), ranges.length - 2);\n        return id < 0 ? ranges[0] : ranges[id + 1];\n    }\n    canShrinkWithoutContext(value) {\n        const unsafeValue = value;\n        return (typeof value === 'object' &&\n            value !== null &&\n            (unsafeValue.sign === -1 || unsafeValue.sign === 1) &&\n            Array.isArray(unsafeValue.data) &&\n            unsafeValue.data.length === 2 &&\n            ((isStrictlySmaller64(this.min, unsafeValue) && isStrictlySmaller64(unsafeValue, this.max)) ||\n                isEqual64(this.min, unsafeValue) ||\n                isEqual64(this.max, unsafeValue)));\n    }\n    shrinkArrayInt64(value, target, tryTargetAsap) {\n        const realGap = substract64(value, target);\n        function* shrinkGen() {\n            let previous = tryTargetAsap ? undefined : target;\n            const gap = tryTargetAsap ? realGap : halve64(realGap);\n            for (let toremove = gap; !isZero64(toremove); toremove = halve64(toremove)) {\n                const next = substract64(value, toremove);\n                yield new Value(next, previous);\n                previous = next;\n            }\n        }\n        return stream(shrinkGen());\n    }\n    shrink(current, context) {\n        if (!ArrayInt64Arbitrary.isValidContext(current, context)) {\n            const target = this.defaultTarget();\n            return this.shrinkArrayInt64(current, target, true);\n        }\n        if (this.isLastChanceTry(current, context)) {\n            return Stream.of(new Value(context, undefined));\n        }\n        return this.shrinkArrayInt64(current, context, false);\n    }\n    defaultTarget() {\n        if (!isStrictlyPositive64(this.min) && !isStrictlyNegative64(this.max)) {\n            return Zero64;\n        }\n        return isStrictlyNegative64(this.min) ? this.max : this.min;\n    }\n    isLastChanceTry(current, context) {\n        if (isZero64(current)) {\n            return false;\n        }\n        if (current.sign === 1) {\n            return isEqual64(current, add64(context, Unit64)) && isStrictlyPositive64(substract64(current, this.min));\n        }\n        else {\n            return isEqual64(current, substract64(context, Unit64)) && isStrictlyNegative64(substract64(current, this.max));\n        }\n    }\n    static isValidContext(_current, context) {\n        if (context === undefined) {\n            return false;\n        }\n        if (typeof context !== 'object' || context === null || !('sign' in context) || !('data' in context)) {\n            throw new Error(`Invalid context type passed to ArrayInt64Arbitrary (#1)`);\n        }\n        return true;\n    }\n    retrieveBiasedRanges() {\n        if (this.biasedRanges != null) {\n            return this.biasedRanges;\n        }\n        if (isEqual64(this.min, this.max)) {\n            this.biasedRanges = [{ min: this.min, max: this.max }];\n            return this.biasedRanges;\n        }\n        const minStrictlySmallerZero = isStrictlyNegative64(this.min);\n        const maxStrictlyGreaterZero = isStrictlyPositive64(this.max);\n        if (minStrictlySmallerZero && maxStrictlyGreaterZero) {\n            const logMin = logLike64(this.min);\n            const logMax = logLike64(this.max);\n            this.biasedRanges = [\n                { min: logMin, max: logMax },\n                { min: substract64(this.max, logMax), max: this.max },\n                { min: this.min, max: substract64(this.min, logMin) },\n            ];\n        }\n        else {\n            const logGap = logLike64(substract64(this.max, this.min));\n            const arbCloseToMin = { min: this.min, max: add64(this.min, logGap) };\n            const arbCloseToMax = { min: substract64(this.max, logGap), max: this.max };\n            this.biasedRanges = minStrictlySmallerZero\n                ? [arbCloseToMax, arbCloseToMin]\n                : [arbCloseToMin, arbCloseToMax];\n        }\n        return this.biasedRanges;\n    }\n}\nexport function arrayInt64(min, max) {\n    const arb = new ArrayInt64Arbitrary(min, max);\n    return arb;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}