{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuorumDefinition = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst abi_coder_1 = require(\"ethers/utils/abi-coder\");\n\nexports.QuorumDefinition = {\n  initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // duck punch some of web3's output formatters\n      overrides.getBlock(web3);\n      overrides.getTransaction(web3);\n      overrides.getTransactionReceipt(web3);\n      overrides.decodeParameters(web3);\n    });\n  }\n\n};\nconst overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.getBlock is a function and doesn't\n  // have a `method` property, which it does\n  getBlock: web3 => {\n    // @ts-ignore\n    const _oldBlockFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getBlock.method.outputFormatter = block => {\n      const _oldTimestamp = block.timestamp;\n      const _oldGasLimit = block.gasLimit;\n      const _oldGasUsed = block.gasUsed; // Quorum uses nanoseconds instead of seconds in timestamp\n\n      let timestamp = new bn_js_1.default(block.timestamp.slice(2), 16);\n      timestamp = timestamp.div(new bn_js_1.default(10).pow(new bn_js_1.default(9)));\n      block.timestamp = \"0x\" + timestamp.toString(16); // Since we're overwriting the gasLimit/Used later,\n      // it doesn't matter what it is before the call\n      // The same applies to the timestamp, but I reduced\n      // the precision since there was an accurate representation\n      // We do this because Quorum can have large block/transaction\n      // gas limits\n\n      block.gasLimit = \"0x0\";\n      block.gasUsed = \"0x0\"; // @ts-ignore\n\n      let result = _oldBlockFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.timestamp = _oldTimestamp;\n      result.gasLimit = _oldGasLimit;\n      result.gasUsed = _oldGasUsed;\n      return result;\n    };\n  },\n  getTransaction: web3 => {\n    const _oldTransactionFormatter = // @ts-ignore\n    web3.eth.getTransaction.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransaction.method.outputFormatter = tx => {\n      const _oldGas = tx.gas;\n      tx.gas = \"0x0\";\n\n      let result = _oldTransactionFormatter.call( // @ts-ignore\n      web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gas = _oldGas;\n      return result;\n    };\n  },\n  getTransactionReceipt: web3 => {\n    const _oldTransactionReceiptFormatter = // @ts-ignore\n    web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore\n\n    web3.eth.getTransactionReceipt.method.outputFormatter = receipt => {\n      const _oldGasUsed = receipt.gasUsed;\n      receipt.gasUsed = \"0x0\";\n\n      let result = _oldTransactionReceiptFormatter.call( // @ts-ignore\n      web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,\n      // but the raw hexstrings work for the time being\n\n\n      result.gasUsed = _oldGasUsed;\n      return result;\n    };\n  },\n  // The primary difference between this decodeParameters function and web3's\n  // is that the 'Out of Gas?' zero/null bytes guard has been removed and any\n  // falsy bytes are interpreted as a zero value.\n  decodeParameters: web3 => {\n    const _oldDecodeParameters = web3.eth.abi.decodeParameters;\n    const ethersAbiCoder = new abi_coder_1.AbiCoder((type, value) => {\n      if (type.match(/^u?int/) && !Array.isArray(value) && (typeof value !== \"object\" || value.constructor.name !== \"BN\")) {\n        return value.toString();\n      }\n\n      return value;\n    }); // result method\n\n    function Result() {}\n\n    web3.eth.abi.decodeParameters = (outputs, bytes) => {\n      // if bytes is falsy, we'll pass 64 '0' bits to the ethers.js decoder.\n      // the decoder will decode the 64 '0' bits as a 0 value.\n      if (!bytes) bytes = \"0\".repeat(64);\n      const res = ethersAbiCoder.decode( //@ts-ignore 'mapTypes' not existing on type 'ABI'\n      web3.eth.abi.mapTypes(outputs), `0x${bytes.replace(/0x/i, \"\")}`); //@ts-ignore complaint regarding Result method\n\n      const returnValue = new Result();\n      returnValue.__length__ = 0;\n      outputs.forEach((output, i) => {\n        let decodedValue = res[returnValue.__length__];\n        decodedValue = decodedValue === \"0x\" ? null : decodedValue;\n        returnValue[i] = decodedValue; // @ts-ignore object not having name key\n\n        if (typeof output === \"object\" && output.name) {\n          // @ts-ignore object not having name key\n          returnValue[output.name] = decodedValue;\n        }\n\n        returnValue.__length__++;\n      });\n      return returnValue;\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["exports","initNetworkType","web3","overrides","getBlock","getTransaction","getTransactionReceipt","decodeParameters","_oldBlockFormatter","eth","method","outputFormatter","block","_oldTimestamp","timestamp","_oldGasLimit","gasLimit","_oldGasUsed","gasUsed","bn_js_1","slice","div","pow","toString","result","call","_oldTransactionFormatter","tx","_oldGas","gas","_oldTransactionReceiptFormatter","receipt","_oldDecodeParameters","abi","ethersAbiCoder","abi_coder_1","type","value","match","Array","isArray","constructor","name","Result","outputs","bytes","repeat","res","decode","mapTypes","replace","returnValue","__length__","forEach","output","i","decodedValue"],"sourceRoot":"","sources":["../../../lib/shim/overloads/quorum.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}