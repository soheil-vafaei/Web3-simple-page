{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapWithCases = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:wrap:dispatch\");\n\nconst Format = __importStar(require(\"../format\"));\n\nconst errors_1 = require(\"./errors\");\n\nfunction* wrapWithCases(dataType, input, wrapOptions, cases) {\n  let bestError;\n  const specificityFloor = wrapOptions.specificityFloor || 0;\n\n  for (const caseFn of cases) {\n    try {\n      return yield* caseFn(dataType, input, Object.assign(Object.assign({}, wrapOptions), {\n        specificityFloor: 0\n      }));\n    } catch (error) {\n      if (!(error instanceof errors_1.TypeMismatchError)) {\n        //rethrow unexpected errors\n        throw error;\n      } else if (!bestError || error.specificity > bestError.specificity) {\n        bestError = error;\n      }\n    }\n  } //if we've made it this far, no case has matched\n\n\n  if (bestError && bestError.specificity < specificityFloor) {\n    bestError.specificity = specificityFloor; //mutating this should be fine, right?\n  }\n\n  throw bestError || new errors_1.TypeMismatchError( //last-resort error\n  dataType, input, wrapOptions.name, specificityFloor, //it doesn't matter, but we'll make this error lowest specificity\n  `Input for ${wrapOptions.name} was not recognizable as type ${Format.Types.typeStringWithoutLocation(dataType)}`); //(note: we don't actually want to rely on the last-resort error, we'll\n  //instead prefer last-resort cases that just throw an error so we can get\n  //more specific messages, but I'm including this anyway just to be certain)\n}\n\nexports.wrapWithCases = wrapWithCases;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA,MAAMA,KAAK,GAAG,qBAAY,qBAAZ,CAAd;;AAEA;;AACA;;AAIA,UAAiBC,aAAjB,CAKEC,QALF,EAMEC,KANF,EAOEC,WAPF,EAQEC,KARF,EAQiD;EAE/C,IAAIC,SAAJ;EACA,MAAMC,gBAAgB,GAAGH,WAAW,CAACG,gBAAZ,IAAgC,CAAzD;;EACA,KAAK,MAAMC,MAAX,IAAqBH,KAArB,EAA4B;IAC1B,IAAI;MACF,OAAO,OAAOG,MAAM,CAClBN,QADkB,EAElBC,KAFkB,EAEbM,gCACAL,WADA,GACW;QAAEG,gBAAgB,EAAE;MAApB,CADX,CAFa,CAApB;IAKD,CAND,CAME,OAAOG,KAAP,EAAc;MACd,IAAI,EAAEA,KAAK,YAAYC,0BAAnB,CAAJ,EAA2C;QACzC;QACA,MAAMD,KAAN;MACD,CAHD,MAGO,IAAI,CAACJ,SAAD,IAAcI,KAAK,CAACE,WAAN,GAAoBN,SAAS,CAACM,WAAhD,EAA6D;QAClEN,SAAS,GAAGI,KAAZ;MACD;IACF;EACF,CAnB8C,CAoB/C;;;EACA,IAAIJ,SAAS,IAAIA,SAAS,CAACM,WAAV,GAAwBL,gBAAzC,EAA2D;IACzDD,SAAS,CAACM,WAAV,GAAwBL,gBAAxB,CADyD,CACf;EAC3C;;EACD,MAAMD,SAAS,IAAI,IAAIK,0BAAJ,EAAuB;EACxCT,QADiB,EAEjBC,KAFiB,EAGjBC,WAAW,CAACS,IAHK,EAIjBN,gBAJiB,EAIC;EAClB,aAAaH,WAAW,CAACS,IAAI,iCAAiCC,MAAM,CAACC,KAAP,CAAaC,yBAAb,CAAuCd,QAAvC,CAAgD,EAL7F,CAAnB,CAxB+C,CA+B/C;EACA;EACA;AACD;;AA1CDe","names":["debug","wrapWithCases","dataType","input","wrapOptions","cases","bestError","specificityFloor","caseFn","Object","error","errors_1","specificity","name","Format","Types","typeStringWithoutLocation","exports"],"sourceRoot":"","sources":["../../../lib/wrap/dispatch.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}