{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forBytecode = exports.forContract = void 0;\n\nfunction forContract(contract) {\n  const {\n    contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode,\n    deployedBytecode,\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  } = contract;\n  return {\n    contract_name: contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode: forBytecode(bytecode),\n    deployedBytecode: forBytecode(deployedBytecode),\n    unlinked_binary: forBytecode(bytecode),\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  };\n}\n\nexports.forContract = forContract;\n\nfunction forBytecode(bytecode) {\n  if (!bytecode) {\n    return bytecode;\n  }\n\n  if (typeof bytecode === \"string\") {\n    return bytecode;\n  }\n\n  let {\n    bytes,\n    linkReferences\n  } = bytecode;\n  linkReferences = linkReferences || []; // inline link references - start by flattening the offsets\n\n  const flattenedLinkReferences = linkReferences // map each link ref to array of link refs with only one offset\n  .map(_ref => {\n    let {\n      offsets,\n      length,\n      name\n    } = _ref;\n    return offsets.map(offset => ({\n      offset,\n      length,\n      name\n    }));\n  }) // flatten\n  .reduce((a, b) => [...a, ...b], []); // then overwite bytes with link reference\n\n  bytes = flattenedLinkReferences.reduce((bytes, _ref2) => {\n    let {\n      offset,\n      name,\n      length\n    } = _ref2;\n    // length is a byte offset\n    const characterLength = length * 2;\n    let linkId = `__${name.slice(0, characterLength - 2)}`;\n\n    while (linkId.length < characterLength) {\n      linkId += \"_\";\n    }\n\n    const start = offset * 2;\n    return `${bytes.substring(0, start)}${linkId}${bytes.substring(start + characterLength)}`;\n  }, bytes);\n  return `0x${bytes}`;\n}\n\nexports.forBytecode = forBytecode;","map":{"version":3,"mappings":";;;;;;;AAEA,SAAgBA,WAAhB,CAA4BC,QAA5B,EAAsD;EACpD,MAAM;IACJC,YADI;IAEJC,UAFI;IAGJC,MAHI;IAIJC,SAJI;IAKJC,iBALI;IAMJC,SANI;IAOJC,GAPI;IAQJC,GARI;IASJC,QATI;IAUJC,QAVI;IAWJC,gBAXI;IAYJC,QAZI;IAaJC,MAbI;IAcJC,OAdI;IAeJC,mBAfI;IAgBJC,gBAhBI;IAiBJC,wBAjBI;IAkBJC;EAlBI,IAmBFlB,QAnBJ;EAqBA,OAAO;IACLmB,aAAa,EAAElB,YADV;IAELC,UAFK;IAGLC,MAHK;IAILC,SAJK;IAKLC,iBALK;IAMLC,SANK;IAOLC,GAPK;IAQLC,GARK;IASLC,QATK;IAULC,QAAQ,EAAEU,WAAW,CAACV,QAAD,CAVhB;IAWLC,gBAAgB,EAAES,WAAW,CAACT,gBAAD,CAXxB;IAYLU,eAAe,EAAED,WAAW,CAACV,QAAD,CAZvB;IAaLE,QAbK;IAcLC,MAdK;IAeLC,OAfK;IAgBLC,mBAhBK;IAiBLC,gBAjBK;IAkBLC,wBAlBK;IAmBLC;EAnBK,CAAP;AAqBD;;AA3CDI;;AA6CA,SAAgBF,WAAhB,CAA4BV,QAA5B,EAAyC;EACvC,IAAI,CAACA,QAAL,EAAe;IACb,OAAOA,QAAP;EACD;;EACD,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IAChC,OAAOA,QAAP;EACD;;EAED,IAAI;IAAEa,KAAF;IAASC;EAAT,IAA4Bd,QAAhC;EAEAc,cAAc,GAAGA,cAAc,IAAI,EAAnC,CAVuC,CAYvC;;EACA,MAAMC,uBAAuB,GAAGD,cAAc,CAC5C;EAD4C,CAE3CE,GAF6B,CAEzB;IAAA,IAAC;MAAEC,OAAF;MAAWC,MAAX;MAAmBC;IAAnB,CAAD;IAAA,OACHF,OAAO,CAACD,GAAR,CAAYI,MAAM,KAAK;MAAEA,MAAF;MAAUF,MAAV;MAAkBC;IAAlB,CAAL,CAAlB,CADG;EAAA,CAFyB,EAK9B;EAL8B,CAM7BE,MAN6B,CAMtB,CAACC,CAAD,EAAcC,CAAd,KAA8B,CAAC,GAAGD,CAAJ,EAAO,GAAGC,CAAV,CANR,EAMsB,EANtB,CAAhC,CAbuC,CAqBvC;;EACAV,KAAK,GAAGE,uBAAuB,CAACM,MAAxB,CACN,CACER,KADF,YAGI;IAAA,IADF;MAAEO,MAAF;MAAUD,IAAV;MAAgBD;IAAhB,CACE;IACF;IACA,MAAMM,eAAe,GAAGN,MAAM,GAAG,CAAjC;IAEA,IAAIO,MAAM,GAAG,KAAKN,IAAI,CAACO,KAAL,CAAW,CAAX,EAAcF,eAAe,GAAG,CAAhC,CAAkC,EAApD;;IACA,OAAOC,MAAM,CAACP,MAAP,GAAgBM,eAAvB,EAAwC;MACtCC,MAAM,IAAI,GAAV;IACD;;IAED,MAAME,KAAK,GAAGP,MAAM,GAAG,CAAvB;IAEA,OAAO,GAAGP,KAAK,CAACe,SAAN,CAAgB,CAAhB,EAAmBD,KAAnB,CAAyB,GAAGF,MAAM,GAAGZ,KAAK,CAACe,SAAN,CAC7CD,KAAK,GAAGH,eADqC,CAE9C,EAFD;EAGD,CAlBK,EAmBNX,KAnBM,CAAR;EAsBA,OAAO,KAAKA,KAAK,EAAjB;AACD;;AA7CDD","names":["forContract","contract","contractName","sourcePath","source","sourceMap","deployedSourceMap","legacyAST","ast","abi","metadata","bytecode","deployedBytecode","compiler","devdoc","userdoc","immutableReferences","generatedSources","deployedGeneratedSources","db","contract_name","forBytecode","unlinked_binary","exports","bytes","linkReferences","flattenedLinkReferences","map","offsets","length","name","offset","reduce","a","b","characterLength","linkId","slice","start","substring"],"sourceRoot":"","sources":["../../../src/shims/NewToLegacy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}