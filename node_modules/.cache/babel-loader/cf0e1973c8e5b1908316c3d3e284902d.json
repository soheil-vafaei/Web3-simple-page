{"ast":null,"code":"/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\n/** @type LanguageFn */\nfunction elixir(hljs) {\n  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\\\?)?';\n  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  const ELIXIR_KEYWORDS = {\n    $pattern: ELIXIR_IDENT_RE,\n    keyword: 'and false then defined module in return redo retry end for true self when ' + 'next until do begin unless nil break not case cond alias while ensure or ' + 'include use alias fn quote require import with|0'\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /\\}/,\n    keywords: ELIXIR_KEYWORDS\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[1-9][0-9_]*(\\\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  const SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  const LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [{\n      endsParent: true,\n      contains: [{\n        contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n        variants: [{\n          begin: /\"/,\n          end: /\"/\n        }, {\n          begin: /'/,\n          end: /'/\n        }, {\n          begin: /\\//,\n          end: /\\//\n        }, {\n          begin: /\\|/,\n          end: /\\|/\n        }, {\n          begin: /\\(/,\n          end: /\\)/\n        }, {\n          begin: /\\[/,\n          end: /\\]/\n        }, {\n          begin: /\\{/,\n          end: /\\}/\n        }, {\n          begin: /</,\n          end: />/\n        }]\n      }]\n    }]\n  };\n  const UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [{\n      begin: /\"/,\n      end: /\"/\n    }, {\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\\//,\n      end: /\\//\n    }, {\n      begin: /\\|/,\n      end: /\\|/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      begin: /\\[/,\n      end: /\\]/\n    }, {\n      begin: /\\{/,\n      end: /\\}/\n    }, {\n      begin: /</,\n      end: />/\n    }]\n  };\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n    variants: [{\n      begin: /\"\"\"/,\n      end: /\"\"\"/\n    }, {\n      begin: /'''/,\n      end: /'''/\n    }, {\n      begin: /~S\"\"\"/,\n      end: /\"\"\"/,\n      contains: [] // override default\n\n    }, {\n      begin: /~S\"/,\n      end: /\"/,\n      contains: [] // override default\n\n    }, {\n      begin: /~S'''/,\n      end: /'''/,\n      contains: [] // override default\n\n    }, {\n      begin: /~S'/,\n      end: /'/,\n      contains: [] // override default\n\n    }, {\n      begin: /'/,\n      end: /'/\n    }, {\n      begin: /\"/,\n      end: /\"/\n    }]\n  };\n  const FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro',\n    end: /\\B\\b/,\n    // the mode is ended by the title\n    contains: [hljs.inherit(hljs.TITLE_MODE, {\n      begin: ELIXIR_IDENT_RE,\n      endsParent: true\n    })]\n  };\n  const CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\n    end: /\\bdo\\b|$|;/\n  });\n  const ELIXIR_DEFAULT_CONTAINS = [STRING, UPCASE_SIGIL, LOWERCASE_SIGIL, hljs.HASH_COMMENT_MODE, CLASS, FUNCTION, {\n    begin: '::'\n  }, {\n    className: 'symbol',\n    begin: ':(?![\\\\s:])',\n    contains: [STRING, {\n      begin: ELIXIR_METHOD_RE\n    }],\n    relevance: 0\n  }, {\n    className: 'symbol',\n    begin: ELIXIR_IDENT_RE + ':(?!:)',\n    relevance: 0\n  }, NUMBER, {\n    className: 'variable',\n    begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))'\n  }, {\n    begin: '->'\n  }, {\n    // regexp container\n    begin: '(' + hljs.RE_STARTERS_RE + ')\\\\s*',\n    contains: [hljs.HASH_COMMENT_MODE, {\n      // to prevent false regex triggers for the division function:\n      // /:\n      begin: /\\/: (?=\\d+\\s*[,\\]])/,\n      relevance: 0,\n      contains: [NUMBER]\n    }, {\n      className: 'regexp',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      variants: [{\n        begin: '/',\n        end: '/[a-z]*'\n      }, {\n        begin: '%r\\\\[',\n        end: '\\\\][a-z]*'\n      }]\n    }],\n    relevance: 0\n  }];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n  return {\n    name: 'Elixir',\n    keywords: ELIXIR_KEYWORDS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;","map":{"version":3,"names":["elixir","hljs","ELIXIR_IDENT_RE","ELIXIR_METHOD_RE","ELIXIR_KEYWORDS","$pattern","keyword","SUBST","className","begin","end","keywords","NUMBER","relevance","SIGIL_DELIMITERS","LOWERCASE_SIGIL","contains","endsParent","BACKSLASH_ESCAPE","variants","UPCASE_SIGIL","STRING","FUNCTION","beginKeywords","inherit","TITLE_MODE","CLASS","ELIXIR_DEFAULT_CONTAINS","HASH_COMMENT_MODE","RE_STARTERS_RE","illegal","name","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/highlight.js/lib/languages/elixir.js"],"sourcesContent":["/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\n/** @type LanguageFn */\nfunction elixir(hljs) {\n  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\\\?)?';\n  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  const ELIXIR_KEYWORDS = {\n    $pattern: ELIXIR_IDENT_RE,\n    keyword: 'and false then defined module in return redo retry end for true self when ' +\n    'next until do begin unless nil break not case cond alias while ensure or ' +\n    'include use alias fn quote require import with|0'\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /\\}/,\n    keywords: ELIXIR_KEYWORDS\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[1-9][0-9_]*(\\\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  const SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  const LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      {\n        endsParent: true,\n        contains: [\n          {\n            contains: [\n              hljs.BACKSLASH_ESCAPE,\n              SUBST\n            ],\n            variants: [\n              {\n                begin: /\"/,\n                end: /\"/\n              },\n              {\n                begin: /'/,\n                end: /'/\n              },\n              {\n                begin: /\\//,\n                end: /\\//\n              },\n              {\n                begin: /\\|/,\n                end: /\\|/\n              },\n              {\n                begin: /\\(/,\n                end: /\\)/\n              },\n              {\n                begin: /\\[/,\n                end: /\\]/\n              },\n              {\n                begin: /\\{/,\n                end: /\\}/\n              },\n              {\n                begin: /</,\n                end: />/\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  };\n\n  const UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: [\n      {\n        begin: /\"/,\n        end: /\"/\n      },\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\\//,\n        end: /\\//\n      },\n      {\n        begin: /\\|/,\n        end: /\\|/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        begin: /\\[/,\n        end: /\\]/\n      },\n      {\n        begin: /\\{/,\n        end: /\\}/\n      },\n      {\n        begin: /</,\n        end: />/\n      }\n    ]\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ],\n    variants: [\n      {\n        begin: /\"\"\"/,\n        end: /\"\"\"/\n      },\n      {\n        begin: /'''/,\n        end: /'''/\n      },\n      {\n        begin: /~S\"\"\"/,\n        end: /\"\"\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S\"/,\n        end: /\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'''/,\n        end: /'''/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'/,\n        end: /'/,\n        contains: [] // override default\n      },\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      }\n    ]\n  };\n  const FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro',\n    end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  const CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\n    end: /\\bdo\\b|$|;/\n  });\n  const ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    UPCASE_SIGIL,\n    LOWERCASE_SIGIL,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    {\n      begin: '::'\n    },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [\n        STRING,\n        {\n          begin: ELIXIR_METHOD_RE\n        }\n      ],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    NUMBER,\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))'\n    },\n    {\n      begin: '->'\n    },\n    { // regexp container\n      begin: '(' + hljs.RE_STARTERS_RE + ')\\\\s*',\n      contains: [\n        hljs.HASH_COMMENT_MODE,\n        {\n          // to prevent false regex triggers for the division function:\n          // /:\n          begin: /\\/: (?=\\d+\\s*[,\\]])/,\n          relevance: 0,\n          contains: [NUMBER]\n        },\n        {\n          className: 'regexp',\n          illegal: '\\\\n',\n          contains: [\n            hljs.BACKSLASH_ESCAPE,\n            SUBST\n          ],\n          variants: [\n            {\n              begin: '/',\n              end: '/[a-z]*'\n            },\n            {\n              begin: '%r\\\\[',\n              end: '\\\\][a-z]*'\n            }\n          ]\n        }\n      ],\n      relevance: 0\n    }\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Elixir',\n    keywords: ELIXIR_KEYWORDS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}