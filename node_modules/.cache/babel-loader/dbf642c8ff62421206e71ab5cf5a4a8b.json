{"ast":null,"code":"import { isTag } from '../utils.js';\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\n\nconst submittableSelector = 'input,select,textarea,keygen';\nconst r20 = /%20/g;\nconst rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\n\nexport function serialize() {\n  // Convert form elements into name/value objects\n  const arr = this.serializeArray(); // Serialize each element into a key/value string\n\n  const retArr = arr.map(data => `${encodeURIComponent(data.name)}=${encodeURIComponent(data.value)}`); // Return the resulting serialization\n\n  return retArr.join('&').replace(r20, '+');\n}\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\n\nexport function serializeArray() {\n  // Resolve all form elements from either forms or collections of form elements\n  return this.map((_, elem) => {\n    const $elem = this._make(elem);\n\n    if (isTag(elem) && elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n\n    return $elem.filter(submittableSelector).toArray();\n  }).filter( // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n  '[name!=\"\"]:enabled' + // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  ':not(:submit, :button, :image, :reset, :file)' + // And are either checked/don't have a checkable state\n  ':matches([checked], :not(:checkbox, :radio))' // Convert each of the elements to its value(s)\n  ).map((_, elem) => {\n    var _a;\n\n    const $elem = this._make(elem);\n\n    const name = $elem.attr('name'); // We have filtered for elements with a name before.\n    // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n\n    const value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : ''; // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n\n    if (Array.isArray(value)) {\n      return value.map(val => (\n      /*\n       * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n       * These can occur inside of `<textarea>'s`\n       */\n      {\n        name,\n        value: val.replace(rCRLF, '\\r\\n')\n      }));\n    } // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n\n\n    return {\n      name,\n      value: value.replace(rCRLF, '\\r\\n')\n    };\n  }).toArray();\n}","map":{"version":3,"mappings":"AAEA,SAASA,KAAT,QAAsB,aAAtB;AAEA;;;;;AAIA,MAAMC,mBAAmB,GAAG,8BAA5B;AACA,MAAMC,GAAG,GAAG,MAAZ;AACA,MAAMC,KAAK,GAAG,QAAd;AAEA;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,SAAV,GAAmB;EACvB;EACA,MAAMC,GAAG,GAAG,KAAKC,cAAL,EAAZ,CAFuB,CAIvB;;EACA,MAAMC,MAAM,GAAGF,GAAG,CAACG,GAAJ,CACZC,IAAD,IACE,GAAGC,kBAAkB,CAACD,IAAI,CAACE,IAAN,CAAW,IAAID,kBAAkB,CAACD,IAAI,CAACG,KAAN,CAAY,EAFvD,CAAf,CALuB,CAUvB;;EACA,OAAOL,MAAM,CAACM,IAAP,CAAY,GAAZ,EAAiBC,OAAjB,CAAyBZ,GAAzB,EAA8B,GAA9B,CAAP;AACD;AAOD;;;;;;;;;;;;;;;AAcA,OAAM,SAAUI,cAAV,GAAwB;EAG5B;EACA,OAAO,KAAKE,GAAL,CAAS,CAACO,CAAD,EAAIC,IAAJ,KAAY;IAC1B,MAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWF,IAAX,CAAd;;IACA,IAAIhB,KAAK,CAACgB,IAAD,CAAL,IAAeA,IAAI,CAACL,IAAL,KAAc,MAAjC,EAAyC;MACvC,OAAOM,KAAK,CAACE,IAAN,CAAWlB,mBAAX,EAAgCmB,OAAhC,EAAP;IACD;;IACD,OAAOH,KAAK,CAACI,MAAN,CAAapB,mBAAb,EAAkCmB,OAAlC,EAAP;EACD,CANM,EAOJC,MAPI,EAQH;EACA,uBACE;EACA,+CAFF,GAGE;EACA,8CAbC,CAcH;EAdG,EAgBJb,GAhBI,CAgB0B,CAACO,CAAD,EAAIC,IAAJ,KAAY;;;IACzC,MAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWF,IAAX,CAAd;;IACA,MAAML,IAAI,GAAGM,KAAK,CAACK,IAAN,CAAW,MAAX,CAAb,CAFyC,CAEE;IAC3C;;IACA,MAAMV,KAAK,GAAG,WAAK,CAACW,GAAN,QAAW,IAAX,IAAWC,aAAX,GAAWA,EAAX,GAAe,EAA7B,CAJyC,CAMzC;;IACA,IAAIC,KAAK,CAACC,OAAN,CAAcd,KAAd,CAAJ,EAA0B;MACxB,OAAOA,KAAK,CAACJ,GAAN,CAAWe,GAAD;MACf;;;;MAIC;QAAEZ,IAAF;QAAQC,KAAK,EAAEW,GAAG,CAACT,OAAJ,CAAYX,KAAZ,EAAmB,MAAnB;MAAf,CALc,CAAV,CAAP;IAOD,CAfwC,CAgBzC;;;IACA,OAAO;MAAEQ,IAAF;MAAQC,KAAK,EAAEA,KAAK,CAACE,OAAN,CAAcX,KAAd,EAAqB,MAArB;IAAf,CAAP;EACD,CAlCI,EAmCJiB,OAnCI,EAAP;AAoCD","names":["isTag","submittableSelector","r20","rCRLF","serialize","arr","serializeArray","retArr","map","data","encodeURIComponent","name","value","join","replace","_","elem","$elem","_make","find","toArray","filter","attr","val","_a","Array","isArray"],"sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sources":["api/forms.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}