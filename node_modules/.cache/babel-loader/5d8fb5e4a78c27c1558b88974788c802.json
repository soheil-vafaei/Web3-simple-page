{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.integerCases = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:wrap:integer\");\n\nconst Format = __importStar(require(\"../format\"));\n\nconst dispatch_1 = require(\"./dispatch\");\n\nconst errors_1 = require(\"./errors\");\n\nconst Conversion = __importStar(require(\"../conversion\"));\n\nconst Utils = __importStar(require(\"./utils\"));\n\nconst Messages = __importStar(require(\"./messages\"));\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst big_js_1 = __importDefault(require(\"big.js\"));\n\nconst bytes_1 = require(\"./bytes\"); //NOTE: all cases called \"integerFrom...\" also work for enums.\n//The cases labeled \"enumFrom...\" work only for enums.\n//there are no cases that work only for integers and not enums,\n//because we always want input for integers to also be valid for enums.\n\n\nconst integerFromStringCases = [integerFromIntegerString, enumFromNameString, integerFromScientificOrUnits, integerFromNegatedBaseString, integerFromStringFailureCase]; //note: doesn't include UDVT case,\n//or error case\n\nconst integerFromWrappedValueCases = [integerFromCodecIntegerValue, integerFromCodecEnumValue, integerFromCodecDecimalValue];\nconst integerCasesBasic = [...integerFromStringCases, integerFromNumber, integerFromBoxedNumber, integerFromBoxedString, integerFromBigint, integerFromBN, integerFromBig, integerFromUint8ArrayLike, ...integerFromWrappedValueCases, integerFromCodecEnumError, integerFromCodecUdvtValue, integerFromOther //must go last!\n];\nexports.integerCases = [integerFromIntegerTypeValueInput, enumFromEnumTypeValueInput, ...integerCasesBasic];\n\nfunction* integerFromIntegerString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  if (input.trim() === \"\") {\n    //bigint accepts this but we shouldn't\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, dataType.typeClass === \"enum\" ? Messages.badEnumMessage : Messages.nonNumericMessage);\n  }\n\n  const stripped = Utils.removeUnderscoresNumeric(input);\n  let asBN;\n\n  try {\n    //we'll use BigInt to parse integer strings, as it's pretty good at it.\n    //Note that it accepts hex/octal/binary with prefixes 0x, 0o, 0b.\n    const asBigInt = BigInt(stripped);\n    asBN = Conversion.toBN(asBigInt);\n  } catch (_a) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input string was not an integer string\");\n  }\n\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n} //this case handles both scientific notation, and numbers with units\n\n\nfunction* integerFromScientificOrUnits(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  if (input.trim() === \"\") {\n    //the code below accepts this but we shouldn't\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, //only specificity 1 since it's already specificity 5 above\n    dataType.typeClass === \"enum\" ? Messages.badEnumMessage : Messages.nonNumericMessage);\n  }\n\n  const stripped = Utils.removeUnderscoresNoHex(input);\n  let [_, quantityString, unit] = stripped.match(/^(.*?)(|wei|gwei|shannon|finney|szabo|ether)\\s*$/i); //units will be case insensitive; note this always matches\n\n  quantityString = quantityString.trim(); //Big rejects whitespace, let's allow it\n\n  const unitPlacesTable = {\n    //we could accept all of web3's units here, but, that's a little much;\n    //we'll just accept the most common ones\n    \"\": 0,\n    wei: 0,\n    gwei: 9,\n    shannon: 9,\n    szabo: 12,\n    finney: 15,\n    ether: 18\n  };\n  let quantity;\n\n  try {\n    quantity = quantityString.match(/^\\s*$/) ? new big_js_1.default(1) //allow just \"ether\" e.g.\n    : new big_js_1.default(quantityString);\n  } catch (_a) {\n    quantity = null;\n  }\n\n  if (quantity === null) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string using scientific notation or units\");\n  }\n\n  const places = unitPlacesTable[unit.toLowerCase()];\n  const asBig = Conversion.shiftBigUp(quantity, places);\n\n  if (Conversion.countDecimalPlaces(asBig) !== 0) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, unit !== \"\" ? \"Input numeric value was not an integral number of wei\" : Messages.nonIntegerMessage);\n  }\n\n  const asBN = Conversion.toBN(asBig);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromNegatedBaseString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  if (!input.match(/^\\s*-/)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a negated numeric string\");\n  }\n\n  const stripped = Utils.removeUnderscoresNumeric(input);\n  let positiveAsBN;\n  const [_, positiveString] = stripped.match(/^\\s*-(.*)$/);\n\n  try {\n    const positive = BigInt(positiveString);\n    positiveAsBN = Conversion.toBN(positive);\n  } catch (_a) {\n    positiveAsBN = null;\n  }\n\n  if (positiveAsBN === null || positiveString === \"\" || positiveString.match(/^(-|\\s)/)) {\n    //no double negation, no bare \"-\", and no space after the minus!\n    //(we do this as a string check, rather than checking if\n    //positiveAsBN is >=0, in order to prevent entering e.g. \"--\" or \"- 2\")\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.nonNumericMessage);\n  }\n\n  const asBN = positiveAsBN.neg();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* enumFromNameString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  if (dataType.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.nonNumericMessage);\n  }\n\n  const fullType = Format.Types.fullType(dataType, wrapOptions.userDefinedTypes);\n  const options = fullType.options;\n  const components = input.split(\".\");\n  const finalComponent = components[components.length - 1];\n  debug(\"components: %O\", components);\n  debug(\"dataType: %O\", dataType);\n  debug(\"options: %O\", options); //the enum can be qualified.  if it's qualified, does the type match?\n\n  let matchingType;\n\n  switch (components.length) {\n    case 1:\n      //not qualified, automatically matches\n      matchingType = true;\n      break;\n\n    case 2:\n      //qualified by type name, does it match?\n      matchingType = components[0] === dataType.typeName;\n      break;\n\n    case 3:\n      //qualified by type name and contract name, does it match?\n      matchingType = dataType.kind === \"local\" && components[0] === dataType.definingContractName && components[1] === dataType.typeName;\n      break;\n\n    default:\n      //no valid reason to have 3 or more periods\n      //(and split cannot return an empty array)\n      matchingType = false;\n  }\n\n  debug(\"matchingType: %O\", matchingType);\n  const numeric = matchingType ? options.indexOf(finalComponent) : -1; //if type doesn't match, just indicate error\n\n  debug(\"numeric: %d\", numeric);\n\n  if (numeric === -1) {\n    //-1 comes from either our setting it manually above to indicate error,\n    //or from a failed indexOf call\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.badEnumMessage);\n  }\n\n  const asBN = new bn_js_1.default(numeric); //whew!\n  //now: unlike in every other case, we can skip validation!\n  //so let's just wrap and return!\n\n  return {\n    type: dataType,\n    kind: \"value\",\n    value: {\n      numericAsBN: asBN,\n      name: finalComponent //we know it matches!\n\n    }\n  };\n}\n\nfunction* integerFromStringFailureCase(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 4, dataType.typeClass === \"enum\" ? Messages.badEnumMessage : Messages.nonNumericMessage);\n}\n\nfunction* integerFromBN(dataType, input, wrapOptions) {\n  if (!bn_js_1.default.isBN(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a BN\");\n  }\n\n  const asBN = input.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromBigint(dataType, input, wrapOptions) {\n  if (typeof input !== \"bigint\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a bigint\");\n  }\n\n  const asBN = Conversion.toBN(input);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromNumber(dataType, input, wrapOptions) {\n  if (typeof input !== \"number\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a number\");\n  }\n\n  if (!Number.isInteger(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.nonIntegerMessage);\n  }\n\n  if (!Number.isSafeInteger(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.nonSafeMessage);\n  }\n\n  const asBN = new bn_js_1.default(input);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromBig(dataType, input, wrapOptions) {\n  if (!Conversion.isBig(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a Big\");\n  }\n\n  if (Conversion.countDecimalPlaces(input) !== 0) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.nonIntegerMessage);\n  }\n\n  const asBN = Conversion.toBN(input);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromUint8ArrayLike(dataType, input, wrapOptions) {\n  if (!Utils.isUint8ArrayLike(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a Uint8Array-like\");\n  } //the next series of checks is delegated to a helper fn\n\n\n  (0, bytes_1.validateUint8ArrayLike)(input, dataType, wrapOptions.name); //(this fn just throws an appropriate error if something's bad)\n\n  const asBN = Conversion.toBN(new Uint8Array(input)); //I am surprised TS accepts this!\n\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromBoxedNumber(dataType, input, wrapOptions) {\n  if (!Utils.isBoxedNumber(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a boxed number\");\n  } //unbox and try again\n\n\n  return yield* integerFromNumber(dataType, input.valueOf(), wrapOptions);\n}\n\nfunction* integerFromBoxedString(dataType, input, wrapOptions) {\n  if (!Utils.isBoxedString(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a boxed string\");\n  } //unbox and try again\n\n\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.valueOf(), wrapOptions, integerFromStringCases);\n}\n\nfunction* integerFromCodecIntegerValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n\n  if (input.type.typeClass !== \"int\" && input.type.typeClass !== \"uint\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n\n  if (!wrapOptions.loose && (input.type.typeClass !== dataType.typeClass || input.type.bits !== dataType.bits)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  const asBN = input.value.asBN.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromCodecDecimalValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n\n  if (input.type.typeClass !== \"fixed\" && input.type.typeClass !== \"ufixed\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n\n  if (!wrapOptions.loose) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  const asBN = Conversion.toBN(input.value.asBig);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromCodecEnumValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n\n  if (input.type.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, //only specificity 1 due to EnumError case\n    Messages.errorResultMessage);\n  }\n\n  if (!wrapOptions.loose && (dataType.typeClass !== \"enum\" || input.type.id !== dataType.id)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  const asBN = input.value.numericAsBN.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromCodecEnumError(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n\n  if (input.type.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  if (input.kind !== \"error\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Wrapped result was a value rather than an error\");\n  }\n\n  if (!wrapOptions.loose && (dataType.typeClass !== \"enum\" || input.type.id !== dataType.id)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  const coercedInput = input; //only one specific kind of error will be allowed\n\n  if (coercedInput.error.kind !== \"EnumOutOfRangeError\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n\n  const asBN = coercedInput.error.rawAsBN.clone();\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction* integerFromCodecUdvtValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n\n  if (input.type.typeClass !== \"userDefinedValueType\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.wrappedTypeMessage(input.type));\n  }\n\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.value, wrapOptions, integerFromWrappedValueCases);\n}\n\nfunction* integerFromIntegerTypeValueInput(dataType, input, wrapOptions) {\n  if (!Utils.isTypeValueInput(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a type/value pair\");\n  }\n\n  if (!input.type.match(/^u?int\\d*$/)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, dataType.typeClass === \"enum\" ? 1 : 5, //use specificity 5 when getting an integer (which have no alternative),\n    //but specificity 1 when getting an enum (which have enum type/value input also)\n    Messages.specifiedTypeMessage(input.type));\n  }\n\n  const [_, typeClass, bitsAsString] = input.type.match(/^(u?int)(\\d*)$/);\n  const bits = bitsAsString ? Number(bitsAsString) : 256; //defaults to 256\n  //(not using the WORD_SIZE constant due to fixed types bringing its applicability\n  //here into question)\n\n  const requiredTypeClass = dataType.typeClass !== \"enum\" ? dataType.typeClass : \"uint\"; //allow underlying uint type to work for enums\n  //(we handle \"enum\" given as type in a separate case below)\n\n  const requiredBits = dataType.typeClass !== \"enum\" ? dataType.bits : 8 * Math.ceil(Math.log2(Format.Types.fullType(dataType, wrapOptions.userDefinedTypes).options.length) / 8); //compute required bits for enum type (sorry)\n\n  if (requiredTypeClass !== typeClass || requiredBits !== bits) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.specifiedTypeMessage(input.type));\n  } //extract value & try again, with loose option turned on\n\n\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.value, Object.assign(Object.assign({}, wrapOptions), {\n    loose: true\n  }), integerCasesBasic);\n}\n\nfunction* enumFromEnumTypeValueInput(dataType, input, wrapOptions) {\n  if (!Utils.isTypeValueInput(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a type/value pair\");\n  }\n\n  if (input.type !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, dataType.typeClass === \"enum\" ? 5 : 1, //use specificity 5 when getting an enum (which will have also failed integer type/value input),\n    //but specificity 1 when getting an integer (to which this doesn't really apply)\n    Messages.specifiedTypeMessage(input.type));\n  }\n\n  if (dataType.typeClass !== \"enum\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.specifiedTypeMessage(input.type));\n  } //extract value & try again, with loose option turned on\n  //(we'll also coerce the type on this one since we know it's\n  //going to be an enum value :P )\n\n\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.value, Object.assign(Object.assign({}, wrapOptions), {\n    loose: true\n  }), integerCasesBasic);\n}\n\nfunction* integerFromOther(dataType, input, wrapOptions) {\n  const request = {\n    kind: \"integer\",\n    input\n  };\n  const response = yield request;\n\n  if (response.kind !== \"integer\") {\n    throw new errors_1.BadResponseTypeError(request, response);\n  }\n\n  if (response.value === null) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, response.partiallyRecognized ? 5 : 3, response.reason || Messages.unrecognizedNumberMessage(dataType));\n  }\n\n  const asBN = Conversion.toBN(response.value);\n  return validateAndWrap(dataType, asBN, wrapOptions, input);\n}\n\nfunction validateAndWrap(dataType, asBN, wrapOptions, input //just for erroring\n) {\n  switch (dataType.typeClass) {\n    case \"uint\":\n      if (asBN.isNeg() || asBN.bitLength() > dataType.bits) {\n        throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.outOfRangeMessage);\n      }\n\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asBN\n        }\n      };\n\n    case \"int\":\n      if (!asBN.isNeg() && asBN.bitLength() >= dataType.bits || //>= since signed\n      asBN.isNeg() && asBN.neg().subn(1).bitLength() >= dataType.bits //bitLength doesn't work great for negatives so we do this instead\n      ) {\n        throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.outOfRangeMessage);\n      }\n\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asBN\n        }\n      };\n\n    case \"enum\":\n      const fullType = Format.Types.fullType(dataType, wrapOptions.userDefinedTypes);\n\n      if (asBN.isNeg() || asBN.gten(fullType.options.length)) {\n        throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.outOfRangeEnumMessage);\n      }\n\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          numericAsBN: asBN,\n          name: fullType.options[asBN.toNumber()]\n        }\n      };\n  }\n}","map":{"version":3,"mappings":"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","names":["debug","integerFromStringCases","integerFromIntegerString","enumFromNameString","integerFromScientificOrUnits","integerFromNegatedBaseString","integerFromStringFailureCase","integerFromWrappedValueCases","integerFromCodecIntegerValue","integerFromCodecEnumValue","integerFromCodecDecimalValue","integerCasesBasic","integerFromNumber","integerFromBoxedNumber","integerFromBoxedString","integerFromBigint","integerFromBN","integerFromBig","integerFromUint8ArrayLike","integerFromCodecEnumError","integerFromCodecUdvtValue","integerFromOther","exports","integerFromIntegerTypeValueInput","enumFromEnumTypeValueInput","dataType","input","wrapOptions","errors_1","name","trim","typeClass","Messages","badEnumMessage","nonNumericMessage","stripped","Utils","removeUnderscoresNumeric","asBN","asBigInt","BigInt","Conversion","toBN","validateAndWrap","removeUnderscoresNoHex","_","quantityString","unit","match","unitPlacesTable","wei","gwei","shannon","szabo","finney","ether","quantity","big_js_1","places","toLowerCase","asBig","shiftBigUp","countDecimalPlaces","nonIntegerMessage","positiveAsBN","positiveString","positive","neg","fullType","Format","Types","userDefinedTypes","options","components","split","finalComponent","length","matchingType","typeName","kind","definingContractName","numeric","indexOf","bn_js_1","type","value","numericAsBN","isBN","clone","Number","isInteger","isSafeInteger","nonSafeMessage","isBig","isUint8ArrayLike","Uint8Array","isBoxedNumber","valueOf","isBoxedString","isWrappedResult","wrappedTypeMessage","errorResultMessage","loose","bits","id","coercedInput","error","rawAsBN","isTypeValueInput","specifiedTypeMessage","bitsAsString","requiredTypeClass","requiredBits","Math","ceil","log2","Object","request","response","partiallyRecognized","reason","unrecognizedNumberMessage","isNeg","bitLength","outOfRangeMessage","subn","gten","outOfRangeEnumMessage","toNumber"],"sourceRoot":"","sources":["../../../lib/wrap/integer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}