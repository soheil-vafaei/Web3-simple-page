{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar _1 = require(\".\");\n\nvar TransactionFactory =\n/** @class */\nfunction () {\n  // It is not possible to instantiate a TransactionFactory object.\n  function TransactionFactory() {}\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n\n\n  TransactionFactory.fromTxData = function (txData, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return _1.Transaction.fromTxData(txData, txOptions);\n    } else {\n      var txType = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(txData.type)).toNumber();\n\n      if (txType === 0) {\n        return _1.Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 1) {\n        return _1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n      } else if (txType === 2) {\n        return _1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n      } else {\n        throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n      }\n    }\n  };\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromSerializedData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      var EIP = void 0;\n\n      switch (data[0]) {\n        case 1:\n          EIP = 2930;\n          break;\n\n        case 2:\n          EIP = 1559;\n          break;\n\n        default:\n          throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n      }\n\n      if (EIP === 1559) {\n        return _1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n      } else {\n        // EIP === 2930\n        return _1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n      }\n    } else {\n      return _1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  };\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n\n\n  TransactionFactory.fromBlockBodyData = function (data, txOptions) {\n    if (txOptions === void 0) {\n      txOptions = {};\n    }\n\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions);\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return _1.Transaction.fromValuesArray(data, txOptions);\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input');\n    }\n  };\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n\n\n  TransactionFactory.getTransactionClass = function (transactionID, _common) {\n    if (transactionID === void 0) {\n      transactionID = 0;\n    }\n\n    var legacyTxn = transactionID == 0 || transactionID >= 0x80 && transactionID <= 0xff;\n\n    if (legacyTxn) {\n      return _1.Transaction;\n    }\n\n    switch (transactionID) {\n      case 1:\n        return _1.AccessListEIP2930Transaction;\n\n      case 2:\n        return _1.FeeMarketEIP1559Transaction;\n\n      default:\n        throw new Error(\"TypedTransaction with ID \".concat(transactionID, \" unknown\"));\n    }\n  };\n\n  return TransactionFactory;\n}();\n\nexports.default = TransactionFactory;","map":{"version":3,"mappings":"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","names":["TransactionFactory","txData","txOptions","type","undefined","_1","fromTxData","txType","ethereumjs_util_1","toNumber","Error","data","EIP","fromSerializedTx","Buffer","isBuffer","fromSerializedData","Array","isArray","fromValuesArray","transactionID","_common","legacyTxn"],"sourceRoot":"","sources":["../src/transactionFactory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}