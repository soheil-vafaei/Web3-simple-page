{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\n\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\n\nexports.htmlDecodeTree = decode_data_html_js_1.default;\n\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\n\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\n\nvar decode_codepoint_js_1 = __importDefault(require(\"./decode_codepoint.js\"));\n\nexports.decodeCodePoint = decode_codepoint_js_1.default;\n\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\n\nObject.defineProperty(exports, \"replaceCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.replaceCodePoint;\n  }\n});\nObject.defineProperty(exports, \"fromCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.fromCodePoint;\n  }\n});\nvar CharCodes;\n\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  /** Bit that needs to be set to convert an upper case ASCII character to lower case */\n\n  CharCodes[CharCodes[\"To_LOWER_BIT\"] = 32] = \"To_LOWER_BIT\";\n})(CharCodes || (CharCodes = {}));\n\nvar BinTrieFlags;\n\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\n\nfunction getDecoder(decodeTree) {\n  return function decodeHTMLBinary(str, strict) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var strIdx = 0;\n\n    while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n      ret += str.slice(lastIdx, strIdx);\n      lastIdx = strIdx; // Skip the \"&\"\n\n      strIdx += 1; // If we have a numeric entity, handle this separately.\n\n      if (str.charCodeAt(strIdx) === CharCodes.NUM) {\n        // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n        var start = strIdx + 1;\n        var base = 10;\n        var cp = str.charCodeAt(start);\n\n        if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {\n          base = 16;\n          strIdx += 1;\n          start += 1;\n        }\n\n        do cp = str.charCodeAt(++strIdx); while (cp >= CharCodes.ZERO && cp <= CharCodes.NINE || base === 16 && (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A && (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F);\n\n        if (start !== strIdx) {\n          var entity = str.substring(start, strIdx);\n          var parsed = parseInt(entity, base);\n\n          if (str.charCodeAt(strIdx) === CharCodes.SEMI) {\n            strIdx += 1;\n          } else if (strict) {\n            continue;\n          }\n\n          ret += (0, decode_codepoint_js_1.default)(parsed);\n          lastIdx = strIdx;\n        }\n\n        continue;\n      }\n\n      var resultIdx = 0;\n      var excess = 1;\n      var treeIdx = 0;\n      var current = decodeTree[treeIdx];\n\n      for (; strIdx < str.length; strIdx++, excess++) {\n        treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n        if (treeIdx < 0) break;\n        current = decodeTree[treeIdx];\n        var masked = current & BinTrieFlags.VALUE_LENGTH; // If the branch is a value, store it and continue\n\n        if (masked) {\n          // If we have a legacy entity while parsing strictly, just skip the number of bytes\n          if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {\n            resultIdx = treeIdx;\n            excess = 0;\n          } // The mask is the number of bytes of the value, including the current byte.\n\n\n          var valueLength = (masked >> 14) - 1;\n          if (valueLength === 0) break;\n          treeIdx += valueLength;\n        }\n      }\n\n      if (resultIdx !== 0) {\n        var valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        ret += valueLength === 1 ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH) : valueLength === 2 ? String.fromCharCode(decodeTree[resultIdx + 1]) : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);\n        lastIdx = strIdx - excess + 1;\n      }\n    }\n\n    return ret + str.slice(lastIdx);\n  };\n}\n\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE; // Case 1: Single branch encoded in jump offset\n\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n  } // Case 2: Multiple branches encoded in jump table\n\n\n  if (jumpOffset) {\n    var value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  } // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n\n\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n\n  return -1;\n}\n\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string, allowing for entities not terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\n\nfunction decodeHTML(str) {\n  return htmlDecoder(str, false);\n}\n\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\n\nfunction decodeHTMLStrict(str) {\n  return htmlDecoder(str, true);\n}\n\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\n\nfunction decodeXML(str) {\n  return xmlDecoder(str, true);\n}\n\nexports.decodeXML = decodeXML;","map":{"version":3,"mappings":"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","names":["exports","decode_data_html_js_1","decode_data_xml_js_1","decode_codepoint_js_1","Object","enumerable","get","CharCodes","BinTrieFlags","getDecoder","decodeTree","decodeHTMLBinary","str","strict","ret","lastIdx","strIdx","indexOf","slice","charCodeAt","NUM","start","base","cp","To_LOWER_BIT","LOWER_X","ZERO","NINE","LOWER_A","LOWER_F","entity","substring","parsed","parseInt","SEMI","resultIdx","excess","treeIdx","current","length","determineBranch","masked","VALUE_LENGTH","valueLength","String","fromCharCode","nodeIdx","char","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","value","lo","hi","mid","midVal","htmlDecoder","xmlDecoder","decodeHTML","decodeHTMLStrict","decodeXML"],"sourceRoot":"https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/","sources":["decode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}