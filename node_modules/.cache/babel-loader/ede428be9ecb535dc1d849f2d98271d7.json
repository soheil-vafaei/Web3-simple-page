{"ast":null,"code":"import { SelectorType, AttributeAction } from \"./types\";\nconst attribValChars = [\"\\\\\", '\"'];\nconst pseudoValChars = [...attribValChars, \"(\", \")\"];\nconst charsToEscapeInAttributeValue = new Set(attribValChars.map(c => c.charCodeAt(0)));\nconst charsToEscapeInPseudoValue = new Set(pseudoValChars.map(c => c.charCodeAt(0)));\nconst charsToEscapeInName = new Set([...pseudoValChars, \"~\", \"^\", \"$\", \"*\", \"+\", \"!\", \"|\", \":\", \"[\", \"]\", \" \", \".\"].map(c => c.charCodeAt(0)));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */\n\nexport function stringify(selector) {\n  return selector.map(token => token.map(stringifyToken).join(\"\")).join(\", \");\n}\n\nfunction stringifyToken(token, index, arr) {\n  switch (token.type) {\n    // Simple types\n    case SelectorType.Child:\n      return index === 0 ? \"> \" : \" > \";\n\n    case SelectorType.Parent:\n      return index === 0 ? \"< \" : \" < \";\n\n    case SelectorType.Sibling:\n      return index === 0 ? \"~ \" : \" ~ \";\n\n    case SelectorType.Adjacent:\n      return index === 0 ? \"+ \" : \" + \";\n\n    case SelectorType.Descendant:\n      return \" \";\n\n    case SelectorType.ColumnCombinator:\n      return index === 0 ? \"|| \" : \" || \";\n\n    case SelectorType.Universal:\n      // Return an empty string if the selector isn't needed.\n      return token.namespace === \"*\" && index + 1 < arr.length && \"name\" in arr[index + 1] ? \"\" : `${getNamespace(token.namespace)}*`;\n\n    case SelectorType.Tag:\n      return getNamespacedName(token);\n\n    case SelectorType.PseudoElement:\n      return `::${escapeName(token.name, charsToEscapeInName)}${token.data === null ? \"\" : `(${escapeName(token.data, charsToEscapeInPseudoValue)})`}`;\n\n    case SelectorType.Pseudo:\n      return `:${escapeName(token.name, charsToEscapeInName)}${token.data === null ? \"\" : `(${typeof token.data === \"string\" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data)})`}`;\n\n    case SelectorType.Attribute:\n      {\n        if (token.name === \"id\" && token.action === AttributeAction.Equals && token.ignoreCase === \"quirks\" && !token.namespace) {\n          return `#${escapeName(token.value, charsToEscapeInName)}`;\n        }\n\n        if (token.name === \"class\" && token.action === AttributeAction.Element && token.ignoreCase === \"quirks\" && !token.namespace) {\n          return `.${escapeName(token.value, charsToEscapeInName)}`;\n        }\n\n        const name = getNamespacedName(token);\n\n        if (token.action === AttributeAction.Exists) {\n          return `[${name}]`;\n        }\n\n        return `[${name}${getActionValue(token.action)}=\"${escapeName(token.value, charsToEscapeInAttributeValue)}\"${token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\"}]`;\n      }\n  }\n}\n\nfunction getActionValue(action) {\n  switch (action) {\n    case AttributeAction.Equals:\n      return \"\";\n\n    case AttributeAction.Element:\n      return \"~\";\n\n    case AttributeAction.Start:\n      return \"^\";\n\n    case AttributeAction.End:\n      return \"$\";\n\n    case AttributeAction.Any:\n      return \"*\";\n\n    case AttributeAction.Not:\n      return \"!\";\n\n    case AttributeAction.Hyphen:\n      return \"|\";\n\n    case AttributeAction.Exists:\n      throw new Error(\"Shouldn't be here\");\n  }\n}\n\nfunction getNamespacedName(token) {\n  return `${getNamespace(token.namespace)}${escapeName(token.name, charsToEscapeInName)}`;\n}\n\nfunction getNamespace(namespace) {\n  return namespace !== null ? `${namespace === \"*\" ? \"*\" : escapeName(namespace, charsToEscapeInName)}|` : \"\";\n}\n\nfunction escapeName(str, charsToEscape) {\n  let lastIdx = 0;\n  let ret = \"\";\n\n  for (let i = 0; i < str.length; i++) {\n    if (charsToEscape.has(str.charCodeAt(i))) {\n      ret += `${str.slice(lastIdx, i)}\\\\${str.charAt(i)}`;\n      lastIdx = i + 1;\n    }\n  }\n\n  return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}","map":{"version":3,"names":["SelectorType","AttributeAction","attribValChars","pseudoValChars","charsToEscapeInAttributeValue","Set","map","c","charCodeAt","charsToEscapeInPseudoValue","charsToEscapeInName","stringify","selector","token","stringifyToken","join","index","arr","type","Child","Parent","Sibling","Adjacent","Descendant","ColumnCombinator","Universal","namespace","length","getNamespace","Tag","getNamespacedName","PseudoElement","escapeName","name","data","Pseudo","Attribute","action","Equals","ignoreCase","value","Element","Exists","getActionValue","Start","End","Any","Not","Hyphen","Error","str","charsToEscape","lastIdx","ret","i","has","slice","charAt"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/css-what/lib/es/stringify.js"],"sourcesContent":["import { SelectorType, AttributeAction } from \"./types\";\nconst attribValChars = [\"\\\\\", '\"'];\nconst pseudoValChars = [...attribValChars, \"(\", \")\"];\nconst charsToEscapeInAttributeValue = new Set(attribValChars.map((c) => c.charCodeAt(0)));\nconst charsToEscapeInPseudoValue = new Set(pseudoValChars.map((c) => c.charCodeAt(0)));\nconst charsToEscapeInName = new Set([\n    ...pseudoValChars,\n    \"~\",\n    \"^\",\n    \"$\",\n    \"*\",\n    \"+\",\n    \"!\",\n    \"|\",\n    \":\",\n    \"[\",\n    \"]\",\n    \" \",\n    \".\",\n].map((c) => c.charCodeAt(0)));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */\nexport function stringify(selector) {\n    return selector\n        .map((token) => token.map(stringifyToken).join(\"\"))\n        .join(\", \");\n}\nfunction stringifyToken(token, index, arr) {\n    switch (token.type) {\n        // Simple types\n        case SelectorType.Child:\n            return index === 0 ? \"> \" : \" > \";\n        case SelectorType.Parent:\n            return index === 0 ? \"< \" : \" < \";\n        case SelectorType.Sibling:\n            return index === 0 ? \"~ \" : \" ~ \";\n        case SelectorType.Adjacent:\n            return index === 0 ? \"+ \" : \" + \";\n        case SelectorType.Descendant:\n            return \" \";\n        case SelectorType.ColumnCombinator:\n            return index === 0 ? \"|| \" : \" || \";\n        case SelectorType.Universal:\n            // Return an empty string if the selector isn't needed.\n            return token.namespace === \"*\" &&\n                index + 1 < arr.length &&\n                \"name\" in arr[index + 1]\n                ? \"\"\n                : `${getNamespace(token.namespace)}*`;\n        case SelectorType.Tag:\n            return getNamespacedName(token);\n        case SelectorType.PseudoElement:\n            return `::${escapeName(token.name, charsToEscapeInName)}${token.data === null\n                ? \"\"\n                : `(${escapeName(token.data, charsToEscapeInPseudoValue)})`}`;\n        case SelectorType.Pseudo:\n            return `:${escapeName(token.name, charsToEscapeInName)}${token.data === null\n                ? \"\"\n                : `(${typeof token.data === \"string\"\n                    ? escapeName(token.data, charsToEscapeInPseudoValue)\n                    : stringify(token.data)})`}`;\n        case SelectorType.Attribute: {\n            if (token.name === \"id\" &&\n                token.action === AttributeAction.Equals &&\n                token.ignoreCase === \"quirks\" &&\n                !token.namespace) {\n                return `#${escapeName(token.value, charsToEscapeInName)}`;\n            }\n            if (token.name === \"class\" &&\n                token.action === AttributeAction.Element &&\n                token.ignoreCase === \"quirks\" &&\n                !token.namespace) {\n                return `.${escapeName(token.value, charsToEscapeInName)}`;\n            }\n            const name = getNamespacedName(token);\n            if (token.action === AttributeAction.Exists) {\n                return `[${name}]`;\n            }\n            return `[${name}${getActionValue(token.action)}=\"${escapeName(token.value, charsToEscapeInAttributeValue)}\"${token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\"}]`;\n        }\n    }\n}\nfunction getActionValue(action) {\n    switch (action) {\n        case AttributeAction.Equals:\n            return \"\";\n        case AttributeAction.Element:\n            return \"~\";\n        case AttributeAction.Start:\n            return \"^\";\n        case AttributeAction.End:\n            return \"$\";\n        case AttributeAction.Any:\n            return \"*\";\n        case AttributeAction.Not:\n            return \"!\";\n        case AttributeAction.Hyphen:\n            return \"|\";\n        case AttributeAction.Exists:\n            throw new Error(\"Shouldn't be here\");\n    }\n}\nfunction getNamespacedName(token) {\n    return `${getNamespace(token.namespace)}${escapeName(token.name, charsToEscapeInName)}`;\n}\nfunction getNamespace(namespace) {\n    return namespace !== null\n        ? `${namespace === \"*\"\n            ? \"*\"\n            : escapeName(namespace, charsToEscapeInName)}|`\n        : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n    let lastIdx = 0;\n    let ret = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (charsToEscape.has(str.charCodeAt(i))) {\n            ret += `${str.slice(lastIdx, i)}\\\\${str.charAt(i)}`;\n            lastIdx = i + 1;\n        }\n    }\n    return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}