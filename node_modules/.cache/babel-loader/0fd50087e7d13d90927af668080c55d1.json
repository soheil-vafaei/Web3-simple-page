{"ast":null,"code":"import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\n\nfunction buildCompleteIntegerConstraints(constraints) {\n  const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n  const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n  return {\n    min,\n    max\n  };\n}\n\nexport function integer() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const fullConstraints = buildCompleteIntegerConstraints(constraints);\n\n  if (fullConstraints.min > fullConstraints.max) {\n    throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n  }\n\n  if (!Number.isInteger(fullConstraints.min)) {\n    throw new Error('fc.integer minimum value should be an integer');\n  }\n\n  if (!Number.isInteger(fullConstraints.max)) {\n    throw new Error('fc.integer maximum value should be an integer');\n  }\n\n  return new IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}","map":{"version":3,"names":["IntegerArbitrary","buildCompleteIntegerConstraints","constraints","min","undefined","max","integer","fullConstraints","Error","Number","isInteger"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/fast-check/lib/esm/arbitrary/integer.js"],"sourcesContent":["import { IntegerArbitrary } from './_internals/IntegerArbitrary.js';\nfunction buildCompleteIntegerConstraints(constraints) {\n    const min = constraints.min !== undefined ? constraints.min : -0x80000000;\n    const max = constraints.max !== undefined ? constraints.max : 0x7fffffff;\n    return { min, max };\n}\nexport function integer(constraints = {}) {\n    const fullConstraints = buildCompleteIntegerConstraints(constraints);\n    if (fullConstraints.min > fullConstraints.max) {\n        throw new Error('fc.integer maximum value should be equal or greater than the minimum one');\n    }\n    if (!Number.isInteger(fullConstraints.min)) {\n        throw new Error('fc.integer minimum value should be an integer');\n    }\n    if (!Number.isInteger(fullConstraints.max)) {\n        throw new Error('fc.integer maximum value should be an integer');\n    }\n    return new IntegerArbitrary(fullConstraints.min, fullConstraints.max);\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kCAAjC;;AACA,SAASC,+BAAT,CAAyCC,WAAzC,EAAsD;EAClD,MAAMC,GAAG,GAAGD,WAAW,CAACC,GAAZ,KAAoBC,SAApB,GAAgCF,WAAW,CAACC,GAA5C,GAAkD,CAAC,UAA/D;EACA,MAAME,GAAG,GAAGH,WAAW,CAACG,GAAZ,KAAoBD,SAApB,GAAgCF,WAAW,CAACG,GAA5C,GAAkD,UAA9D;EACA,OAAO;IAAEF,GAAF;IAAOE;EAAP,CAAP;AACH;;AACD,OAAO,SAASC,OAAT,GAAmC;EAAA,IAAlBJ,WAAkB,uEAAJ,EAAI;EACtC,MAAMK,eAAe,GAAGN,+BAA+B,CAACC,WAAD,CAAvD;;EACA,IAAIK,eAAe,CAACJ,GAAhB,GAAsBI,eAAe,CAACF,GAA1C,EAA+C;IAC3C,MAAM,IAAIG,KAAJ,CAAU,0EAAV,CAAN;EACH;;EACD,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBH,eAAe,CAACJ,GAAjC,CAAL,EAA4C;IACxC,MAAM,IAAIK,KAAJ,CAAU,+CAAV,CAAN;EACH;;EACD,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBH,eAAe,CAACF,GAAjC,CAAL,EAA4C;IACxC,MAAM,IAAIG,KAAJ,CAAU,+CAAV,CAAN;EACH;;EACD,OAAO,IAAIR,gBAAJ,CAAqBO,eAAe,CAACJ,GAArC,EAA0CI,eAAe,CAACF,GAA1D,CAAP;AACH"},"metadata":{},"sourceType":"module"}