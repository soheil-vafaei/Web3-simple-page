{"ast":null,"code":"import boolbase from \"boolbase\";\n/**\n * Returns a function that checks if an elements index matches the given rule\n * highly optimized to return the fastest solution.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A highly optimized function that returns whether an index matches the nth-check.\n * @example\n *\n * ```js\n * const check = nthCheck.compile([2, 3]);\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n * ```\n */\n\nexport function compile(parsed) {\n  const a = parsed[0]; // Subtract 1 from `b`, to convert from one- to zero-indexed.\n\n  const b = parsed[1] - 1;\n  /*\n   * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n   * Besides, the specification states that no elements are\n   * matched when `a` and `b` are 0.\n   *\n   * `b < 0` here as we subtracted 1 from `b` above.\n   */\n\n  if (b < 0 && a <= 0) return boolbase.falseFunc; // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n\n  if (a === -1) return index => index <= b;\n  if (a === 0) return index => index === b; // When `b <= 0` and `a === 1`, they match any element.\n\n  if (a === 1) return b < 0 ? boolbase.trueFunc : index => index >= b;\n  /*\n   * Otherwise, modulo can be used to check if there is a match.\n   *\n   * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n   */\n\n  const absA = Math.abs(a); // Get `b mod a`, + a if this is negative.\n\n  const bMod = (b % absA + absA) % absA;\n  return a > 1 ? index => index >= b && index % absA === bMod : index => index <= b && index % absA === bMod;\n}\n/**\n * Returns a function that produces a monotonously increasing sequence of indices.\n *\n * If the sequence has an end, the returned function will return `null` after\n * the last index in the sequence.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing (2n+3)</caption>\n *\n * ```js\n * const gen = nthCheck.generate([2, 3])\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value (-2n+10)</caption>\n *\n * ```js\n *\n * const gen = nthCheck.generate([-2, 5]);\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */\n\nexport function generate(parsed) {\n  const a = parsed[0]; // Subtract 1 from `b`, to convert from one- to zero-indexed.\n\n  let b = parsed[1] - 1;\n  let n = 0; // Make sure to always return an increasing sequence\n\n  if (a < 0) {\n    const aPos = -a; // Get `b mod a`\n\n    const minValue = (b % aPos + aPos) % aPos;\n    return () => {\n      const val = minValue + aPos * n++;\n      return val > b ? null : val;\n    };\n  }\n\n  if (a === 0) return b < 0 ? // There are no result â€” always return `null`\n  () => null : // Return `b` exactly once\n  () => n++ === 0 ? b : null;\n\n  if (b < 0) {\n    b += a * Math.ceil(-b / a);\n  }\n\n  return () => a * n++ + b;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,SAAUC,OAAV,CACFC,MADE,EAC4B;EAE9B,MAAMC,CAAC,GAAGD,MAAM,CAAC,CAAD,CAAhB,CAF8B,CAG9B;;EACA,MAAME,CAAC,GAAGF,MAAM,CAAC,CAAD,CAAN,GAAY,CAAtB;EAEA;;;;;;;;EAOA,IAAIE,CAAC,GAAG,CAAJ,IAASD,CAAC,IAAI,CAAlB,EAAqB,OAAOH,QAAQ,CAACK,SAAhB,CAbS,CAe9B;;EACA,IAAIF,CAAC,KAAK,CAAC,CAAX,EAAc,OAAQG,KAAD,IAAWA,KAAK,IAAIF,CAA3B;EACd,IAAID,CAAC,KAAK,CAAV,EAAa,OAAQG,KAAD,IAAWA,KAAK,KAAKF,CAA5B,CAjBiB,CAkB9B;;EACA,IAAID,CAAC,KAAK,CAAV,EAAa,OAAOC,CAAC,GAAG,CAAJ,GAAQJ,QAAQ,CAACO,QAAjB,GAA6BD,KAAD,IAAWA,KAAK,IAAIF,CAAvD;EAEb;;;;;;EAKA,MAAMI,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASP,CAAT,CAAb,CA1B8B,CA2B9B;;EACA,MAAMQ,IAAI,GAAG,CAAEP,CAAC,GAAGI,IAAL,GAAaA,IAAd,IAAsBA,IAAnC;EAEA,OAAOL,CAAC,GAAG,CAAJ,GACAG,KAAD,IAAWA,KAAK,IAAIF,CAAT,IAAcE,KAAK,GAAGE,IAAR,KAAiBG,IADzC,GAEAL,KAAD,IAAWA,KAAK,IAAIF,CAAT,IAAcE,KAAK,GAAGE,IAAR,KAAiBG,IAFhD;AAGH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,SAAUC,QAAV,CAAmBV,MAAnB,EAAiD;EACnD,MAAMC,CAAC,GAAGD,MAAM,CAAC,CAAD,CAAhB,CADmD,CAEnD;;EACA,IAAIE,CAAC,GAAGF,MAAM,CAAC,CAAD,CAAN,GAAY,CAApB;EAEA,IAAIW,CAAC,GAAG,CAAR,CALmD,CAOnD;;EACA,IAAIV,CAAC,GAAG,CAAR,EAAW;IACP,MAAMW,IAAI,GAAG,CAACX,CAAd,CADO,CAEP;;IACA,MAAMY,QAAQ,GAAG,CAAEX,CAAC,GAAGU,IAAL,GAAaA,IAAd,IAAsBA,IAAvC;IACA,OAAO,MAAK;MACR,MAAME,GAAG,GAAGD,QAAQ,GAAGD,IAAI,GAAGD,CAAC,EAA/B;MAEA,OAAOG,GAAG,GAAGZ,CAAN,GAAU,IAAV,GAAiBY,GAAxB;IACH,CAJD;EAKH;;EAED,IAAIb,CAAC,KAAK,CAAV,EACI,OAAOC,CAAC,GAAG,CAAJ,GACD;EACA,MAAM,IAFL,GAGD;EACA,MAAOS,CAAC,OAAO,CAAR,GAAYT,CAAZ,GAAgB,IAJ7B;;EAMJ,IAAIA,CAAC,GAAG,CAAR,EAAW;IACPA,CAAC,IAAID,CAAC,GAAGM,IAAI,CAACQ,IAAL,CAAU,CAACb,CAAD,GAAKD,CAAf,CAAT;EACH;;EAED,OAAO,MAAMA,CAAC,GAAGU,CAAC,EAAL,GAAUT,CAAvB;AACH","names":["boolbase","compile","parsed","a","b","falseFunc","index","trueFunc","absA","Math","abs","bMod","generate","n","aPos","minValue","val","ceil"],"sourceRoot":"https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/","sources":["compile.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}