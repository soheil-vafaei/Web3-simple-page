{"ast":null,"code":"import { SelectorType, AttributeAction } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([[126\n/* Tilde */\n, AttributeAction.Element], [94\n/* Circumflex */\n, AttributeAction.Start], [36\n/* Dollar */\n, AttributeAction.End], [42\n/* Asterisk */\n, AttributeAction.Any], [33\n/* ExclamationMark */\n, AttributeAction.Not], [124\n/* Pipe */\n, AttributeAction.Hyphen]]); // Pseudos, whose data property is parsed as well.\n\nconst unpackPseudos = new Set([\"has\", \"not\", \"matches\", \"is\", \"where\", \"host\", \"host-context\"]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\n\nexport function isTraversal(selector) {\n  switch (selector.type) {\n    case SelectorType.Adjacent:\n    case SelectorType.Child:\n    case SelectorType.Descendant:\n    case SelectorType.Parent:\n    case SelectorType.Sibling:\n    case SelectorType.ColumnCombinator:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]); // Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\n\nfunction funescape(_, escaped, escapedWhitespace) {\n  const high = parseInt(escaped, 16) - 0x10000; // NaN means non-codepoint\n\n  return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n  String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n  String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\n\nfunction unescapeCSS(str) {\n  return str.replace(reEscape, funescape);\n}\n\nfunction isQuote(c) {\n  return c === 39\n  /* SingleQuote */\n  || c === 34\n  /* DoubleQuote */\n  ;\n}\n\nfunction isWhitespace(c) {\n  return c === 32\n  /* Space */\n  || c === 9\n  /* Tab */\n  || c === 10\n  /* NewLine */\n  || c === 12\n  /* FormFeed */\n  || c === 13\n  /* CarriageReturn */\n  ;\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\n\n\nexport function parse(selector) {\n  const subselects = [];\n  const endIndex = parseSelector(subselects, `${selector}`, 0);\n\n  if (endIndex < selector.length) {\n    throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n  }\n\n  return subselects;\n}\n\nfunction parseSelector(subselects, selector, selectorIndex) {\n  let tokens = [];\n\n  function getName(offset) {\n    const match = selector.slice(selectorIndex + offset).match(reName);\n\n    if (!match) {\n      throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n    }\n\n    const [name] = match;\n    selectorIndex += offset + name.length;\n    return unescapeCSS(name);\n  }\n\n  function stripWhitespace(offset) {\n    selectorIndex += offset;\n\n    while (selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))) {\n      selectorIndex++;\n    }\n  }\n\n  function readValueWithParenthesis() {\n    selectorIndex += 1;\n    const start = selectorIndex;\n    let counter = 1;\n\n    for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n      if (selector.charCodeAt(selectorIndex) === 40\n      /* LeftParenthesis */\n      && !isEscaped(selectorIndex)) {\n        counter++;\n      } else if (selector.charCodeAt(selectorIndex) === 41\n      /* RightParenthesis */\n      && !isEscaped(selectorIndex)) {\n        counter--;\n      }\n    }\n\n    if (counter) {\n      throw new Error(\"Parenthesis not matched\");\n    }\n\n    return unescapeCSS(selector.slice(start, selectorIndex - 1));\n  }\n\n  function isEscaped(pos) {\n    let slashCount = 0;\n\n    while (selector.charCodeAt(--pos) === 92\n    /* BackSlash */\n    ) slashCount++;\n\n    return (slashCount & 1) === 1;\n  }\n\n  function ensureNotTraversal() {\n    if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n      throw new Error(\"Did not expect successive traversals.\");\n    }\n  }\n\n  function addTraversal(type) {\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === SelectorType.Descendant) {\n      tokens[tokens.length - 1].type = type;\n      return;\n    }\n\n    ensureNotTraversal();\n    tokens.push({\n      type\n    });\n  }\n\n  function addSpecialAttribute(name, action) {\n    tokens.push({\n      type: SelectorType.Attribute,\n      name,\n      action,\n      value: getName(1),\n      namespace: null,\n      ignoreCase: \"quirks\"\n    });\n  }\n  /**\n   * We have finished parsing the current part of the selector.\n   *\n   * Remove descendant tokens at the end if they exist,\n   * and return the last index, so that parsing can be\n   * picked up from here.\n   */\n\n\n  function finalizeSubselector() {\n    if (tokens.length && tokens[tokens.length - 1].type === SelectorType.Descendant) {\n      tokens.pop();\n    }\n\n    if (tokens.length === 0) {\n      throw new Error(\"Empty sub-selector\");\n    }\n\n    subselects.push(tokens);\n  }\n\n  stripWhitespace(0);\n\n  if (selector.length === selectorIndex) {\n    return selectorIndex;\n  }\n\n  loop: while (selectorIndex < selector.length) {\n    const firstChar = selector.charCodeAt(selectorIndex);\n\n    switch (firstChar) {\n      // Whitespace\n      case 32\n      /* Space */\n      :\n      case 9\n      /* Tab */\n      :\n      case 10\n      /* NewLine */\n      :\n      case 12\n      /* FormFeed */\n      :\n      case 13\n      /* CarriageReturn */\n      :\n        {\n          if (tokens.length === 0 || tokens[0].type !== SelectorType.Descendant) {\n            ensureNotTraversal();\n            tokens.push({\n              type: SelectorType.Descendant\n            });\n          }\n\n          stripWhitespace(1);\n          break;\n        }\n      // Traversals\n\n      case 62\n      /* GreaterThan */\n      :\n        {\n          addTraversal(SelectorType.Child);\n          stripWhitespace(1);\n          break;\n        }\n\n      case 60\n      /* LessThan */\n      :\n        {\n          addTraversal(SelectorType.Parent);\n          stripWhitespace(1);\n          break;\n        }\n\n      case 126\n      /* Tilde */\n      :\n        {\n          addTraversal(SelectorType.Sibling);\n          stripWhitespace(1);\n          break;\n        }\n\n      case 43\n      /* Plus */\n      :\n        {\n          addTraversal(SelectorType.Adjacent);\n          stripWhitespace(1);\n          break;\n        }\n      // Special attribute selectors: .class, #id\n\n      case 46\n      /* Period */\n      :\n        {\n          addSpecialAttribute(\"class\", AttributeAction.Element);\n          break;\n        }\n\n      case 35\n      /* Hash */\n      :\n        {\n          addSpecialAttribute(\"id\", AttributeAction.Equals);\n          break;\n        }\n\n      case 91\n      /* LeftSquareBracket */\n      :\n        {\n          stripWhitespace(1); // Determine attribute name and namespace\n\n          let name;\n          let namespace = null;\n\n          if (selector.charCodeAt(selectorIndex) === 124\n          /* Pipe */\n          ) {\n            // Equivalent to no namespace\n            name = getName(1);\n          } else if (selector.startsWith(\"*|\", selectorIndex)) {\n            namespace = \"*\";\n            name = getName(2);\n          } else {\n            name = getName(0);\n\n            if (selector.charCodeAt(selectorIndex) === 124\n            /* Pipe */\n            && selector.charCodeAt(selectorIndex + 1) !== 61\n            /* Equal */\n            ) {\n              namespace = name;\n              name = getName(1);\n            }\n          }\n\n          stripWhitespace(0); // Determine comparison operation\n\n          let action = AttributeAction.Exists;\n          const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n\n          if (possibleAction) {\n            action = possibleAction;\n\n            if (selector.charCodeAt(selectorIndex + 1) !== 61\n            /* Equal */\n            ) {\n              throw new Error(\"Expected `=`\");\n            }\n\n            stripWhitespace(2);\n          } else if (selector.charCodeAt(selectorIndex) === 61\n          /* Equal */\n          ) {\n            action = AttributeAction.Equals;\n            stripWhitespace(1);\n          } // Determine value\n\n\n          let value = \"\";\n          let ignoreCase = null;\n\n          if (action !== \"exists\") {\n            if (isQuote(selector.charCodeAt(selectorIndex))) {\n              const quote = selector.charCodeAt(selectorIndex);\n              let sectionEnd = selectorIndex + 1;\n\n              while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {\n                sectionEnd += 1;\n              }\n\n              if (selector.charCodeAt(sectionEnd) !== quote) {\n                throw new Error(\"Attribute value didn't end\");\n              }\n\n              value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n              selectorIndex = sectionEnd + 1;\n            } else {\n              const valueStart = selectorIndex;\n\n              while (selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93\n              /* RightSquareBracket */\n              || isEscaped(selectorIndex))) {\n                selectorIndex += 1;\n              }\n\n              value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n            }\n\n            stripWhitespace(0); // See if we have a force ignore flag\n\n            const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20; // If the forceIgnore flag is set (either `i` or `s`), use that value\n\n            if (forceIgnore === 115\n            /* LowerS */\n            ) {\n              ignoreCase = false;\n              stripWhitespace(1);\n            } else if (forceIgnore === 105\n            /* LowerI */\n            ) {\n              ignoreCase = true;\n              stripWhitespace(1);\n            }\n          }\n\n          if (selector.charCodeAt(selectorIndex) !== 93\n          /* RightSquareBracket */\n          ) {\n            throw new Error(\"Attribute selector didn't terminate\");\n          }\n\n          selectorIndex += 1;\n          const attributeSelector = {\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value,\n            namespace,\n            ignoreCase\n          };\n          tokens.push(attributeSelector);\n          break;\n        }\n\n      case 58\n      /* Colon */\n      :\n        {\n          if (selector.charCodeAt(selectorIndex + 1) === 58\n          /* Colon */\n          ) {\n            tokens.push({\n              type: SelectorType.PseudoElement,\n              name: getName(2).toLowerCase(),\n              data: selector.charCodeAt(selectorIndex) === 40\n              /* LeftParenthesis */\n              ? readValueWithParenthesis() : null\n            });\n            continue;\n          }\n\n          const name = getName(1).toLowerCase();\n          let data = null;\n\n          if (selector.charCodeAt(selectorIndex) === 40\n          /* LeftParenthesis */\n          ) {\n            if (unpackPseudos.has(name)) {\n              if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n              }\n\n              data = [];\n              selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n\n              if (selector.charCodeAt(selectorIndex) !== 41\n              /* RightParenthesis */\n              ) {\n                throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n              }\n\n              selectorIndex += 1;\n            } else {\n              data = readValueWithParenthesis();\n\n              if (stripQuotesFromPseudos.has(name)) {\n                const quot = data.charCodeAt(0);\n\n                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {\n                  data = data.slice(1, -1);\n                }\n              }\n\n              data = unescapeCSS(data);\n            }\n          }\n\n          tokens.push({\n            type: SelectorType.Pseudo,\n            name,\n            data\n          });\n          break;\n        }\n\n      case 44\n      /* Comma */\n      :\n        {\n          finalizeSubselector();\n          tokens = [];\n          stripWhitespace(1);\n          break;\n        }\n\n      default:\n        {\n          if (selector.startsWith(\"/*\", selectorIndex)) {\n            const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n\n            if (endIndex < 0) {\n              throw new Error(\"Comment was not terminated\");\n            }\n\n            selectorIndex = endIndex + 2; // Remove leading whitespace\n\n            if (tokens.length === 0) {\n              stripWhitespace(0);\n            }\n\n            break;\n          }\n\n          let namespace = null;\n          let name;\n\n          if (firstChar === 42\n          /* Asterisk */\n          ) {\n            selectorIndex += 1;\n            name = \"*\";\n          } else if (firstChar === 124\n          /* Pipe */\n          ) {\n            name = \"\";\n\n            if (selector.charCodeAt(selectorIndex + 1) === 124\n            /* Pipe */\n            ) {\n              addTraversal(SelectorType.ColumnCombinator);\n              stripWhitespace(2);\n              break;\n            }\n          } else if (reName.test(selector.slice(selectorIndex))) {\n            name = getName(0);\n          } else {\n            break loop;\n          }\n\n          if (selector.charCodeAt(selectorIndex) === 124\n          /* Pipe */\n          && selector.charCodeAt(selectorIndex + 1) !== 124\n          /* Pipe */\n          ) {\n            namespace = name;\n\n            if (selector.charCodeAt(selectorIndex + 1) === 42\n            /* Asterisk */\n            ) {\n              name = \"*\";\n              selectorIndex += 2;\n            } else {\n              name = getName(1);\n            }\n          }\n\n          tokens.push(name === \"*\" ? {\n            type: SelectorType.Universal,\n            namespace\n          } : {\n            type: SelectorType.Tag,\n            name,\n            namespace\n          });\n        }\n    }\n  }\n\n  finalizeSubselector();\n  return selectorIndex;\n}","map":{"version":3,"names":["SelectorType","AttributeAction","reName","reEscape","actionTypes","Map","Element","Start","End","Any","Not","Hyphen","unpackPseudos","Set","isTraversal","selector","type","Adjacent","Child","Descendant","Parent","Sibling","ColumnCombinator","stripQuotesFromPseudos","funescape","_","escaped","escapedWhitespace","high","parseInt","String","fromCharCode","unescapeCSS","str","replace","isQuote","c","isWhitespace","parse","subselects","endIndex","parseSelector","length","Error","slice","selectorIndex","tokens","getName","offset","match","name","stripWhitespace","charCodeAt","readValueWithParenthesis","start","counter","isEscaped","pos","slashCount","ensureNotTraversal","addTraversal","push","addSpecialAttribute","action","Attribute","value","namespace","ignoreCase","finalizeSubselector","pop","loop","firstChar","Equals","startsWith","Exists","possibleAction","get","quote","sectionEnd","valueStart","forceIgnore","attributeSelector","PseudoElement","toLowerCase","data","has","quot","Pseudo","indexOf","test","Universal","Tag"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/css-what/lib/es/parse.js"],"sourcesContent":["import { SelectorType, AttributeAction, } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [126 /* Tilde */, AttributeAction.Element],\n    [94 /* Circumflex */, AttributeAction.Start],\n    [36 /* Dollar */, AttributeAction.End],\n    [42 /* Asterisk */, AttributeAction.Any],\n    [33 /* ExclamationMark */, AttributeAction.Not],\n    [124 /* Pipe */, AttributeAction.Hyphen],\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nexport function isTraversal(selector) {\n    switch (selector.type) {\n        case SelectorType.Adjacent:\n        case SelectorType.Child:\n        case SelectorType.Descendant:\n        case SelectorType.Parent:\n        case SelectorType.Sibling:\n        case SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 9 /* Tab */ ||\n        c === 10 /* NewLine */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nexport function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, `${selector}`, 0);\n    if (endIndex < selector.length) {\n        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while (selectorIndex < selector.length &&\n            isWhitespace(selector.charCodeAt(selectorIndex))) {\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n            if (selector.charCodeAt(selectorIndex) ===\n                40 /* LeftParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter++;\n            }\n            else if (selector.charCodeAt(selectorIndex) ===\n                41 /* RightParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({ type });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\",\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */\n    function finalizeSubselector() {\n        if (tokens.length &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while (selectorIndex < selector.length) {\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch (firstChar) {\n            // Whitespace\n            case 32 /* Space */:\n            case 9 /* Tab */:\n            case 10 /* NewLine */:\n            case 12 /* FormFeed */:\n            case 13 /* CarriageReturn */: {\n                if (tokens.length === 0 ||\n                    tokens[0].type !== SelectorType.Descendant) {\n                    ensureNotTraversal();\n                    tokens.push({ type: SelectorType.Descendant });\n                }\n                stripWhitespace(1);\n                break;\n            }\n            // Traversals\n            case 62 /* GreaterThan */: {\n                addTraversal(SelectorType.Child);\n                stripWhitespace(1);\n                break;\n            }\n            case 60 /* LessThan */: {\n                addTraversal(SelectorType.Parent);\n                stripWhitespace(1);\n                break;\n            }\n            case 126 /* Tilde */: {\n                addTraversal(SelectorType.Sibling);\n                stripWhitespace(1);\n                break;\n            }\n            case 43 /* Plus */: {\n                addTraversal(SelectorType.Adjacent);\n                stripWhitespace(1);\n                break;\n            }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */: {\n                addSpecialAttribute(\"class\", AttributeAction.Element);\n                break;\n            }\n            case 35 /* Hash */: {\n                addSpecialAttribute(\"id\", AttributeAction.Equals);\n                break;\n            }\n            case 91 /* LeftSquareBracket */: {\n                stripWhitespace(1);\n                // Determine attribute name and namespace\n                let name;\n                let namespace = null;\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n                    // Equivalent to no namespace\n                    name = getName(1);\n                }\n                else if (selector.startsWith(\"*|\", selectorIndex)) {\n                    namespace = \"*\";\n                    name = getName(2);\n                }\n                else {\n                    name = getName(0);\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                        selector.charCodeAt(selectorIndex + 1) !==\n                            61 /* Equal */) {\n                        namespace = name;\n                        name = getName(1);\n                    }\n                }\n                stripWhitespace(0);\n                // Determine comparison operation\n                let action = AttributeAction.Exists;\n                const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                if (possibleAction) {\n                    action = possibleAction;\n                    if (selector.charCodeAt(selectorIndex + 1) !==\n                        61 /* Equal */) {\n                        throw new Error(\"Expected `=`\");\n                    }\n                    stripWhitespace(2);\n                }\n                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n                    action = AttributeAction.Equals;\n                    stripWhitespace(1);\n                }\n                // Determine value\n                let value = \"\";\n                let ignoreCase = null;\n                if (action !== \"exists\") {\n                    if (isQuote(selector.charCodeAt(selectorIndex))) {\n                        const quote = selector.charCodeAt(selectorIndex);\n                        let sectionEnd = selectorIndex + 1;\n                        while (sectionEnd < selector.length &&\n                            (selector.charCodeAt(sectionEnd) !== quote ||\n                                isEscaped(sectionEnd))) {\n                            sectionEnd += 1;\n                        }\n                        if (selector.charCodeAt(sectionEnd) !== quote) {\n                            throw new Error(\"Attribute value didn't end\");\n                        }\n                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                        selectorIndex = sectionEnd + 1;\n                    }\n                    else {\n                        const valueStart = selectorIndex;\n                        while (selectorIndex < selector.length &&\n                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&\n                                selector.charCodeAt(selectorIndex) !==\n                                    93 /* RightSquareBracket */) ||\n                                isEscaped(selectorIndex))) {\n                            selectorIndex += 1;\n                        }\n                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                    }\n                    stripWhitespace(0);\n                    // See if we have a force ignore flag\n                    const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                    // If the forceIgnore flag is set (either `i` or `s`), use that value\n                    if (forceIgnore === 115 /* LowerS */) {\n                        ignoreCase = false;\n                        stripWhitespace(1);\n                    }\n                    else if (forceIgnore === 105 /* LowerI */) {\n                        ignoreCase = true;\n                        stripWhitespace(1);\n                    }\n                }\n                if (selector.charCodeAt(selectorIndex) !==\n                    93 /* RightSquareBracket */) {\n                    throw new Error(\"Attribute selector didn't terminate\");\n                }\n                selectorIndex += 1;\n                const attributeSelector = {\n                    type: SelectorType.Attribute,\n                    name,\n                    action,\n                    value,\n                    namespace,\n                    ignoreCase,\n                };\n                tokens.push(attributeSelector);\n                break;\n            }\n            case 58 /* Colon */: {\n                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n                    tokens.push({\n                        type: SelectorType.PseudoElement,\n                        name: getName(2).toLowerCase(),\n                        data: selector.charCodeAt(selectorIndex) ===\n                            40 /* LeftParenthesis */\n                            ? readValueWithParenthesis()\n                            : null,\n                    });\n                    continue;\n                }\n                const name = getName(1).toLowerCase();\n                let data = null;\n                if (selector.charCodeAt(selectorIndex) ===\n                    40 /* LeftParenthesis */) {\n                    if (unpackPseudos.has(name)) {\n                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                            throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                        if (selector.charCodeAt(selectorIndex) !==\n                            41 /* RightParenthesis */) {\n                            throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        data = readValueWithParenthesis();\n                        if (stripQuotesFromPseudos.has(name)) {\n                            const quot = data.charCodeAt(0);\n                            if (quot === data.charCodeAt(data.length - 1) &&\n                                isQuote(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                        }\n                        data = unescapeCSS(data);\n                    }\n                }\n                tokens.push({ type: SelectorType.Pseudo, name, data });\n                break;\n            }\n            case 44 /* Comma */: {\n                finalizeSubselector();\n                tokens = [];\n                stripWhitespace(1);\n                break;\n            }\n            default: {\n                if (selector.startsWith(\"/*\", selectorIndex)) {\n                    const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                    if (endIndex < 0) {\n                        throw new Error(\"Comment was not terminated\");\n                    }\n                    selectorIndex = endIndex + 2;\n                    // Remove leading whitespace\n                    if (tokens.length === 0) {\n                        stripWhitespace(0);\n                    }\n                    break;\n                }\n                let namespace = null;\n                let name;\n                if (firstChar === 42 /* Asterisk */) {\n                    selectorIndex += 1;\n                    name = \"*\";\n                }\n                else if (firstChar === 124 /* Pipe */) {\n                    name = \"\";\n                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n                        addTraversal(SelectorType.ColumnCombinator);\n                        stripWhitespace(2);\n                        break;\n                    }\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name = getName(0);\n                }\n                else {\n                    break loop;\n                }\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n                    namespace = name;\n                    if (selector.charCodeAt(selectorIndex + 1) ===\n                        42 /* Asterisk */) {\n                        name = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name = getName(1);\n                    }\n                }\n                tokens.push(name === \"*\"\n                    ? { type: SelectorType.Universal, namespace }\n                    : { type: SelectorType.Tag, name, namespace });\n            }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}