{"ast":null,"code":"\"use strict\";\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\n\nfunction detectEthereumProvider() {\n  let {\n    mustBeMetaMask = false,\n    silent = false,\n    timeout = 3000\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _validateInputs();\n\n  let handled = false;\n  return new Promise(resolve => {\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      });\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n      if (handled) {\n        return;\n      }\n\n      handled = true;\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum);\n      } else {\n        const message = mustBeMetaMask && ethereum ? 'Non-MetaMask window.ethereum detected.' : 'Unable to detect window.ethereum.';\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n\nmodule.exports = detectEthereumProvider;","map":{"version":3,"mappings":";AAYA;;;;;;;;;;;;;;;;;AAgBA,SAASA,sBAAT,GAIM;EAAA,IAJ0B;IAC9BC,cAAc,GAAG,KADa;IAE9BC,MAAM,GAAG,KAFqB;IAG9BC,OAAO,GAAG;EAHoB,CAI1B,uEAAF,EAAE;;EAEJC,eAAe;;EAEf,IAAIC,OAAO,GAAG,KAAd;EAEA,OAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAY;IAC7B,IAAIC,MAAM,CAACC,QAAX,EAAqB;MAEnBC,cAAc;IAEf,CAJD,MAIO;MAELF,MAAM,CAACG,gBAAP,CACE,sBADF,EAEED,cAFF,EAGE;QAAEE,IAAI,EAAE;MAAR,CAHF;MAMAC,UAAU,CAAC,MAAK;QACdH,cAAc;MACf,CAFS,EAEPP,OAFO,CAAV;IAGD;;IAED,SAASO,cAAT,GAAuB;MAErB,IAAIL,OAAJ,EAAa;QACX;MACD;;MACDA,OAAO,GAAG,IAAV;MAEAG,MAAM,CAACM,mBAAP,CAA2B,sBAA3B,EAAmDJ,cAAnD;MAEA,MAAM;QAAED;MAAF,IAAeD,MAArB;;MAEA,IAAIC,QAAQ,KAAK,CAACR,cAAD,IAAmBQ,QAAQ,CAACM,UAAjC,CAAZ,EAA0D;QACxDR,OAAO,CAACE,QAAD,CAAP;MACD,CAFD,MAEO;QAEL,MAAMO,OAAO,GAAGf,cAAc,IAAIQ,QAAlB,GACZ,wCADY,GAEZ,mCAFJ;QAIA,CAACP,MAAD,IAAWe,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4CF,OAA5C,CAAX;QACAT,OAAO,CAAC,IAAD,CAAP;MACD;IACF;EACF,CAzCM,CAAP;;EA2CA,SAASH,eAAT,GAAwB;IACtB,IAAI,OAAOH,cAAP,KAA0B,SAA9B,EAAyC;MACvC,MAAM,IAAIkB,KAAJ,CAAU,8EAAV,CAAN;IACD;;IACD,IAAI,OAAOjB,MAAP,KAAkB,SAAtB,EAAiC;MAC/B,MAAM,IAAIiB,KAAJ,CAAU,sEAAV,CAAN;IACD;;IACD,IAAI,OAAOhB,OAAP,KAAmB,QAAvB,EAAiC;MAC/B,MAAM,IAAIgB,KAAJ,CAAU,sEAAV,CAAN;IACD;EACF;AACF;;AAlFDC,iBAASpB,sBAAT","names":["detectEthereumProvider","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","window","ethereum","handleEthereum","addEventListener","once","setTimeout","removeEventListener","isMetaMask","message","console","error","Error","module"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}