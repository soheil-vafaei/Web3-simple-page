{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addressCases = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = (0, debug_1.default)(\"codec:wrap:address\");\n\nconst dispatch_1 = require(\"./dispatch\");\n\nconst errors_1 = require(\"./errors\");\n\nconst Utils = __importStar(require(\"./utils\"));\n\nconst EvmUtils = __importStar(require(\"../evm/utils\"));\n\nconst Messages = __importStar(require(\"./messages\"));\n\nconst web3_utils_1 = __importDefault(require(\"web3-utils\")); //no separate cases for contracts; even with loose turned off,\n//we consider these interchangeable\n\n\nconst addressFromStringCases = [addressFromHexString, addressFromPrefixlessHexString, addressFromOtherString //Please put after other string cases! Also, can yield\n];\nconst addressCasesBasic = [...addressFromStringCases, addressFromBoxedString, addressFromContractInput, addressFromCodecAddressLikeValue, addressFromCodecUdvtValue, addressFailureCase];\nexports.addressCases = [addressFromTypeValueInput, ...addressCasesBasic];\n\nfunction* addressFromHexString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  if (!Utils.isHexString(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a 0x-prefixed hex string\");\n  }\n\n  return validateNormalizeAndWrap(dataType, input, input, wrapOptions.name);\n}\n\nfunction* addressFromPrefixlessHexString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  if (!Utils.isPrefixlessHexString(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not an unprefixed hex string\");\n  }\n\n  return validateNormalizeAndWrap(dataType, \"0x\" + input, input, wrapOptions.name);\n}\n\nfunction* addressFromOtherString(dataType, input, wrapOptions) {\n  if (typeof input !== \"string\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a string\");\n  }\n\n  const request = {\n    kind: \"address\",\n    name: input\n  };\n  const response = yield request;\n\n  if (response.kind !== \"address\") {\n    throw new errors_1.BadResponseTypeError(request, response);\n  }\n\n  if (response.address === null) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, response.partiallyRecognized ? 5 : 3, response.reason);\n  } //we should be able to skip validation & normalization here\n\n\n  return wrapAsAppropriateType(dataType, response.address);\n}\n\nfunction* addressFromBoxedString(dataType, input, wrapOptions) {\n  if (!Utils.isBoxedString(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a boxed string\");\n  } //unbox and try again\n\n\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.valueOf(), wrapOptions, addressFromStringCases);\n}\n\nfunction* addressFromContractInput(dataType, input, wrapOptions) {\n  if (!Utils.isContractInput(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a contract-like object\");\n  }\n\n  return validateNormalizeAndWrap(dataType, input.address, input, wrapOptions.name);\n}\n\nfunction* addressFromCodecAddressLikeValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n\n  if (input.type.typeClass !== \"address\" && input.type.typeClass !== \"contract\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.wrappedTypeMessage(input.type));\n  }\n\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n\n  let address;\n\n  switch (input.type.typeClass) {\n    case \"address\":\n      address = input.value.asAddress;\n      break;\n\n    case \"contract\":\n      address = input.value.address;\n      break;\n    //other cases are impossible at this point\n  } //we should be able to skip validation/normalization here\n\n\n  return wrapAsAppropriateType(dataType, address);\n}\n\nfunction* addressFromCodecUdvtValue(dataType, input, wrapOptions) {\n  if (!Utils.isWrappedResult(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a wrapped result\");\n  }\n\n  if (input.type.typeClass !== \"userDefinedValueType\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, Messages.wrappedTypeMessage(input.type));\n  }\n\n  if (input.kind !== \"value\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.errorResultMessage);\n  }\n\n  return yield* addressFromCodecAddressLikeValue(dataType, input.value, wrapOptions);\n}\n\nfunction* addressFromTypeValueInput(dataType, input, wrapOptions) {\n  if (!Utils.isTypeValueInput(input)) {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 1, \"Input was not a type/value pair\");\n  }\n\n  if (input.type !== \"address\" && input.type !== \"contract\") {\n    throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 5, Messages.specifiedTypeMessage(input.type));\n  } //extract value & try again, with loose option turned on\n\n\n  return yield* (0, dispatch_1.wrapWithCases)(dataType, input.value, Object.assign(Object.assign({}, wrapOptions), {\n    loose: true\n  }), addressCasesBasic);\n}\n\nfunction* addressFailureCase(dataType, input, wrapOptions) {\n  throw new errors_1.TypeMismatchError(dataType, input, wrapOptions.name, 2, \"Input was not recognizable as an address\");\n}\n\nfunction validateAndNormalize(asAddress, dataType, //for errors\ninput, //for errors\nname //for errors\n) {\n  if (!Utils.isByteString(asAddress)) {\n    throw new errors_1.TypeMismatchError(dataType, input, name, 5, Messages.notABytestringMessage(\"Address\"));\n  }\n\n  if (asAddress.length !== 2 * EvmUtils.ADDRESS_SIZE + 2) {\n    throw new errors_1.TypeMismatchError(dataType, input, name, 5, Messages.wrongLengthMessage(\"address\", EvmUtils.ADDRESS_SIZE, (asAddress.length - 2) / 2));\n  }\n\n  if (!web3_utils_1.default.isAddress(asAddress)) {\n    throw new errors_1.TypeMismatchError(dataType, input, name, 6, //to beat the one from the yield case :P\n    Messages.checksumFailedMessage);\n  } //and normalize\n\n\n  return web3_utils_1.default.toChecksumAddress(asAddress);\n}\n\nfunction wrapAsAppropriateType(dataType, asAddress) {\n  //return address or contract value as appropriate\n  switch (dataType.typeClass) {\n    case \"address\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asAddress\n        }\n      };\n\n    case \"contract\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          kind: \"unknown\",\n          address: asAddress\n        }\n      };\n  }\n}\n\nfunction validateNormalizeAndWrap(dataType, asAddress, input, //for errors\nname //for errors\n) {\n  return wrapAsAppropriateType(dataType, validateAndNormalize(asAddress, dataType, input, name));\n}","map":{"version":3,"mappings":"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","names":["debug","addressFromStringCases","addressFromHexString","addressFromPrefixlessHexString","addressFromOtherString","addressCasesBasic","addressFromBoxedString","addressFromContractInput","addressFromCodecAddressLikeValue","addressFromCodecUdvtValue","addressFailureCase","exports","addressFromTypeValueInput","dataType","input","wrapOptions","errors_1","name","Utils","isHexString","validateNormalizeAndWrap","isPrefixlessHexString","request","kind","response","address","partiallyRecognized","reason","wrapAsAppropriateType","isBoxedString","valueOf","isContractInput","isWrappedResult","type","typeClass","Messages","wrappedTypeMessage","errorResultMessage","value","asAddress","isTypeValueInput","specifiedTypeMessage","Object","loose","validateAndNormalize","isByteString","notABytestringMessage","length","EvmUtils","ADDRESS_SIZE","wrongLengthMessage","web3_utils_1","isAddress","checksumFailedMessage","toChecksumAddress"],"sourceRoot":"","sources":["../../../lib/wrap/address.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}