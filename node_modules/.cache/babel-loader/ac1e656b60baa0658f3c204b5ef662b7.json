{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FabricEvmDefinition = void 0;\nexports.FabricEvmDefinition = {\n  initNetworkType(web3) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // web3 expects getId to return a hexString convertible to a number\n      // for fabric-evm we ignore the hexToNumber output formatter\n      overrides.getId(web3);\n    });\n  }\n\n};\nconst overrides = {\n  // The ts-ignores are ignoring the checks that are\n  // saying that web3.eth.net.getId is a function and doesn't\n  // have a `method` property, which it does\n  getId: web3 => {\n    // @ts-ignore\n    const _oldGetIdFormatter = web3.eth.net.getId.method.outputFormatter; // @ts-ignore\n\n    web3.eth.net.getId.method.outputFormatter = networkId => {\n      // chaincode-fabric-evm currently returns a \"fabric-evm\" string\n      // instead of a hex networkID. Instead of trying to decode the hexToNumber,\n      // let's just accept `fabric-evm` as a valid networkID for now.\n      return networkId;\n    };\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGaA,8BAAsB;EAC3BC,eAAe,CAACC,IAAD,EAAe;;MAClC;MACA;MACAC,SAAS,CAACC,KAAV,CAAgBF,IAAhB;IACD;EAAA;;AALgC,CAAtB;AAQb,MAAMC,SAAS,GAAG;EAChB;EACA;EACA;EACAC,KAAK,EAAGF,IAAD,IAAmB;IACxB;IACA,MAAMG,kBAAkB,GAAGH,IAAI,CAACI,GAAL,CAASC,GAAT,CAAaH,KAAb,CAAmBI,MAAnB,CAA0BC,eAArD,CAFwB,CAGxB;;IACAP,IAAI,CAACI,GAAL,CAASC,GAAT,CAAaH,KAAb,CAAmBI,MAAnB,CAA0BC,eAA1B,GAA6CC,SAAD,IAAyB;MACnE;MACA;MACA;MACA,OAAOA,SAAP;IACD,CALD;EAMD;AAde,CAAlB","names":["exports","initNetworkType","web3","overrides","getId","_oldGetIdFormatter","eth","net","method","outputFormatter","networkId"],"sourceRoot":"","sources":["../../../lib/shim/overloads/fabric-evm.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}