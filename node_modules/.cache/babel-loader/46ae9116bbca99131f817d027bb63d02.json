{"ast":null,"code":"import { decodeXML, decodeHTML, decodeHTMLStrict } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\n/** The level of entities to support. */\n\nexport var EntityLevel;\n\n(function (EntityLevel) {\n  /** Support only XML entities. */\n  EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n  /** Support HTML entities, which are a superset of XML entities. */\n\n  EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\n/** Determines whether some entities are allowed to be written without a trailing `;`. */\n\n\nexport var DecodingMode;\n\n(function (DecodingMode) {\n  /** Support legacy HTML entities. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Do not support legacy HTML entities. */\n\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n})(DecodingMode || (DecodingMode = {}));\n\nexport var EncodingMode;\n\n(function (EncodingMode) {\n  /**\n   * The output is UTF-8 encoded. Only characters that need escaping within\n   * XML will be escaped.\n   */\n  EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n  /**\n   * The output consists only of ASCII characters. Characters that need\n   * escaping within HTML, and characters that aren't ASCII characters will\n   * be escaped.\n   */\n\n  EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n  /**\n   * Encode all characters that have an equivalent entity, as well as all\n   * characters that are not ASCII characters.\n   */\n\n  EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n  /**\n   * Encode all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n\n  EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n  /**\n   * Encode all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n\n  EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\n\n\nexport function decode(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === DecodingMode.Strict) {\n      return decodeHTMLStrict(data);\n    }\n\n    return decodeHTML(data);\n  }\n\n  return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\n\nexport function decodeStrict(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === DecodingMode.Legacy) {\n      return decodeHTML(data);\n    }\n\n    return decodeHTMLStrict(data);\n  }\n\n  return decodeXML(data);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\n\nexport function encode(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options; // Mode `UTF8` just escapes XML entities\n\n  if (opts.mode === EncodingMode.UTF8) return escapeUTF8(data);\n  if (opts.mode === EncodingMode.Attribute) return escapeAttribute(data);\n  if (opts.mode === EncodingMode.Text) return escapeText(data);\n\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === EncodingMode.ASCII) {\n      return encodeNonAsciiHTML(data);\n    }\n\n    return encodeHTML(data);\n  } // ASCII and Extensive are equivalent\n\n\n  return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML, // Legacy aliases (deprecated)\nencodeHTML as encodeHTML4, encodeHTML as encodeHTML5 } from \"./encode.js\";\nexport { decodeXML, decodeHTML, decodeHTMLStrict, // Legacy aliases (deprecated)\ndecodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict } from \"./decode.js\";","map":{"version":3,"mappings":"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","names":["decodeXML","decodeHTML","decodeHTMLStrict","encodeHTML","encodeNonAsciiHTML","encodeXML","escapeUTF8","escapeAttribute","escapeText","EntityLevel","DecodingMode","EncodingMode","decode","data","options","XML","opts","level","HTML","mode","Strict","decodeStrict","Legacy","encode","UTF8","Attribute","Text","ASCII","escape","encodeHTML4","encodeHTML5","decodeHTML4","decodeHTML5","decodeHTML4Strict","decodeHTML5Strict","decodeXMLStrict"],"sourceRoot":"https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/","sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}