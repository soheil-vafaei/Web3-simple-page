{"ast":null,"code":"export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n  var MinRng = rng.min();\n  var NumValues = rng.max() - rng.min() + 1;\n\n  if (rangeSize <= NumValues) {\n    var nrng_1 = rng;\n    var MaxAllowed = NumValues - NumValues % rangeSize;\n\n    while (true) {\n      var out = nrng_1.unsafeNext();\n      var deltaV = out - MinRng;\n\n      if (deltaV < MaxAllowed) {\n        return deltaV % rangeSize;\n      }\n    }\n  }\n\n  var FinalNumValues = NumValues * NumValues;\n  var NumIterations = 2;\n\n  while (FinalNumValues < rangeSize) {\n    FinalNumValues *= NumValues;\n    ++NumIterations;\n  }\n\n  var MaxAcceptedRandom = rangeSize * Math.floor(1 * FinalNumValues / rangeSize);\n  var nrng = rng;\n\n  while (true) {\n    var value = 0;\n\n    for (var num = 0; num !== NumIterations; ++num) {\n      var out = nrng.unsafeNext();\n      value = NumValues * value + (out - MinRng);\n    }\n\n    if (value < MaxAcceptedRandom) {\n      var inDiff = value - rangeSize * Math.floor(1 * value / rangeSize);\n      return inDiff;\n    }\n  }\n}","map":{"version":3,"names":["unsafeUniformIntDistributionInternal","rangeSize","rng","MinRng","min","NumValues","max","nrng_1","MaxAllowed","out","unsafeNext","deltaV","FinalNumValues","NumIterations","MaxAcceptedRandom","Math","floor","nrng","value","num","inDiff"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/pure-rand/lib/esm/distribution/internals/UnsafeUniformIntDistributionInternal.js"],"sourcesContent":["export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n    var MinRng = rng.min();\n    var NumValues = rng.max() - rng.min() + 1;\n    if (rangeSize <= NumValues) {\n        var nrng_1 = rng;\n        var MaxAllowed = NumValues - (NumValues % rangeSize);\n        while (true) {\n            var out = nrng_1.unsafeNext();\n            var deltaV = out - MinRng;\n            if (deltaV < MaxAllowed) {\n                return deltaV % rangeSize;\n            }\n        }\n    }\n    var FinalNumValues = NumValues * NumValues;\n    var NumIterations = 2;\n    while (FinalNumValues < rangeSize) {\n        FinalNumValues *= NumValues;\n        ++NumIterations;\n    }\n    var MaxAcceptedRandom = rangeSize * Math.floor((1 * FinalNumValues) / rangeSize);\n    var nrng = rng;\n    while (true) {\n        var value = 0;\n        for (var num = 0; num !== NumIterations; ++num) {\n            var out = nrng.unsafeNext();\n            value = NumValues * value + (out - MinRng);\n        }\n        if (value < MaxAcceptedRandom) {\n            var inDiff = value - rangeSize * Math.floor((1 * value) / rangeSize);\n            return inDiff;\n        }\n    }\n}\n"],"mappings":"AAAA,OAAO,SAASA,oCAAT,CAA8CC,SAA9C,EAAyDC,GAAzD,EAA8D;EACjE,IAAIC,MAAM,GAAGD,GAAG,CAACE,GAAJ,EAAb;EACA,IAAIC,SAAS,GAAGH,GAAG,CAACI,GAAJ,KAAYJ,GAAG,CAACE,GAAJ,EAAZ,GAAwB,CAAxC;;EACA,IAAIH,SAAS,IAAII,SAAjB,EAA4B;IACxB,IAAIE,MAAM,GAAGL,GAAb;IACA,IAAIM,UAAU,GAAGH,SAAS,GAAIA,SAAS,GAAGJ,SAA1C;;IACA,OAAO,IAAP,EAAa;MACT,IAAIQ,GAAG,GAAGF,MAAM,CAACG,UAAP,EAAV;MACA,IAAIC,MAAM,GAAGF,GAAG,GAAGN,MAAnB;;MACA,IAAIQ,MAAM,GAAGH,UAAb,EAAyB;QACrB,OAAOG,MAAM,GAAGV,SAAhB;MACH;IACJ;EACJ;;EACD,IAAIW,cAAc,GAAGP,SAAS,GAAGA,SAAjC;EACA,IAAIQ,aAAa,GAAG,CAApB;;EACA,OAAOD,cAAc,GAAGX,SAAxB,EAAmC;IAC/BW,cAAc,IAAIP,SAAlB;IACA,EAAEQ,aAAF;EACH;;EACD,IAAIC,iBAAiB,GAAGb,SAAS,GAAGc,IAAI,CAACC,KAAL,CAAY,IAAIJ,cAAL,GAAuBX,SAAlC,CAApC;EACA,IAAIgB,IAAI,GAAGf,GAAX;;EACA,OAAO,IAAP,EAAa;IACT,IAAIgB,KAAK,GAAG,CAAZ;;IACA,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAKN,aAA1B,EAAyC,EAAEM,GAA3C,EAAgD;MAC5C,IAAIV,GAAG,GAAGQ,IAAI,CAACP,UAAL,EAAV;MACAQ,KAAK,GAAGb,SAAS,GAAGa,KAAZ,IAAqBT,GAAG,GAAGN,MAA3B,CAAR;IACH;;IACD,IAAIe,KAAK,GAAGJ,iBAAZ,EAA+B;MAC3B,IAAIM,MAAM,GAAGF,KAAK,GAAGjB,SAAS,GAAGc,IAAI,CAACC,KAAL,CAAY,IAAIE,KAAL,GAAcjB,SAAzB,CAAjC;MACA,OAAOmB,MAAP;IACH;EACJ;AACJ"},"metadata":{},"sourceType":"module"}