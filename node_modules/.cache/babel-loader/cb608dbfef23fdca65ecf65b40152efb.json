{"ast":null,"code":"import { Stream, stream } from '../../stream/Stream.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { decorateProperty } from './DecorateProperty.js';\nimport { RunnerIterator } from './RunnerIterator.js';\nimport { SourceValuesIterator } from './SourceValuesIterator.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nimport { asyncReportRunDetails, reportRunDetails } from './utils/RunDetailsFormatter.js';\n\nfunction runIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n  const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n\n  for (const v of runner) {\n    const out = property.run(v);\n    runner.handleResult(out);\n  }\n\n  return runner.runExecution;\n}\n\nasync function asyncRunIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n  const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n\n  for (const v of runner) {\n    const out = await property.run(v);\n    runner.handleResult(out);\n  }\n\n  return runner.runExecution;\n}\n\nfunction runnerPathWalker(valueProducers, shrink, path) {\n  const pathPoints = path.split(':');\n  const pathStream = stream(valueProducers).drop(pathPoints.length > 0 ? +pathPoints[0] : 0).map(producer => producer());\n  const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n  return stream(pathWalk(adaptedPath, pathStream, shrink)).map(v => () => v);\n}\n\nfunction buildInitialValues(valueProducers, shrink, qParams) {\n  if (qParams.path.length === 0) {\n    return stream(valueProducers);\n  }\n\n  return runnerPathWalker(valueProducers, shrink, qParams.path);\n}\n\nfunction check(rawProperty, params) {\n  if (rawProperty == null || rawProperty.generate == null) throw new Error('Invalid property encountered, please use a valid property');\n  if (rawProperty.run == null) throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n  const qParams = QualifiedParameters.read(Object.assign(Object.assign({}, readConfigureGlobal()), params));\n  if (qParams.reporter !== null && qParams.asyncReporter !== null) throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n  if (qParams.asyncReporter !== null && !rawProperty.isAsync()) throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n  const property = decorateProperty(rawProperty, qParams);\n  const generator = toss(property, qParams.seed, qParams.randomType, qParams.examples);\n  const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n  const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n  const shrink = property.shrink.bind(property);\n  const initialValues = buildInitialValues(generator, shrink, qParams);\n  const sourceValues = new SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n  const finalShrink = !qParams.endOnFailure ? shrink : Stream.nil;\n  return property.isAsync() ? asyncRunIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then(e => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams)) : runIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\n\nfunction assert(property, params) {\n  const out = check(property, params);\n  if (property.isAsync()) return out.then(asyncReportRunDetails);else reportRunDetails(out);\n}\n\nexport { check, assert };","map":{"version":3,"names":["Stream","stream","readConfigureGlobal","QualifiedParameters","decorateProperty","RunnerIterator","SourceValuesIterator","toss","pathWalk","asyncReportRunDetails","reportRunDetails","runIt","property","shrink","sourceValues","verbose","interruptedAsFailure","runner","v","out","run","handleResult","runExecution","asyncRunIt","runnerPathWalker","valueProducers","path","pathPoints","split","pathStream","drop","length","map","producer","adaptedPath","slice","join","buildInitialValues","qParams","check","rawProperty","params","generate","Error","read","Object","assign","reporter","asyncReporter","isAsync","generator","seed","randomType","examples","maxInitialIterations","indexOf","numRuns","maxSkips","maxSkipsPerRun","bind","initialValues","finalShrink","endOnFailure","nil","markInterruptAsFailure","then","e","toRunDetails","assert"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/fast-check/lib/esm/check/runner/Runner.js"],"sourcesContent":["import { Stream, stream } from '../../stream/Stream.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { decorateProperty } from './DecorateProperty.js';\nimport { RunnerIterator } from './RunnerIterator.js';\nimport { SourceValuesIterator } from './SourceValuesIterator.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nimport { asyncReportRunDetails, reportRunDetails } from './utils/RunDetailsFormatter.js';\nfunction runIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nasync function asyncRunIt(property, shrink, sourceValues, verbose, interruptedAsFailure) {\n    const runner = new RunnerIterator(sourceValues, shrink, verbose, interruptedAsFailure);\n    for (const v of runner) {\n        const out = await property.run(v);\n        runner.handleResult(out);\n    }\n    return runner.runExecution;\n}\nfunction runnerPathWalker(valueProducers, shrink, path) {\n    const pathPoints = path.split(':');\n    const pathStream = stream(valueProducers)\n        .drop(pathPoints.length > 0 ? +pathPoints[0] : 0)\n        .map((producer) => producer());\n    const adaptedPath = ['0', ...pathPoints.slice(1)].join(':');\n    return stream(pathWalk(adaptedPath, pathStream, shrink)).map((v) => () => v);\n}\nfunction buildInitialValues(valueProducers, shrink, qParams) {\n    if (qParams.path.length === 0) {\n        return stream(valueProducers);\n    }\n    return runnerPathWalker(valueProducers, shrink, qParams.path);\n}\nfunction check(rawProperty, params) {\n    if (rawProperty == null || rawProperty.generate == null)\n        throw new Error('Invalid property encountered, please use a valid property');\n    if (rawProperty.run == null)\n        throw new Error('Invalid property encountered, please use a valid property not an arbitrary');\n    const qParams = QualifiedParameters.read(Object.assign(Object.assign({}, readConfigureGlobal()), params));\n    if (qParams.reporter !== null && qParams.asyncReporter !== null)\n        throw new Error('Invalid parameters encountered, reporter and asyncReporter cannot be specified together');\n    if (qParams.asyncReporter !== null && !rawProperty.isAsync())\n        throw new Error('Invalid parameters encountered, only asyncProperty can be used when asyncReporter specified');\n    const property = decorateProperty(rawProperty, qParams);\n    const generator = toss(property, qParams.seed, qParams.randomType, qParams.examples);\n    const maxInitialIterations = qParams.path.indexOf(':') === -1 ? qParams.numRuns : -1;\n    const maxSkips = qParams.numRuns * qParams.maxSkipsPerRun;\n    const shrink = property.shrink.bind(property);\n    const initialValues = buildInitialValues(generator, shrink, qParams);\n    const sourceValues = new SourceValuesIterator(initialValues, maxInitialIterations, maxSkips);\n    const finalShrink = !qParams.endOnFailure ? shrink : Stream.nil;\n    return property.isAsync()\n        ? asyncRunIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).then((e) => e.toRunDetails(qParams.seed, qParams.path, maxSkips, qParams))\n        : runIt(property, finalShrink, sourceValues, qParams.verbose, qParams.markInterruptAsFailure).toRunDetails(qParams.seed, qParams.path, maxSkips, qParams);\n}\nfunction assert(property, params) {\n    const out = check(property, params);\n    if (property.isAsync())\n        return out.then(asyncReportRunDetails);\n    else\n        reportRunDetails(out);\n}\nexport { check, assert };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}