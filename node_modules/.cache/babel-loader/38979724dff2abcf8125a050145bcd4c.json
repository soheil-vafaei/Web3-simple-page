{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\n\nvar secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n\nvar externals_1 = require(\"./externals\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar types_1 = require(\"./types\");\n\nfunction ecsign(msgHash, privateKey, chainId) {\n  var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey),\n      signature = _a.signature,\n      recovery = _a.recid;\n\n  var r = Buffer.from(signature.slice(0, 32));\n  var s = Buffer.from(signature.slice(32, 64));\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n\n    var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;\n    return {\n      r: r,\n      s: s,\n      v: v_1\n    };\n  }\n\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);\n  return {\n    r: r,\n    s: s,\n    v: v\n  };\n}\n\nexports.ecsign = ecsign;\n\nfunction calculateSigRecovery(v, chainId) {\n  var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);\n  if (vBN.eqn(0) || vBN.eqn(1)) return (0, types_1.toType)(v, types_1.TypeOutput.BN);\n\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n\n  var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\nfunction isValidSigRecovery(recovery) {\n  var rec = new externals_1.BN(recovery);\n  return rec.eqn(0) || rec.eqn(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\n\n\nvar ecrecover = function (msgHash, v, r, s, chainId) {\n  var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n  return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\n\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\n\nvar toRpcSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n\n\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\n\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\n\nvar toCompactSig = function (v, r, s, chainId) {\n  var recovery = calculateSigRecovery(v, chainId);\n\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);\n  var ss = s;\n\n  if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\n\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\n\nvar fromRpcSig = function (sig) {\n  var buf = (0, bytes_1.toBuffer)(sig);\n  var r;\n  var s;\n  var v;\n\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  } // support both versions of `eth_sign` responses\n\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: r,\n    s: s\n  };\n};\n\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\n\nvar isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n  if (homesteadOrLater === void 0) {\n    homesteadOrLater = true;\n  }\n\n  var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n\n  var rBN = new externals_1.BN(r);\n  var sBN = new externals_1.BN(s);\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\n\nvar hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(message.length), 'utf-8');\n  return (0, hash_1.keccak)(Buffer.concat([prefix, message]));\n};\n\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"mappings":"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","names":["ecsign","msgHash","privateKey","chainId","signature","recovery","r","Buffer","from","slice","s","Number","isSafeInteger","Error","v_1","v","chainIdBN","types_1","BN","muln","addn","toArrayLike","exports","calculateSigRecovery","vBN","eqn","subn","sub","isValidSigRecovery","rec","externals_1","ecrecover","concat","senderPubKey","toNumber","toRpcSig","toCompactSig","vn","ss","fromRpcSig","sig","buf","length","isValidSignature","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","isZero","gt","cmp","hashPersonalMessage","message","prefix"],"sourceRoot":"","sources":["../src/signature.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}