{"ast":null,"code":"const TruffleError = require(\"@truffle/error\");\n\nconst utils = require(\"./utils\");\n\nconst defaultGas = 90000;\n\nclass StatusError extends TruffleError {\n  constructor(args, tx, receipt, reason) {\n    let message;\n    const gasLimit = args.gas || defaultGas;\n    let reasonString = \"\";\n    if (reason) reasonString = `Reason given: ${reason}.`;\n\n    if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n      message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"     - has enough gas to execute the full transaction.\\n\" + \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n    } else {\n      message = `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `require` statements.\\n\" + \"     - does not trigger a Solidity `revert` statement.\\n\";\n    }\n\n    super(message);\n    this.tx = tx;\n    this.receipt = receipt;\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports = StatusError;","map":{"version":3,"names":["TruffleError","require","utils","defaultGas","StatusError","constructor","args","tx","receipt","reason","message","gasLimit","gas","reasonString","bigNumberify","gasUsed","eq","module","exports"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/@truffle/contract/lib/statuserror.js"],"sourcesContent":["const TruffleError = require(\"@truffle/error\");\nconst utils = require(\"./utils\");\n\nconst defaultGas = 90000;\n\nclass StatusError extends TruffleError {\n  constructor(args, tx, receipt, reason) {\n    let message;\n    const gasLimit = args.gas || defaultGas;\n    let reasonString = \"\";\n\n    if (reason) reasonString = `Reason given: ${reason}.`;\n\n    if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n      message =\n        \"Transaction: \" +\n        tx +\n        \" exited with an error (status 0) after consuming all gas.\\n\" +\n        \"     Please check that the transaction:\\n\" +\n        \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" +\n        \"     - has enough gas to execute the full transaction.\\n\" +\n        \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n    } else {\n      message =\n        `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` +\n        \"     Please check that the transaction:\\n\" +\n        \"     - satisfies all conditions set by Solidity `require` statements.\\n\" +\n        \"     - does not trigger a Solidity `revert` statement.\\n\";\n    }\n\n    super(message);\n    this.tx = tx;\n    this.receipt = receipt;\n    this.reason = reason;\n  }\n}\n\nmodule.exports = StatusError;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,UAAU,GAAG,KAAnB;;AAEA,MAAMC,WAAN,SAA0BJ,YAA1B,CAAuC;EACrCK,WAAW,CAACC,IAAD,EAAOC,EAAP,EAAWC,OAAX,EAAoBC,MAApB,EAA4B;IACrC,IAAIC,OAAJ;IACA,MAAMC,QAAQ,GAAGL,IAAI,CAACM,GAAL,IAAYT,UAA7B;IACA,IAAIU,YAAY,GAAG,EAAnB;IAEA,IAAIJ,MAAJ,EAAYI,YAAY,GAAI,iBAAgBJ,MAAO,GAAvC;;IAEZ,IAAIP,KAAK,CAACY,YAAN,CAAmBN,OAAO,CAACO,OAA3B,EAAoCC,EAApC,CAAuCd,KAAK,CAACY,YAAN,CAAmBH,QAAnB,CAAvC,CAAJ,EAA0E;MACxED,OAAO,GACL,kBACAH,EADA,GAEA,6DAFA,GAGA,2CAHA,GAIA,wEAJA,GAKA,0DALA,GAMA,kGAPF;IAQD,CATD,MASO;MACLG,OAAO,GACJ,gBAAeH,EAAG,qCAAoCM,YAAa,IAApE,GACA,2CADA,GAEA,yEAFA,GAGA,0DAJF;IAKD;;IAED,MAAMH,OAAN;IACA,KAAKH,EAAL,GAAUA,EAAV;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;;AA7BoC;;AAgCvCQ,MAAM,CAACC,OAAP,GAAiBd,WAAjB"},"metadata":{},"sourceType":"script"}