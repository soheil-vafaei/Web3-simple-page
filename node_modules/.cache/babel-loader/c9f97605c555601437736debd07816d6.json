{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\n\nfunction dotAdapter(a) {\n  let currentLength = a[0].length;\n\n  for (let index = 1; index !== a.length; ++index) {\n    currentLength += 1 + a[index].length;\n\n    if (currentLength > 64) {\n      return {\n        adapted: true,\n        value: a.slice(0, index)\n      };\n    }\n  }\n\n  return {\n    adapted: false,\n    value: a\n  };\n}\n\nfunction dotMapper(a) {\n  return a.join('.');\n}\n\nfunction dotUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('.');\n}\n\nfunction atMapper(data) {\n  return `${data[0]}@${data[1]}`;\n}\n\nfunction atUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('@', 2);\n}\n\nexport function emailAddress() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n  const atextArb = buildLowerAlphaNumericArbitrary(others);\n  const localPartArb = adapter(array(stringOf(atextArb, {\n    minLength: 1,\n    maxLength: 64,\n    size: constraints.size\n  }), {\n    minLength: 1,\n    maxLength: 32,\n    size: constraints.size\n  }), dotAdapter).map(dotMapper, dotUnmapper);\n  return tuple(localPartArb, domain({\n    size: constraints.size\n  })).map(atMapper, atUnmapper);\n}","map":{"version":3,"names":["array","buildLowerAlphaNumericArbitrary","domain","stringOf","tuple","adapter","dotAdapter","a","currentLength","length","index","adapted","value","slice","dotMapper","join","dotUnmapper","Error","split","atMapper","data","atUnmapper","emailAddress","constraints","others","atextArb","localPartArb","minLength","maxLength","size","map"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/fast-check/lib/esm/arbitrary/emailAddress.js"],"sourcesContent":["import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\nfunction dotAdapter(a) {\n    let currentLength = a[0].length;\n    for (let index = 1; index !== a.length; ++index) {\n        currentLength += 1 + a[index].length;\n        if (currentLength > 64) {\n            return { adapted: true, value: a.slice(0, index) };\n        }\n    }\n    return { adapted: false, value: a };\n}\nfunction dotMapper(a) {\n    return a.join('.');\n}\nfunction dotUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('.');\n}\nfunction atMapper(data) {\n    return `${data[0]}@${data[1]}`;\n}\nfunction atUnmapper(value) {\n    if (typeof value !== 'string') {\n        throw new Error('Unsupported');\n    }\n    return value.split('@', 2);\n}\nexport function emailAddress(constraints = {}) {\n    const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n    const atextArb = buildLowerAlphaNumericArbitrary(others);\n    const localPartArb = adapter(array(stringOf(atextArb, {\n        minLength: 1,\n        maxLength: 64,\n        size: constraints.size,\n    }), { minLength: 1, maxLength: 32, size: constraints.size }), dotAdapter).map(dotMapper, dotUnmapper);\n    return tuple(localPartArb, domain({ size: constraints.size })).map(atMapper, atUnmapper);\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,+BAAT,QAAgD,yDAAhD;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,kCAAxB;;AACA,SAASC,UAAT,CAAoBC,CAApB,EAAuB;EACnB,IAAIC,aAAa,GAAGD,CAAC,CAAC,CAAD,CAAD,CAAKE,MAAzB;;EACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,KAAKH,CAAC,CAACE,MAAhC,EAAwC,EAAEC,KAA1C,EAAiD;IAC7CF,aAAa,IAAI,IAAID,CAAC,CAACG,KAAD,CAAD,CAASD,MAA9B;;IACA,IAAID,aAAa,GAAG,EAApB,EAAwB;MACpB,OAAO;QAAEG,OAAO,EAAE,IAAX;QAAiBC,KAAK,EAAEL,CAAC,CAACM,KAAF,CAAQ,CAAR,EAAWH,KAAX;MAAxB,CAAP;IACH;EACJ;;EACD,OAAO;IAAEC,OAAO,EAAE,KAAX;IAAkBC,KAAK,EAAEL;EAAzB,CAAP;AACH;;AACD,SAASO,SAAT,CAAmBP,CAAnB,EAAsB;EAClB,OAAOA,CAAC,CAACQ,IAAF,CAAO,GAAP,CAAP;AACH;;AACD,SAASC,WAAT,CAAqBJ,KAArB,EAA4B;EACxB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC3B,MAAM,IAAIK,KAAJ,CAAU,aAAV,CAAN;EACH;;EACD,OAAOL,KAAK,CAACM,KAAN,CAAY,GAAZ,CAAP;AACH;;AACD,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EACpB,OAAQ,GAAEA,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,EAA7B;AACH;;AACD,SAASC,UAAT,CAAoBT,KAApB,EAA2B;EACvB,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC3B,MAAM,IAAIK,KAAJ,CAAU,aAAV,CAAN;EACH;;EACD,OAAOL,KAAK,CAACM,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAP;AACH;;AACD,OAAO,SAASI,YAAT,GAAwC;EAAA,IAAlBC,WAAkB,uEAAJ,EAAI;EAC3C,MAAMC,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,CAAf;EACA,MAAMC,QAAQ,GAAGxB,+BAA+B,CAACuB,MAAD,CAAhD;EACA,MAAME,YAAY,GAAGrB,OAAO,CAACL,KAAK,CAACG,QAAQ,CAACsB,QAAD,EAAW;IAClDE,SAAS,EAAE,CADuC;IAElDC,SAAS,EAAE,EAFuC;IAGlDC,IAAI,EAAEN,WAAW,CAACM;EAHgC,CAAX,CAAT,EAI9B;IAAEF,SAAS,EAAE,CAAb;IAAgBC,SAAS,EAAE,EAA3B;IAA+BC,IAAI,EAAEN,WAAW,CAACM;EAAjD,CAJ8B,CAAN,EAIkCvB,UAJlC,CAAP,CAIqDwB,GAJrD,CAIyDhB,SAJzD,EAIoEE,WAJpE,CAArB;EAKA,OAAOZ,KAAK,CAACsB,YAAD,EAAexB,MAAM,CAAC;IAAE2B,IAAI,EAAEN,WAAW,CAACM;EAApB,CAAD,CAArB,CAAL,CAAwDC,GAAxD,CAA4DX,QAA5D,EAAsEE,UAAtE,CAAP;AACH"},"metadata":{},"sourceType":"module"}