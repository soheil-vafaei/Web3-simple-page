{"ast":null,"code":"import { AttributeAction, SelectorType } from \"css-what\";\nconst procedure = new Map([[SelectorType.Universal, 50], [SelectorType.Tag, 30], [SelectorType.Attribute, 1], [SelectorType.Pseudo, 0]]);\nexport function isTraversal(token) {\n  return !procedure.has(token.type);\n}\nconst attributes = new Map([[AttributeAction.Exists, 10], [AttributeAction.Equals, 8], [AttributeAction.Not, 7], [AttributeAction.Start, 6], [AttributeAction.End, 6], [AttributeAction.Any, 5]]);\n/**\n * Sort the parts of the passed selector,\n * as there is potential for optimization\n * (some types of selectors are faster than others)\n *\n * @param arr Selector to sort\n */\n\nexport default function sortByProcedure(arr) {\n  const procs = arr.map(getProcedure);\n\n  for (let i = 1; i < arr.length; i++) {\n    const procNew = procs[i];\n    if (procNew < 0) continue;\n\n    for (let j = i - 1; j >= 0 && procNew < procs[j]; j--) {\n      const token = arr[j + 1];\n      arr[j + 1] = arr[j];\n      arr[j] = token;\n      procs[j + 1] = procs[j];\n      procs[j] = procNew;\n    }\n  }\n}\n\nfunction getProcedure(token) {\n  var _a, _b;\n\n  let proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;\n\n  if (token.type === SelectorType.Attribute) {\n    proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;\n\n    if (token.action === AttributeAction.Equals && token.name === \"id\") {\n      // Prefer ID selectors (eg. #ID)\n      proc = 9;\n    }\n\n    if (token.ignoreCase) {\n      /*\n       * IgnoreCase adds some overhead, prefer \"normal\" token\n       * this is a binary operation, to ensure it's still an int\n       */\n      proc >>= 1;\n    }\n  } else if (token.type === SelectorType.Pseudo) {\n    if (!token.data) {\n      proc = 3;\n    } else if (token.name === \"has\" || token.name === \"contains\") {\n      proc = 0; // Expensive in any case\n    } else if (Array.isArray(token.data)) {\n      // Eg. :matches, :not\n      proc = Math.min(...token.data.map(d => Math.min(...d.map(getProcedure)))); // If we have traversals, try to avoid executing this selector\n\n      if (proc < 0) {\n        proc = 0;\n      }\n    } else {\n      proc = 2;\n    }\n  }\n\n  return proc;\n}","map":{"version":3,"mappings":"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","names":["AttributeAction","SelectorType","procedure","Map","Universal","Tag","Attribute","Pseudo","isTraversal","token","has","type","attributes","Exists","Equals","Not","Start","End","Any","sortByProcedure","arr","procs","map","getProcedure","i","length","procNew","j","proc","get","_a","action","_b","name","ignoreCase","data","Array","isArray","Math","min","d"],"sourceRoot":"https://raw.githubusercontent.com/fb55/css-select/0f0725a9dfeddd2fdb54eda9656cdbab5bbf6be6/src/","sources":["sort.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}