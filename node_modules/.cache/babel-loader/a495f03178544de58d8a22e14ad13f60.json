{"ast":null,"code":"import { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\n\nfunction base64String() {\n  let constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    minLength: unscaledMinLength = 0,\n    maxLength: unscaledMaxLength = MaxLengthUpperBound,\n    size\n  } = constraints;\n  const minLength = unscaledMinLength + 3 - (unscaledMinLength + 3) % 4;\n  const maxLength = unscaledMaxLength - unscaledMaxLength % 4;\n  const requestedSize = constraints.maxLength === undefined && size === undefined ? '=' : size;\n  if (minLength > maxLength) throw new Error('Minimal length should be inferior or equal to maximal length');\n  if (minLength % 4 !== 0) throw new Error('Minimal length of base64 strings must be a multiple of 4');\n  if (maxLength % 4 !== 0) throw new Error('Maximal length of base64 strings must be a multiple of 4');\n  const charArbitrary = base64();\n  const experimentalCustomSlices = createSlicesForString(charArbitrary, codePointsToStringUnmapper);\n  const enrichedConstraints = {\n    minLength,\n    maxLength,\n    size: requestedSize,\n    experimentalCustomSlices\n  };\n  return array(charArbitrary, enrichedConstraints).map(codePointsToStringMapper, codePointsToStringUnmapper).map(stringToBase64Mapper, stringToBase64Unmapper);\n}\n\nexport { base64String };","map":{"version":3,"names":["array","base64","MaxLengthUpperBound","codePointsToStringMapper","codePointsToStringUnmapper","stringToBase64Mapper","stringToBase64Unmapper","createSlicesForString","base64String","constraints","minLength","unscaledMinLength","maxLength","unscaledMaxLength","size","requestedSize","undefined","Error","charArbitrary","experimentalCustomSlices","enrichedConstraints","map"],"sources":["/Users/soheilvafaei/Documents/project/web/resume/ex7/node_modules/fast-check/lib/esm/arbitrary/base64String.js"],"sourcesContent":["import { array } from './array.js';\nimport { base64 } from './base64.js';\nimport { MaxLengthUpperBound } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { codePointsToStringMapper, codePointsToStringUnmapper } from './_internals/mappers/CodePointsToString.js';\nimport { stringToBase64Mapper, stringToBase64Unmapper } from './_internals/mappers/StringToBase64.js';\nimport { createSlicesForString } from './_internals/helpers/SlicesForStringBuilder.js';\nfunction base64String(constraints = {}) {\n    const { minLength: unscaledMinLength = 0, maxLength: unscaledMaxLength = MaxLengthUpperBound, size } = constraints;\n    const minLength = unscaledMinLength + 3 - ((unscaledMinLength + 3) % 4);\n    const maxLength = unscaledMaxLength - (unscaledMaxLength % 4);\n    const requestedSize = constraints.maxLength === undefined && size === undefined ? '=' : size;\n    if (minLength > maxLength)\n        throw new Error('Minimal length should be inferior or equal to maximal length');\n    if (minLength % 4 !== 0)\n        throw new Error('Minimal length of base64 strings must be a multiple of 4');\n    if (maxLength % 4 !== 0)\n        throw new Error('Maximal length of base64 strings must be a multiple of 4');\n    const charArbitrary = base64();\n    const experimentalCustomSlices = createSlicesForString(charArbitrary, codePointsToStringUnmapper);\n    const enrichedConstraints = {\n        minLength,\n        maxLength,\n        size: requestedSize,\n        experimentalCustomSlices,\n    };\n    return array(charArbitrary, enrichedConstraints)\n        .map(codePointsToStringMapper, codePointsToStringUnmapper)\n        .map(stringToBase64Mapper, stringToBase64Unmapper);\n}\nexport { base64String };\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,gDAApC;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4CAArE;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,QAA6D,wCAA7D;AACA,SAASC,qBAAT,QAAsC,gDAAtC;;AACA,SAASC,YAAT,GAAwC;EAAA,IAAlBC,WAAkB,uEAAJ,EAAI;EACpC,MAAM;IAAEC,SAAS,EAAEC,iBAAiB,GAAG,CAAjC;IAAoCC,SAAS,EAAEC,iBAAiB,GAAGX,mBAAnE;IAAwFY;EAAxF,IAAiGL,WAAvG;EACA,MAAMC,SAAS,GAAGC,iBAAiB,GAAG,CAApB,GAAyB,CAACA,iBAAiB,GAAG,CAArB,IAA0B,CAArE;EACA,MAAMC,SAAS,GAAGC,iBAAiB,GAAIA,iBAAiB,GAAG,CAA3D;EACA,MAAME,aAAa,GAAGN,WAAW,CAACG,SAAZ,KAA0BI,SAA1B,IAAuCF,IAAI,KAAKE,SAAhD,GAA4D,GAA5D,GAAkEF,IAAxF;EACA,IAAIJ,SAAS,GAAGE,SAAhB,EACI,MAAM,IAAIK,KAAJ,CAAU,8DAAV,CAAN;EACJ,IAAIP,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EACI,MAAM,IAAIO,KAAJ,CAAU,0DAAV,CAAN;EACJ,IAAIL,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EACI,MAAM,IAAIK,KAAJ,CAAU,0DAAV,CAAN;EACJ,MAAMC,aAAa,GAAGjB,MAAM,EAA5B;EACA,MAAMkB,wBAAwB,GAAGZ,qBAAqB,CAACW,aAAD,EAAgBd,0BAAhB,CAAtD;EACA,MAAMgB,mBAAmB,GAAG;IACxBV,SADwB;IAExBE,SAFwB;IAGxBE,IAAI,EAAEC,aAHkB;IAIxBI;EAJwB,CAA5B;EAMA,OAAOnB,KAAK,CAACkB,aAAD,EAAgBE,mBAAhB,CAAL,CACFC,GADE,CACElB,wBADF,EAC4BC,0BAD5B,EAEFiB,GAFE,CAEEhB,oBAFF,EAEwBC,sBAFxB,CAAP;AAGH;;AACD,SAASE,YAAT"},"metadata":{},"sourceType":"module"}