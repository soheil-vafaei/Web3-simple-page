{"ast":null,"code":"import { Stream } from '../../../stream/Stream.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nimport { Value } from './Value.js';\nexport class Arbitrary {\n  filter(refinement) {\n    return new FilterArbitrary(this, refinement);\n  }\n\n  map(mapper, unmapper) {\n    return new MapArbitrary(this, mapper, unmapper);\n  }\n\n  chain(chainer) {\n    return new ChainArbitrary(this, chainer);\n  }\n\n  noShrink() {\n    return new NoShrinkArbitrary(this);\n  }\n\n  noBias() {\n    return new NoBiasArbitrary(this);\n  }\n\n}\n\nclass ChainArbitrary extends Arbitrary {\n  constructor(arb, chainer) {\n    super();\n    this.arb = arb;\n    this.chainer = chainer;\n  }\n\n  generate(mrng, biasFactor) {\n    const clonedMrng = mrng.clone();\n    const src = this.arb.generate(mrng, biasFactor);\n    return this.valueChainer(src, mrng, clonedMrng, biasFactor);\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  shrink(value, context) {\n    if (this.isSafeContext(context)) {\n      return (!context.stoppedForOriginal ? this.arb.shrink(context.originalValue, context.originalContext).map(v => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias)) : Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map(dst => {\n        const newContext = Object.assign(Object.assign({}, context), {\n          chainedContext: dst.context,\n          stoppedForOriginal: true\n        });\n        return new Value(dst.value_, newContext);\n      }));\n    }\n\n    return Stream.nil();\n  }\n\n  valueChainer(v, generateMrng, clonedMrng, biasFactor) {\n    const chainedArbitrary = this.chainer(v.value_);\n    const dst = chainedArbitrary.generate(generateMrng, biasFactor);\n    const context = {\n      originalBias: biasFactor,\n      originalValue: v.value_,\n      originalContext: v.context,\n      stoppedForOriginal: false,\n      chainedArbitrary,\n      chainedContext: dst.context,\n      clonedMrng\n    };\n    return new Value(dst.value_, context);\n  }\n\n  isSafeContext(context) {\n    return context != null && typeof context === 'object' && 'originalBias' in context && 'originalValue' in context && 'originalContext' in context && 'stoppedForOriginal' in context && 'chainedArbitrary' in context && 'chainedContext' in context && 'clonedMrng' in context;\n  }\n\n}\n\nclass MapArbitrary extends Arbitrary {\n  constructor(arb, mapper, unmapper) {\n    super();\n    this.arb = arb;\n    this.mapper = mapper;\n    this.unmapper = unmapper;\n    this.bindValueMapper = this.valueMapper.bind(this);\n  }\n\n  generate(mrng, biasFactor) {\n    const g = this.arb.generate(mrng, biasFactor);\n    return this.valueMapper(g);\n  }\n\n  canShrinkWithoutContext(value) {\n    if (this.unmapper !== undefined) {\n      try {\n        const unmapped = this.unmapper(value);\n        return this.arb.canShrinkWithoutContext(unmapped);\n      } catch (_err) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  shrink(value, context) {\n    if (this.isSafeContext(context)) {\n      return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);\n    }\n\n    if (this.unmapper !== undefined) {\n      const unmapped = this.unmapper(value);\n      return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);\n    }\n\n    return Stream.nil();\n  }\n\n  mapperWithCloneIfNeeded(v) {\n    const sourceValue = v.value;\n    const mappedValue = this.mapper(sourceValue);\n\n    if (v.hasToBeCloned && (typeof mappedValue === 'object' && mappedValue !== null || typeof mappedValue === 'function') && Object.isExtensible(mappedValue) && !hasCloneMethod(mappedValue)) {\n      Object.defineProperty(mappedValue, cloneMethod, {\n        get: () => () => this.mapperWithCloneIfNeeded(v)[0]\n      });\n    }\n\n    return [mappedValue, sourceValue];\n  }\n\n  valueMapper(v) {\n    const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);\n    const context = {\n      originalValue: sourceValue,\n      originalContext: v.context\n    };\n    return new Value(mappedValue, context);\n  }\n\n  isSafeContext(context) {\n    return context != null && typeof context === 'object' && 'originalValue' in context && 'originalContext' in context;\n  }\n\n}\n\nclass FilterArbitrary extends Arbitrary {\n  constructor(arb, refinement) {\n    super();\n    this.arb = arb;\n    this.refinement = refinement;\n    this.bindRefinementOnValue = this.refinementOnValue.bind(this);\n  }\n\n  generate(mrng, biasFactor) {\n    while (true) {\n      const g = this.arb.generate(mrng, biasFactor);\n\n      if (this.refinementOnValue(g)) {\n        return g;\n      }\n    }\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value) && this.refinement(value);\n  }\n\n  shrink(value, context) {\n    return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);\n  }\n\n  refinementOnValue(v) {\n    return this.refinement(v.value);\n  }\n\n}\n\nclass NoShrinkArbitrary extends Arbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, biasFactor) {\n    return this.arb.generate(mrng, biasFactor);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value);\n  }\n\n  shrink(_value, _context) {\n    return Stream.nil();\n  }\n\n  noShrink() {\n    return this;\n  }\n\n}\n\nclass NoBiasArbitrary extends Arbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, _biasFactor) {\n    return this.arb.generate(mrng, undefined);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.arb.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    return this.arb.shrink(value, context);\n  }\n\n  noBias() {\n    return this;\n  }\n\n}\n\nexport function isArbitrary(instance) {\n  return typeof instance === 'object' && instance !== null && 'generate' in instance && 'shrink' in instance && 'canShrinkWithoutContext' in instance;\n}\nexport function assertIsArbitrary(instance) {\n  if (!isArbitrary(instance)) {\n    throw new Error('Unexpected value received: not an instance of Arbitrary');\n  }\n}","map":{"version":3,"names":["Stream","cloneMethod","hasCloneMethod","Value","Arbitrary","filter","refinement","FilterArbitrary","map","mapper","unmapper","MapArbitrary","chain","chainer","ChainArbitrary","noShrink","NoShrinkArbitrary","noBias","NoBiasArbitrary","constructor","arb","generate","mrng","biasFactor","clonedMrng","clone","src","valueChainer","canShrinkWithoutContext","value","shrink","context","isSafeContext","stoppedForOriginal","originalValue","originalContext","v","originalBias","nil","join","chainedArbitrary","chainedContext","dst","newContext","Object","assign","value_","generateMrng","bindValueMapper","valueMapper","bind","g","undefined","unmapped","_err","mapperWithCloneIfNeeded","sourceValue","mappedValue","hasToBeCloned","isExtensible","defineProperty","get","bindRefinementOnValue","refinementOnValue","_value","_context","_biasFactor","isArbitrary","instance","assertIsArbitrary","Error"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/check/arbitrary/definition/Arbitrary.js"],"sourcesContent":["import { Stream } from '../../../stream/Stream.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nimport { Value } from './Value.js';\nexport class Arbitrary {\n    filter(refinement) {\n        return new FilterArbitrary(this, refinement);\n    }\n    map(mapper, unmapper) {\n        return new MapArbitrary(this, mapper, unmapper);\n    }\n    chain(chainer) {\n        return new ChainArbitrary(this, chainer);\n    }\n    noShrink() {\n        return new NoShrinkArbitrary(this);\n    }\n    noBias() {\n        return new NoBiasArbitrary(this);\n    }\n}\nclass ChainArbitrary extends Arbitrary {\n    constructor(arb, chainer) {\n        super();\n        this.arb = arb;\n        this.chainer = chainer;\n    }\n    generate(mrng, biasFactor) {\n        const clonedMrng = mrng.clone();\n        const src = this.arb.generate(mrng, biasFactor);\n        return this.valueChainer(src, mrng, clonedMrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return (!context.stoppedForOriginal\n                ? this.arb\n                    .shrink(context.originalValue, context.originalContext)\n                    .map((v) => this.valueChainer(v, context.clonedMrng.clone(), context.clonedMrng, context.originalBias))\n                : Stream.nil()).join(context.chainedArbitrary.shrink(value, context.chainedContext).map((dst) => {\n                const newContext = Object.assign(Object.assign({}, context), { chainedContext: dst.context, stoppedForOriginal: true });\n                return new Value(dst.value_, newContext);\n            }));\n        }\n        return Stream.nil();\n    }\n    valueChainer(v, generateMrng, clonedMrng, biasFactor) {\n        const chainedArbitrary = this.chainer(v.value_);\n        const dst = chainedArbitrary.generate(generateMrng, biasFactor);\n        const context = {\n            originalBias: biasFactor,\n            originalValue: v.value_,\n            originalContext: v.context,\n            stoppedForOriginal: false,\n            chainedArbitrary,\n            chainedContext: dst.context,\n            clonedMrng,\n        };\n        return new Value(dst.value_, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalBias' in context &&\n            'originalValue' in context &&\n            'originalContext' in context &&\n            'stoppedForOriginal' in context &&\n            'chainedArbitrary' in context &&\n            'chainedContext' in context &&\n            'clonedMrng' in context);\n    }\n}\nclass MapArbitrary extends Arbitrary {\n    constructor(arb, mapper, unmapper) {\n        super();\n        this.arb = arb;\n        this.mapper = mapper;\n        this.unmapper = unmapper;\n        this.bindValueMapper = this.valueMapper.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        const g = this.arb.generate(mrng, biasFactor);\n        return this.valueMapper(g);\n    }\n    canShrinkWithoutContext(value) {\n        if (this.unmapper !== undefined) {\n            try {\n                const unmapped = this.unmapper(value);\n                return this.arb.canShrinkWithoutContext(unmapped);\n            }\n            catch (_err) {\n                return false;\n            }\n        }\n        return false;\n    }\n    shrink(value, context) {\n        if (this.isSafeContext(context)) {\n            return this.arb.shrink(context.originalValue, context.originalContext).map(this.bindValueMapper);\n        }\n        if (this.unmapper !== undefined) {\n            const unmapped = this.unmapper(value);\n            return this.arb.shrink(unmapped, undefined).map(this.bindValueMapper);\n        }\n        return Stream.nil();\n    }\n    mapperWithCloneIfNeeded(v) {\n        const sourceValue = v.value;\n        const mappedValue = this.mapper(sourceValue);\n        if (v.hasToBeCloned &&\n            ((typeof mappedValue === 'object' && mappedValue !== null) || typeof mappedValue === 'function') &&\n            Object.isExtensible(mappedValue) &&\n            !hasCloneMethod(mappedValue)) {\n            Object.defineProperty(mappedValue, cloneMethod, { get: () => () => this.mapperWithCloneIfNeeded(v)[0] });\n        }\n        return [mappedValue, sourceValue];\n    }\n    valueMapper(v) {\n        const [mappedValue, sourceValue] = this.mapperWithCloneIfNeeded(v);\n        const context = { originalValue: sourceValue, originalContext: v.context };\n        return new Value(mappedValue, context);\n    }\n    isSafeContext(context) {\n        return (context != null &&\n            typeof context === 'object' &&\n            'originalValue' in context &&\n            'originalContext' in context);\n    }\n}\nclass FilterArbitrary extends Arbitrary {\n    constructor(arb, refinement) {\n        super();\n        this.arb = arb;\n        this.refinement = refinement;\n        this.bindRefinementOnValue = this.refinementOnValue.bind(this);\n    }\n    generate(mrng, biasFactor) {\n        while (true) {\n            const g = this.arb.generate(mrng, biasFactor);\n            if (this.refinementOnValue(g)) {\n                return g;\n            }\n        }\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value) && this.refinement(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context).filter(this.bindRefinementOnValue);\n    }\n    refinementOnValue(v) {\n        return this.refinement(v.value);\n    }\n}\nclass NoShrinkArbitrary extends Arbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, biasFactor) {\n        return this.arb.generate(mrng, biasFactor);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(_value, _context) {\n        return Stream.nil();\n    }\n    noShrink() {\n        return this;\n    }\n}\nclass NoBiasArbitrary extends Arbitrary {\n    constructor(arb) {\n        super();\n        this.arb = arb;\n    }\n    generate(mrng, _biasFactor) {\n        return this.arb.generate(mrng, undefined);\n    }\n    canShrinkWithoutContext(value) {\n        return this.arb.canShrinkWithoutContext(value);\n    }\n    shrink(value, context) {\n        return this.arb.shrink(value, context);\n    }\n    noBias() {\n        return this;\n    }\n}\nexport function isArbitrary(instance) {\n    return (typeof instance === 'object' &&\n        instance !== null &&\n        'generate' in instance &&\n        'shrink' in instance &&\n        'canShrinkWithoutContext' in instance);\n}\nexport function assertIsArbitrary(instance) {\n    if (!isArbitrary(instance)) {\n        throw new Error('Unexpected value received: not an instance of Arbitrary');\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,2BAAvB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAO,MAAMC,SAAN,CAAgB;EACnBC,MAAM,CAACC,UAAD,EAAa;IACf,OAAO,IAAIC,eAAJ,CAAoB,IAApB,EAA0BD,UAA1B,CAAP;EACH;;EACDE,GAAG,CAACC,MAAD,EAASC,QAAT,EAAmB;IAClB,OAAO,IAAIC,YAAJ,CAAiB,IAAjB,EAAuBF,MAAvB,EAA+BC,QAA/B,CAAP;EACH;;EACDE,KAAK,CAACC,OAAD,EAAU;IACX,OAAO,IAAIC,cAAJ,CAAmB,IAAnB,EAAyBD,OAAzB,CAAP;EACH;;EACDE,QAAQ,GAAG;IACP,OAAO,IAAIC,iBAAJ,CAAsB,IAAtB,CAAP;EACH;;EACDC,MAAM,GAAG;IACL,OAAO,IAAIC,eAAJ,CAAoB,IAApB,CAAP;EACH;;AAfkB;;AAiBvB,MAAMJ,cAAN,SAA6BV,SAA7B,CAAuC;EACnCe,WAAW,CAACC,GAAD,EAAMP,OAAN,EAAe;IACtB;IACA,KAAKO,GAAL,GAAWA,GAAX;IACA,KAAKP,OAAL,GAAeA,OAAf;EACH;;EACDQ,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;IACvB,MAAMC,UAAU,GAAGF,IAAI,CAACG,KAAL,EAAnB;IACA,MAAMC,GAAG,GAAG,KAAKN,GAAL,CAASC,QAAT,CAAkBC,IAAlB,EAAwBC,UAAxB,CAAZ;IACA,OAAO,KAAKI,YAAL,CAAkBD,GAAlB,EAAuBJ,IAAvB,EAA6BE,UAA7B,EAAyCD,UAAzC,CAAP;EACH;;EACDK,uBAAuB,CAACC,KAAD,EAAQ;IAC3B,OAAO,KAAP;EACH;;EACDC,MAAM,CAACD,KAAD,EAAQE,OAAR,EAAiB;IACnB,IAAI,KAAKC,aAAL,CAAmBD,OAAnB,CAAJ,EAAiC;MAC7B,OAAO,CAAC,CAACA,OAAO,CAACE,kBAAT,GACF,KAAKb,GAAL,CACGU,MADH,CACUC,OAAO,CAACG,aADlB,EACiCH,OAAO,CAACI,eADzC,EAEG3B,GAFH,CAEQ4B,CAAD,IAAO,KAAKT,YAAL,CAAkBS,CAAlB,EAAqBL,OAAO,CAACP,UAAR,CAAmBC,KAAnB,EAArB,EAAiDM,OAAO,CAACP,UAAzD,EAAqEO,OAAO,CAACM,YAA7E,CAFd,CADE,GAIFrC,MAAM,CAACsC,GAAP,EAJC,EAIaC,IAJb,CAIkBR,OAAO,CAACS,gBAAR,CAAyBV,MAAzB,CAAgCD,KAAhC,EAAuCE,OAAO,CAACU,cAA/C,EAA+DjC,GAA/D,CAAoEkC,GAAD,IAAS;QACjG,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,OAAlB,CAAd,EAA0C;UAAEU,cAAc,EAAEC,GAAG,CAACX,OAAtB;UAA+BE,kBAAkB,EAAE;QAAnD,CAA1C,CAAnB;QACA,OAAO,IAAI9B,KAAJ,CAAUuC,GAAG,CAACI,MAAd,EAAsBH,UAAtB,CAAP;MACH,CAHwB,CAJlB,CAAP;IAQH;;IACD,OAAO3C,MAAM,CAACsC,GAAP,EAAP;EACH;;EACDX,YAAY,CAACS,CAAD,EAAIW,YAAJ,EAAkBvB,UAAlB,EAA8BD,UAA9B,EAA0C;IAClD,MAAMiB,gBAAgB,GAAG,KAAK3B,OAAL,CAAauB,CAAC,CAACU,MAAf,CAAzB;IACA,MAAMJ,GAAG,GAAGF,gBAAgB,CAACnB,QAAjB,CAA0B0B,YAA1B,EAAwCxB,UAAxC,CAAZ;IACA,MAAMQ,OAAO,GAAG;MACZM,YAAY,EAAEd,UADF;MAEZW,aAAa,EAAEE,CAAC,CAACU,MAFL;MAGZX,eAAe,EAAEC,CAAC,CAACL,OAHP;MAIZE,kBAAkB,EAAE,KAJR;MAKZO,gBALY;MAMZC,cAAc,EAAEC,GAAG,CAACX,OANR;MAOZP;IAPY,CAAhB;IASA,OAAO,IAAIrB,KAAJ,CAAUuC,GAAG,CAACI,MAAd,EAAsBf,OAAtB,CAAP;EACH;;EACDC,aAAa,CAACD,OAAD,EAAU;IACnB,OAAQA,OAAO,IAAI,IAAX,IACJ,OAAOA,OAAP,KAAmB,QADf,IAEJ,kBAAkBA,OAFd,IAGJ,mBAAmBA,OAHf,IAIJ,qBAAqBA,OAJjB,IAKJ,wBAAwBA,OALpB,IAMJ,sBAAsBA,OANlB,IAOJ,oBAAoBA,OAPhB,IAQJ,gBAAgBA,OARpB;EASH;;AAnDkC;;AAqDvC,MAAMpB,YAAN,SAA2BP,SAA3B,CAAqC;EACjCe,WAAW,CAACC,GAAD,EAAMX,MAAN,EAAcC,QAAd,EAAwB;IAC/B;IACA,KAAKU,GAAL,GAAWA,GAAX;IACA,KAAKX,MAAL,GAAcA,MAAd;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKsC,eAAL,GAAuB,KAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAvB;EACH;;EACD7B,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;IACvB,MAAM4B,CAAC,GAAG,KAAK/B,GAAL,CAASC,QAAT,CAAkBC,IAAlB,EAAwBC,UAAxB,CAAV;IACA,OAAO,KAAK0B,WAAL,CAAiBE,CAAjB,CAAP;EACH;;EACDvB,uBAAuB,CAACC,KAAD,EAAQ;IAC3B,IAAI,KAAKnB,QAAL,KAAkB0C,SAAtB,EAAiC;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,KAAK3C,QAAL,CAAcmB,KAAd,CAAjB;QACA,OAAO,KAAKT,GAAL,CAASQ,uBAAT,CAAiCyB,QAAjC,CAAP;MACH,CAHD,CAIA,OAAOC,IAAP,EAAa;QACT,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,KAAP;EACH;;EACDxB,MAAM,CAACD,KAAD,EAAQE,OAAR,EAAiB;IACnB,IAAI,KAAKC,aAAL,CAAmBD,OAAnB,CAAJ,EAAiC;MAC7B,OAAO,KAAKX,GAAL,CAASU,MAAT,CAAgBC,OAAO,CAACG,aAAxB,EAAuCH,OAAO,CAACI,eAA/C,EAAgE3B,GAAhE,CAAoE,KAAKwC,eAAzE,CAAP;IACH;;IACD,IAAI,KAAKtC,QAAL,KAAkB0C,SAAtB,EAAiC;MAC7B,MAAMC,QAAQ,GAAG,KAAK3C,QAAL,CAAcmB,KAAd,CAAjB;MACA,OAAO,KAAKT,GAAL,CAASU,MAAT,CAAgBuB,QAAhB,EAA0BD,SAA1B,EAAqC5C,GAArC,CAAyC,KAAKwC,eAA9C,CAAP;IACH;;IACD,OAAOhD,MAAM,CAACsC,GAAP,EAAP;EACH;;EACDiB,uBAAuB,CAACnB,CAAD,EAAI;IACvB,MAAMoB,WAAW,GAAGpB,CAAC,CAACP,KAAtB;IACA,MAAM4B,WAAW,GAAG,KAAKhD,MAAL,CAAY+C,WAAZ,CAApB;;IACA,IAAIpB,CAAC,CAACsB,aAAF,KACE,OAAOD,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAApD,IAA6D,OAAOA,WAAP,KAAuB,UADrF,KAEAb,MAAM,CAACe,YAAP,CAAoBF,WAApB,CAFA,IAGA,CAACvD,cAAc,CAACuD,WAAD,CAHnB,EAGkC;MAC9Bb,MAAM,CAACgB,cAAP,CAAsBH,WAAtB,EAAmCxD,WAAnC,EAAgD;QAAE4D,GAAG,EAAE,MAAM,MAAM,KAAKN,uBAAL,CAA6BnB,CAA7B,EAAgC,CAAhC;MAAnB,CAAhD;IACH;;IACD,OAAO,CAACqB,WAAD,EAAcD,WAAd,CAAP;EACH;;EACDP,WAAW,CAACb,CAAD,EAAI;IACX,MAAM,CAACqB,WAAD,EAAcD,WAAd,IAA6B,KAAKD,uBAAL,CAA6BnB,CAA7B,CAAnC;IACA,MAAML,OAAO,GAAG;MAAEG,aAAa,EAAEsB,WAAjB;MAA8BrB,eAAe,EAAEC,CAAC,CAACL;IAAjD,CAAhB;IACA,OAAO,IAAI5B,KAAJ,CAAUsD,WAAV,EAAuB1B,OAAvB,CAAP;EACH;;EACDC,aAAa,CAACD,OAAD,EAAU;IACnB,OAAQA,OAAO,IAAI,IAAX,IACJ,OAAOA,OAAP,KAAmB,QADf,IAEJ,mBAAmBA,OAFf,IAGJ,qBAAqBA,OAHzB;EAIH;;AAvDgC;;AAyDrC,MAAMxB,eAAN,SAA8BH,SAA9B,CAAwC;EACpCe,WAAW,CAACC,GAAD,EAAMd,UAAN,EAAkB;IACzB;IACA,KAAKc,GAAL,GAAWA,GAAX;IACA,KAAKd,UAAL,GAAkBA,UAAlB;IACA,KAAKwD,qBAAL,GAA6B,KAAKC,iBAAL,CAAuBb,IAAvB,CAA4B,IAA5B,CAA7B;EACH;;EACD7B,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;IACvB,OAAO,IAAP,EAAa;MACT,MAAM4B,CAAC,GAAG,KAAK/B,GAAL,CAASC,QAAT,CAAkBC,IAAlB,EAAwBC,UAAxB,CAAV;;MACA,IAAI,KAAKwC,iBAAL,CAAuBZ,CAAvB,CAAJ,EAA+B;QAC3B,OAAOA,CAAP;MACH;IACJ;EACJ;;EACDvB,uBAAuB,CAACC,KAAD,EAAQ;IAC3B,OAAO,KAAKT,GAAL,CAASQ,uBAAT,CAAiCC,KAAjC,KAA2C,KAAKvB,UAAL,CAAgBuB,KAAhB,CAAlD;EACH;;EACDC,MAAM,CAACD,KAAD,EAAQE,OAAR,EAAiB;IACnB,OAAO,KAAKX,GAAL,CAASU,MAAT,CAAgBD,KAAhB,EAAuBE,OAAvB,EAAgC1B,MAAhC,CAAuC,KAAKyD,qBAA5C,CAAP;EACH;;EACDC,iBAAiB,CAAC3B,CAAD,EAAI;IACjB,OAAO,KAAK9B,UAAL,CAAgB8B,CAAC,CAACP,KAAlB,CAAP;EACH;;AAvBmC;;AAyBxC,MAAMb,iBAAN,SAAgCZ,SAAhC,CAA0C;EACtCe,WAAW,CAACC,GAAD,EAAM;IACb;IACA,KAAKA,GAAL,GAAWA,GAAX;EACH;;EACDC,QAAQ,CAACC,IAAD,EAAOC,UAAP,EAAmB;IACvB,OAAO,KAAKH,GAAL,CAASC,QAAT,CAAkBC,IAAlB,EAAwBC,UAAxB,CAAP;EACH;;EACDK,uBAAuB,CAACC,KAAD,EAAQ;IAC3B,OAAO,KAAKT,GAAL,CAASQ,uBAAT,CAAiCC,KAAjC,CAAP;EACH;;EACDC,MAAM,CAACkC,MAAD,EAASC,QAAT,EAAmB;IACrB,OAAOjE,MAAM,CAACsC,GAAP,EAAP;EACH;;EACDvB,QAAQ,GAAG;IACP,OAAO,IAAP;EACH;;AAhBqC;;AAkB1C,MAAMG,eAAN,SAA8Bd,SAA9B,CAAwC;EACpCe,WAAW,CAACC,GAAD,EAAM;IACb;IACA,KAAKA,GAAL,GAAWA,GAAX;EACH;;EACDC,QAAQ,CAACC,IAAD,EAAO4C,WAAP,EAAoB;IACxB,OAAO,KAAK9C,GAAL,CAASC,QAAT,CAAkBC,IAAlB,EAAwB8B,SAAxB,CAAP;EACH;;EACDxB,uBAAuB,CAACC,KAAD,EAAQ;IAC3B,OAAO,KAAKT,GAAL,CAASQ,uBAAT,CAAiCC,KAAjC,CAAP;EACH;;EACDC,MAAM,CAACD,KAAD,EAAQE,OAAR,EAAiB;IACnB,OAAO,KAAKX,GAAL,CAASU,MAAT,CAAgBD,KAAhB,EAAuBE,OAAvB,CAAP;EACH;;EACDd,MAAM,GAAG;IACL,OAAO,IAAP;EACH;;AAhBmC;;AAkBxC,OAAO,SAASkD,WAAT,CAAqBC,QAArB,EAA+B;EAClC,OAAQ,OAAOA,QAAP,KAAoB,QAApB,IACJA,QAAQ,KAAK,IADT,IAEJ,cAAcA,QAFV,IAGJ,YAAYA,QAHR,IAIJ,6BAA6BA,QAJjC;AAKH;AACD,OAAO,SAASC,iBAAT,CAA2BD,QAA3B,EAAqC;EACxC,IAAI,CAACD,WAAW,CAACC,QAAD,CAAhB,EAA4B;IACxB,MAAM,IAAIE,KAAJ,CAAU,yDAAV,CAAN;EACH;AACJ"},"metadata":{},"sourceType":"module"}