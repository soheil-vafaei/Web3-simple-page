{"ast":null,"code":"import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { CommandsIterable } from '../../check/model/commands/CommandsIterable.js';\nimport { CommandWrapper } from '../../check/model/commands/CommandWrapper.js';\nimport { ReplayPath } from '../../check/model/ReplayPath.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { oneof } from '../oneof.js';\nimport { restrictedIntegerArbitraryBuilder } from './builders/RestrictedIntegerArbitraryBuilder.js';\nexport class CommandsArbitrary extends Arbitrary {\n  constructor(commandArbs, maxGeneratedCommands, maxCommands, sourceReplayPath, disableReplayLog) {\n    super();\n    this.sourceReplayPath = sourceReplayPath;\n    this.disableReplayLog = disableReplayLog;\n    this.oneCommandArb = oneof(...commandArbs).map(c => new CommandWrapper(c));\n    this.lengthArb = restrictedIntegerArbitraryBuilder(0, maxGeneratedCommands, maxCommands);\n    this.replayPath = [];\n    this.replayPathPosition = 0;\n  }\n\n  metadataForReplay() {\n    return this.disableReplayLog ? '' : `replayPath=${JSON.stringify(ReplayPath.stringify(this.replayPath))}`;\n  }\n\n  buildValueFor(items, shrunkOnce) {\n    const commands = items.map(item => item.value_);\n    const context = {\n      shrunkOnce,\n      items\n    };\n    return new Value(new CommandsIterable(commands, () => this.metadataForReplay()), context);\n  }\n\n  generate(mrng) {\n    const size = this.lengthArb.generate(mrng, undefined);\n    const sizeValue = size.value;\n    const items = Array(sizeValue);\n\n    for (let idx = 0; idx !== sizeValue; ++idx) {\n      const item = this.oneCommandArb.generate(mrng, undefined);\n      items[idx] = item;\n    }\n\n    this.replayPathPosition = 0;\n    return this.buildValueFor(items, false);\n  }\n\n  canShrinkWithoutContext(value) {\n    return false;\n  }\n\n  filterOnExecution(itemsRaw) {\n    const items = [];\n\n    for (const c of itemsRaw) {\n      if (c.value_.hasRan) {\n        this.replayPath.push(true);\n        items.push(c);\n      } else this.replayPath.push(false);\n    }\n\n    return items;\n  }\n\n  filterOnReplay(itemsRaw) {\n    return itemsRaw.filter((c, idx) => {\n      const state = this.replayPath[this.replayPathPosition + idx];\n      if (state === undefined) throw new Error(`Too short replayPath`);\n      if (!state && c.value_.hasRan) throw new Error(`Mismatch between replayPath and real execution`);\n      return state;\n    });\n  }\n\n  filterForShrinkImpl(itemsRaw) {\n    if (this.replayPathPosition === 0) {\n      this.replayPath = this.sourceReplayPath !== null ? ReplayPath.parse(this.sourceReplayPath) : [];\n    }\n\n    const items = this.replayPathPosition < this.replayPath.length ? this.filterOnReplay(itemsRaw) : this.filterOnExecution(itemsRaw);\n    this.replayPathPosition += itemsRaw.length;\n    return items;\n  }\n\n  shrink(_value, context) {\n    if (context === undefined) {\n      return Stream.nil();\n    }\n\n    const safeContext = context;\n    const shrunkOnce = safeContext.shrunkOnce;\n    const itemsRaw = safeContext.items;\n    const items = this.filterForShrinkImpl(itemsRaw);\n\n    if (items.length === 0) {\n      return Stream.nil();\n    }\n\n    const rootShrink = shrunkOnce ? Stream.nil() : new Stream([[]][Symbol.iterator]());\n    const nextShrinks = [];\n\n    for (let numToKeep = 0; numToKeep !== items.length; ++numToKeep) {\n      nextShrinks.push(makeLazy(() => {\n        const fixedStart = items.slice(0, numToKeep);\n        return this.lengthArb.shrink(items.length - 1 - numToKeep, undefined).map(l => fixedStart.concat(items.slice(items.length - (l.value + 1))));\n      }));\n    }\n\n    for (let itemAt = 0; itemAt !== items.length; ++itemAt) {\n      nextShrinks.push(makeLazy(() => this.oneCommandArb.shrink(items[itemAt].value_, items[itemAt].context).map(v => items.slice(0, itemAt).concat([v], items.slice(itemAt + 1)))));\n    }\n\n    return rootShrink.join(...nextShrinks).map(shrinkables => {\n      return this.buildValueFor(shrinkables.map(c => new Value(c.value_.clone(), c.context)), true);\n    });\n  }\n\n}","map":{"version":3,"names":["Arbitrary","Value","CommandsIterable","CommandWrapper","ReplayPath","makeLazy","Stream","oneof","restrictedIntegerArbitraryBuilder","CommandsArbitrary","constructor","commandArbs","maxGeneratedCommands","maxCommands","sourceReplayPath","disableReplayLog","oneCommandArb","map","c","lengthArb","replayPath","replayPathPosition","metadataForReplay","JSON","stringify","buildValueFor","items","shrunkOnce","commands","item","value_","context","generate","mrng","size","undefined","sizeValue","value","Array","idx","canShrinkWithoutContext","filterOnExecution","itemsRaw","hasRan","push","filterOnReplay","filter","state","Error","filterForShrinkImpl","parse","length","shrink","_value","nil","safeContext","rootShrink","Symbol","iterator","nextShrinks","numToKeep","fixedStart","slice","l","concat","itemAt","v","join","shrinkables","clone"],"sources":["/Users/soheilvafaei/Documents/project/web/web3/ex7/node_modules/fast-check/lib/esm/arbitrary/_internals/CommandsArbitrary.js"],"sourcesContent":["import { Arbitrary } from '../../check/arbitrary/definition/Arbitrary.js';\nimport { Value } from '../../check/arbitrary/definition/Value.js';\nimport { CommandsIterable } from '../../check/model/commands/CommandsIterable.js';\nimport { CommandWrapper } from '../../check/model/commands/CommandWrapper.js';\nimport { ReplayPath } from '../../check/model/ReplayPath.js';\nimport { makeLazy } from '../../stream/LazyIterableIterator.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { oneof } from '../oneof.js';\nimport { restrictedIntegerArbitraryBuilder } from './builders/RestrictedIntegerArbitraryBuilder.js';\nexport class CommandsArbitrary extends Arbitrary {\n    constructor(commandArbs, maxGeneratedCommands, maxCommands, sourceReplayPath, disableReplayLog) {\n        super();\n        this.sourceReplayPath = sourceReplayPath;\n        this.disableReplayLog = disableReplayLog;\n        this.oneCommandArb = oneof(...commandArbs).map((c) => new CommandWrapper(c));\n        this.lengthArb = restrictedIntegerArbitraryBuilder(0, maxGeneratedCommands, maxCommands);\n        this.replayPath = [];\n        this.replayPathPosition = 0;\n    }\n    metadataForReplay() {\n        return this.disableReplayLog ? '' : `replayPath=${JSON.stringify(ReplayPath.stringify(this.replayPath))}`;\n    }\n    buildValueFor(items, shrunkOnce) {\n        const commands = items.map((item) => item.value_);\n        const context = { shrunkOnce, items };\n        return new Value(new CommandsIterable(commands, () => this.metadataForReplay()), context);\n    }\n    generate(mrng) {\n        const size = this.lengthArb.generate(mrng, undefined);\n        const sizeValue = size.value;\n        const items = Array(sizeValue);\n        for (let idx = 0; idx !== sizeValue; ++idx) {\n            const item = this.oneCommandArb.generate(mrng, undefined);\n            items[idx] = item;\n        }\n        this.replayPathPosition = 0;\n        return this.buildValueFor(items, false);\n    }\n    canShrinkWithoutContext(value) {\n        return false;\n    }\n    filterOnExecution(itemsRaw) {\n        const items = [];\n        for (const c of itemsRaw) {\n            if (c.value_.hasRan) {\n                this.replayPath.push(true);\n                items.push(c);\n            }\n            else\n                this.replayPath.push(false);\n        }\n        return items;\n    }\n    filterOnReplay(itemsRaw) {\n        return itemsRaw.filter((c, idx) => {\n            const state = this.replayPath[this.replayPathPosition + idx];\n            if (state === undefined)\n                throw new Error(`Too short replayPath`);\n            if (!state && c.value_.hasRan)\n                throw new Error(`Mismatch between replayPath and real execution`);\n            return state;\n        });\n    }\n    filterForShrinkImpl(itemsRaw) {\n        if (this.replayPathPosition === 0) {\n            this.replayPath = this.sourceReplayPath !== null ? ReplayPath.parse(this.sourceReplayPath) : [];\n        }\n        const items = this.replayPathPosition < this.replayPath.length\n            ? this.filterOnReplay(itemsRaw)\n            : this.filterOnExecution(itemsRaw);\n        this.replayPathPosition += itemsRaw.length;\n        return items;\n    }\n    shrink(_value, context) {\n        if (context === undefined) {\n            return Stream.nil();\n        }\n        const safeContext = context;\n        const shrunkOnce = safeContext.shrunkOnce;\n        const itemsRaw = safeContext.items;\n        const items = this.filterForShrinkImpl(itemsRaw);\n        if (items.length === 0) {\n            return Stream.nil();\n        }\n        const rootShrink = shrunkOnce\n            ? Stream.nil()\n            : new Stream([[]][Symbol.iterator]());\n        const nextShrinks = [];\n        for (let numToKeep = 0; numToKeep !== items.length; ++numToKeep) {\n            nextShrinks.push(makeLazy(() => {\n                const fixedStart = items.slice(0, numToKeep);\n                return this.lengthArb\n                    .shrink(items.length - 1 - numToKeep, undefined)\n                    .map((l) => fixedStart.concat(items.slice(items.length - (l.value + 1))));\n            }));\n        }\n        for (let itemAt = 0; itemAt !== items.length; ++itemAt) {\n            nextShrinks.push(makeLazy(() => this.oneCommandArb\n                .shrink(items[itemAt].value_, items[itemAt].context)\n                .map((v) => items.slice(0, itemAt).concat([v], items.slice(itemAt + 1)))));\n        }\n        return rootShrink.join(...nextShrinks).map((shrinkables) => {\n            return this.buildValueFor(shrinkables.map((c) => new Value(c.value_.clone(), c.context)), true);\n        });\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,+CAA1B;AACA,SAASC,KAAT,QAAsB,2CAAtB;AACA,SAASC,gBAAT,QAAiC,gDAAjC;AACA,SAASC,cAAT,QAA+B,8CAA/B;AACA,SAASC,UAAT,QAA2B,iCAA3B;AACA,SAASC,QAAT,QAAyB,sCAAzB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,iCAAT,QAAkD,iDAAlD;AACA,OAAO,MAAMC,iBAAN,SAAgCT,SAAhC,CAA0C;EAC7CU,WAAW,CAACC,WAAD,EAAcC,oBAAd,EAAoCC,WAApC,EAAiDC,gBAAjD,EAAmEC,gBAAnE,EAAqF;IAC5F;IACA,KAAKD,gBAAL,GAAwBA,gBAAxB;IACA,KAAKC,gBAAL,GAAwBA,gBAAxB;IACA,KAAKC,aAAL,GAAqBT,KAAK,CAAC,GAAGI,WAAJ,CAAL,CAAsBM,GAAtB,CAA2BC,CAAD,IAAO,IAAIf,cAAJ,CAAmBe,CAAnB,CAAjC,CAArB;IACA,KAAKC,SAAL,GAAiBX,iCAAiC,CAAC,CAAD,EAAII,oBAAJ,EAA0BC,WAA1B,CAAlD;IACA,KAAKO,UAAL,GAAkB,EAAlB;IACA,KAAKC,kBAAL,GAA0B,CAA1B;EACH;;EACDC,iBAAiB,GAAG;IAChB,OAAO,KAAKP,gBAAL,GAAwB,EAAxB,GAA8B,cAAaQ,IAAI,CAACC,SAAL,CAAepB,UAAU,CAACoB,SAAX,CAAqB,KAAKJ,UAA1B,CAAf,CAAsD,EAAxG;EACH;;EACDK,aAAa,CAACC,KAAD,EAAQC,UAAR,EAAoB;IAC7B,MAAMC,QAAQ,GAAGF,KAAK,CAACT,GAAN,CAAWY,IAAD,IAAUA,IAAI,CAACC,MAAzB,CAAjB;IACA,MAAMC,OAAO,GAAG;MAAEJ,UAAF;MAAcD;IAAd,CAAhB;IACA,OAAO,IAAIzB,KAAJ,CAAU,IAAIC,gBAAJ,CAAqB0B,QAArB,EAA+B,MAAM,KAAKN,iBAAL,EAArC,CAAV,EAA0ES,OAA1E,CAAP;EACH;;EACDC,QAAQ,CAACC,IAAD,EAAO;IACX,MAAMC,IAAI,GAAG,KAAKf,SAAL,CAAea,QAAf,CAAwBC,IAAxB,EAA8BE,SAA9B,CAAb;IACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,KAAvB;IACA,MAAMX,KAAK,GAAGY,KAAK,CAACF,SAAD,CAAnB;;IACA,KAAK,IAAIG,GAAG,GAAG,CAAf,EAAkBA,GAAG,KAAKH,SAA1B,EAAqC,EAAEG,GAAvC,EAA4C;MACxC,MAAMV,IAAI,GAAG,KAAKb,aAAL,CAAmBgB,QAAnB,CAA4BC,IAA5B,EAAkCE,SAAlC,CAAb;MACAT,KAAK,CAACa,GAAD,CAAL,GAAaV,IAAb;IACH;;IACD,KAAKR,kBAAL,GAA0B,CAA1B;IACA,OAAO,KAAKI,aAAL,CAAmBC,KAAnB,EAA0B,KAA1B,CAAP;EACH;;EACDc,uBAAuB,CAACH,KAAD,EAAQ;IAC3B,OAAO,KAAP;EACH;;EACDI,iBAAiB,CAACC,QAAD,EAAW;IACxB,MAAMhB,KAAK,GAAG,EAAd;;IACA,KAAK,MAAMR,CAAX,IAAgBwB,QAAhB,EAA0B;MACtB,IAAIxB,CAAC,CAACY,MAAF,CAASa,MAAb,EAAqB;QACjB,KAAKvB,UAAL,CAAgBwB,IAAhB,CAAqB,IAArB;QACAlB,KAAK,CAACkB,IAAN,CAAW1B,CAAX;MACH,CAHD,MAKI,KAAKE,UAAL,CAAgBwB,IAAhB,CAAqB,KAArB;IACP;;IACD,OAAOlB,KAAP;EACH;;EACDmB,cAAc,CAACH,QAAD,EAAW;IACrB,OAAOA,QAAQ,CAACI,MAAT,CAAgB,CAAC5B,CAAD,EAAIqB,GAAJ,KAAY;MAC/B,MAAMQ,KAAK,GAAG,KAAK3B,UAAL,CAAgB,KAAKC,kBAAL,GAA0BkB,GAA1C,CAAd;MACA,IAAIQ,KAAK,KAAKZ,SAAd,EACI,MAAM,IAAIa,KAAJ,CAAW,sBAAX,CAAN;MACJ,IAAI,CAACD,KAAD,IAAU7B,CAAC,CAACY,MAAF,CAASa,MAAvB,EACI,MAAM,IAAIK,KAAJ,CAAW,gDAAX,CAAN;MACJ,OAAOD,KAAP;IACH,CAPM,CAAP;EAQH;;EACDE,mBAAmB,CAACP,QAAD,EAAW;IAC1B,IAAI,KAAKrB,kBAAL,KAA4B,CAAhC,EAAmC;MAC/B,KAAKD,UAAL,GAAkB,KAAKN,gBAAL,KAA0B,IAA1B,GAAiCV,UAAU,CAAC8C,KAAX,CAAiB,KAAKpC,gBAAtB,CAAjC,GAA2E,EAA7F;IACH;;IACD,MAAMY,KAAK,GAAG,KAAKL,kBAAL,GAA0B,KAAKD,UAAL,CAAgB+B,MAA1C,GACR,KAAKN,cAAL,CAAoBH,QAApB,CADQ,GAER,KAAKD,iBAAL,CAAuBC,QAAvB,CAFN;IAGA,KAAKrB,kBAAL,IAA2BqB,QAAQ,CAACS,MAApC;IACA,OAAOzB,KAAP;EACH;;EACD0B,MAAM,CAACC,MAAD,EAAStB,OAAT,EAAkB;IACpB,IAAIA,OAAO,KAAKI,SAAhB,EAA2B;MACvB,OAAO7B,MAAM,CAACgD,GAAP,EAAP;IACH;;IACD,MAAMC,WAAW,GAAGxB,OAApB;IACA,MAAMJ,UAAU,GAAG4B,WAAW,CAAC5B,UAA/B;IACA,MAAMe,QAAQ,GAAGa,WAAW,CAAC7B,KAA7B;IACA,MAAMA,KAAK,GAAG,KAAKuB,mBAAL,CAAyBP,QAAzB,CAAd;;IACA,IAAIhB,KAAK,CAACyB,MAAN,KAAiB,CAArB,EAAwB;MACpB,OAAO7C,MAAM,CAACgD,GAAP,EAAP;IACH;;IACD,MAAME,UAAU,GAAG7B,UAAU,GACvBrB,MAAM,CAACgD,GAAP,EADuB,GAEvB,IAAIhD,MAAJ,CAAW,CAAC,EAAD,EAAKmD,MAAM,CAACC,QAAZ,GAAX,CAFN;IAGA,MAAMC,WAAW,GAAG,EAApB;;IACA,KAAK,IAAIC,SAAS,GAAG,CAArB,EAAwBA,SAAS,KAAKlC,KAAK,CAACyB,MAA5C,EAAoD,EAAES,SAAtD,EAAiE;MAC7DD,WAAW,CAACf,IAAZ,CAAiBvC,QAAQ,CAAC,MAAM;QAC5B,MAAMwD,UAAU,GAAGnC,KAAK,CAACoC,KAAN,CAAY,CAAZ,EAAeF,SAAf,CAAnB;QACA,OAAO,KAAKzC,SAAL,CACFiC,MADE,CACK1B,KAAK,CAACyB,MAAN,GAAe,CAAf,GAAmBS,SADxB,EACmCzB,SADnC,EAEFlB,GAFE,CAEG8C,CAAD,IAAOF,UAAU,CAACG,MAAX,CAAkBtC,KAAK,CAACoC,KAAN,CAAYpC,KAAK,CAACyB,MAAN,IAAgBY,CAAC,CAAC1B,KAAF,GAAU,CAA1B,CAAZ,CAAlB,CAFT,CAAP;MAGH,CALwB,CAAzB;IAMH;;IACD,KAAK,IAAI4B,MAAM,GAAG,CAAlB,EAAqBA,MAAM,KAAKvC,KAAK,CAACyB,MAAtC,EAA8C,EAAEc,MAAhD,EAAwD;MACpDN,WAAW,CAACf,IAAZ,CAAiBvC,QAAQ,CAAC,MAAM,KAAKW,aAAL,CAC3BoC,MAD2B,CACpB1B,KAAK,CAACuC,MAAD,CAAL,CAAcnC,MADM,EACEJ,KAAK,CAACuC,MAAD,CAAL,CAAclC,OADhB,EAE3Bd,GAF2B,CAEtBiD,CAAD,IAAOxC,KAAK,CAACoC,KAAN,CAAY,CAAZ,EAAeG,MAAf,EAAuBD,MAAvB,CAA8B,CAACE,CAAD,CAA9B,EAAmCxC,KAAK,CAACoC,KAAN,CAAYG,MAAM,GAAG,CAArB,CAAnC,CAFgB,CAAP,CAAzB;IAGH;;IACD,OAAOT,UAAU,CAACW,IAAX,CAAgB,GAAGR,WAAnB,EAAgC1C,GAAhC,CAAqCmD,WAAD,IAAiB;MACxD,OAAO,KAAK3C,aAAL,CAAmB2C,WAAW,CAACnD,GAAZ,CAAiBC,CAAD,IAAO,IAAIjB,KAAJ,CAAUiB,CAAC,CAACY,MAAF,CAASuC,KAAT,EAAV,EAA4BnD,CAAC,CAACa,OAA9B,CAAvB,CAAnB,EAAmF,IAAnF,CAAP;IACH,CAFM,CAAP;EAGH;;AA/F4C"},"metadata":{},"sourceType":"module"}