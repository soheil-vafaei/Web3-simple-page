{"ast":null,"code":"/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\nconst {\n  baseAssembly,\n  solAposStringMode,\n  solQuoteStringMode,\n  HEX_APOS_STRING_MODE,\n  HEX_QUOTE_STRING_MODE,\n  SOL_NUMBER,\n  isNegativeLookbehindAvailable\n} = require(\"../common.js\");\n\nfunction hljsDefineSolidity(hljs) {\n  var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n  var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs); //first: let's set up all parameterized types (bytes, int, uint, fixed, ufixed)\n  //NOTE: unparameterized versions are *not* included here, those are included\n  //manually\n\n  var byteSizes = [];\n\n  for (var i = 0; i < 32; i++) {\n    byteSizes[i] = i + 1;\n  }\n\n  var numSizes = byteSizes.map(function (bytes) {\n    return bytes * 8;\n  });\n  var precisions = [];\n\n  for (i = 0; i <= 80; i++) {\n    precisions[i] = i;\n  }\n\n  var bytesTypes = byteSizes.map(function (size) {\n    return 'bytes' + size;\n  });\n  var bytesTypesString = bytesTypes.join(' ') + ' ';\n  var uintTypes = numSizes.map(function (size) {\n    return 'uint' + size;\n  });\n  var uintTypesString = uintTypes.join(' ') + ' ';\n  var intTypes = numSizes.map(function (size) {\n    return 'int' + size;\n  });\n  var intTypesString = intTypes.join(' ') + ' ';\n  var sizePrecisionPairs = [].concat.apply([], numSizes.map(function (size) {\n    return precisions.map(function (precision) {\n      return size + 'x' + precision;\n    });\n  }));\n  var fixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'fixed' + pair;\n  });\n  var fixedTypesString = fixedTypes.join(' ') + ' ';\n  var ufixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'ufixed' + pair;\n  });\n  var ufixedTypesString = ufixedTypes.join(' ') + ' ';\n  var SOL_KEYWORDS = {\n    keyword: 'var bool string ' + 'int uint ' + intTypesString + uintTypesString + 'byte bytes ' + bytesTypesString + 'fixed ufixed ' + fixedTypesString + ufixedTypesString + 'enum struct mapping address ' + 'new delete ' + 'if else for while continue break return throw emit try catch revert ' + 'unchecked ' + //NOTE: doesn't always act as a keyword, but seems fine to include\n    '_ ' + 'function modifier event constructor fallback receive error ' + 'virtual override ' + 'constant immutable anonymous indexed ' + 'storage memory calldata ' + 'external public internal payable pure view private returns ' + 'import from as using global pragma ' + 'contract interface library is abstract ' + 'type ' + 'assembly',\n    literal: 'true false ' + 'wei gwei szabo finney ether ' + 'seconds minutes hours days weeks years',\n    built_in: 'self ' + // :NOTE: not a real keyword, but a convention used in storage manipulation libraries\n    'this super selfdestruct suicide ' + 'now ' + 'msg block tx abi ' + 'blockhash gasleft ' + 'assert require ' + 'Error Panic ' + 'sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod ' + 'log0 log1 log2 log3 log4'\n  }; //note: we always put operators below comments so\n  //it won't interfere with comments\n\n  var SOL_OPERATORS = {\n    className: 'operator',\n    begin: /[+\\-!~*\\/%<>&^|=]/ //excluding ?: because having : as operator causes problems\n\n  };\n  var SOL_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9]*/;\n  var SOL_FUNC_PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    lexemes: SOL_LEXEMES_RE,\n    keywords: SOL_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, SOL_NUMBER, 'self' //to account for mappings and fn variables\n    ]\n  };\n  var SOL_RESERVED_MEMBERS = {\n    begin: /\\.\\s*/,\n    // match any property access up to start of prop\n    end: /[^A-Za-z0-9$_\\.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'gas value selector address length push pop ' + //members of external functions; members of arrays\n      'send transfer call callcode delegatecall staticcall ' + //members of addresses\n      'balance code codehash ' + //more members of addresses\n      'wrap unwrap ' + //members of UDVTs (the types not the values)\n      'name creationCode runtimeCode interfaceId min max' //members of type(...)\n\n    },\n    relevance: 2\n  };\n  var SOL_TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n    lexemes: SOL_LEXEMES_RE,\n    keywords: SOL_KEYWORDS\n  }); //special parameters (note: these aren't really handled properly, but this seems like the best compromise for now)\n\n  var SOL_SPECIAL_PARAMETERS_LIST = ['gas', 'value', 'salt'];\n  var SOL_SPECIAL_PARAMETERS_PARTIAL_RE = '(' + SOL_SPECIAL_PARAMETERS_LIST.join('|') + ')(?=:)';\n  var SOL_SPECIAL_PARAMETERS = {\n    className: 'built_in',\n    begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + SOL_SPECIAL_PARAMETERS_PARTIAL_RE\n  };\n\n  function makeBuiltinProps(obj, props) {\n    return {\n      begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + obj + '\\\\.\\\\s*',\n      end: /[^A-Za-z0-9$_\\.]/,\n      excludeBegin: false,\n      excludeEnd: true,\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        built_in: obj + ' ' + props\n      },\n      contains: [SOL_RESERVED_MEMBERS],\n      relevance: 10\n    };\n  } //covers the special slot/offset notation in assembly\n  //(old-style, with an underscore)\n\n\n  var SOL_ASSEMBLY_MEMBERS_OLD = {\n    begin: /_/,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset'\n    },\n    relevance: 2\n  }; //covers the special slot/offset notation in assembly\n  //(new-style, with a dot; keeping this separate as it\n  //may be expanded in the future)\n\n  var SOL_ASSEMBLY_MEMBERS = {\n    begin: /\\./,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset length address selector'\n    },\n    relevance: 2\n  };\n  var BASE_ASSEMBLY_ENVIRONMENT = baseAssembly(hljs);\n  var SOL_ASSEMBLY_ENVIRONMENT = hljs.inherit(BASE_ASSEMBLY_ENVIRONMENT, {\n    contains: BASE_ASSEMBLY_ENVIRONMENT.contains.concat([SOL_ASSEMBLY_MEMBERS, SOL_ASSEMBLY_MEMBERS_OLD])\n  });\n  return {\n    aliases: ['sol'],\n    keywords: SOL_KEYWORDS,\n    lexemes: SOL_LEXEMES_RE,\n    contains: [// basic literal definitions\n    SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_SPECIAL_PARAMETERS, SOL_OPERATORS, {\n      // functions\n      className: 'function',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'function modifier event constructor fallback receive error',\n      end: /[{;]/,\n      excludeEnd: true,\n      contains: [SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],\n      illegal: /%/\n    }, // built-in members\n    makeBuiltinProps('msg', 'gas value data sender sig'), makeBuiltinProps('block', 'blockhash coinbase difficulty gaslimit basefee number timestamp chainid'), makeBuiltinProps('tx', 'gasprice origin'), makeBuiltinProps('abi', 'decode encode encodePacked encodeWithSelector encodeWithSignature encodeCall'), makeBuiltinProps('bytes', 'concat'), makeBuiltinProps('string', 'concat'), SOL_RESERVED_MEMBERS, {\n      // contracts & libraries & interfaces\n      className: 'class',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'contract interface library',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [{\n        beginKeywords: 'is',\n        lexemes: SOL_LEXEMES_RE\n      }, SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // structs & enums\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'struct enum',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // imports\n      beginKeywords: 'import',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'import from as',\n      contains: [SOL_TITLE_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_OPERATORS]\n    }, {\n      // using\n      beginKeywords: 'using',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'using for global',\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_OPERATORS]\n    }, {\n      // pragmas\n      className: 'meta',\n      beginKeywords: 'pragma',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        keyword: 'pragma solidity experimental abicoder',\n        built_in: 'ABIEncoderV2 SMTChecker v1 v2'\n      },\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(SOL_APOS_STRING_MODE, {\n        className: 'meta-string'\n      }), hljs.inherit(SOL_QUOTE_STRING_MODE, {\n        className: 'meta-string'\n      })]\n    }, {\n      //assembly section\n      beginKeywords: 'assembly',\n      end: /\\b\\B/,\n      //unsatisfiable regex; ended by endsParent instead\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(SOL_APOS_STRING_MODE, {\n        className: 'meta-string'\n      }), //going to count \"memory-safe\" etc as meta-strings\n      hljs.inherit(SOL_QUOTE_STRING_MODE, {\n        className: 'meta-string'\n      }), hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, {\n        //the actual *block* in the assembly section\n        begin: '{',\n        end: '}',\n        endsParent: true,\n        contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat([hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, {\n          //block within assembly\n          begin: '{',\n          end: '}',\n          contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat(['self'])\n        })])\n      })]\n    }],\n    illegal: /#/\n  };\n}\n\nmodule.exports = hljsDefineSolidity;","map":{"version":3,"names":["baseAssembly","solAposStringMode","solQuoteStringMode","HEX_APOS_STRING_MODE","HEX_QUOTE_STRING_MODE","SOL_NUMBER","isNegativeLookbehindAvailable","require","hljsDefineSolidity","hljs","SOL_APOS_STRING_MODE","SOL_QUOTE_STRING_MODE","byteSizes","i","numSizes","map","bytes","precisions","bytesTypes","size","bytesTypesString","join","uintTypes","uintTypesString","intTypes","intTypesString","sizePrecisionPairs","concat","apply","precision","fixedTypes","pair","fixedTypesString","ufixedTypes","ufixedTypesString","SOL_KEYWORDS","keyword","literal","built_in","SOL_OPERATORS","className","begin","SOL_LEXEMES_RE","SOL_FUNC_PARAMS","end","excludeBegin","excludeEnd","lexemes","keywords","contains","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","SOL_RESERVED_MEMBERS","relevance","SOL_TITLE_MODE","inherit","TITLE_MODE","SOL_SPECIAL_PARAMETERS_LIST","SOL_SPECIAL_PARAMETERS_PARTIAL_RE","SOL_SPECIAL_PARAMETERS","makeBuiltinProps","obj","props","SOL_ASSEMBLY_MEMBERS_OLD","SOL_ASSEMBLY_MEMBERS","BASE_ASSEMBLY_ENVIRONMENT","SOL_ASSEMBLY_ENVIRONMENT","aliases","beginKeywords","illegal","endsParent","module","exports"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/highlightjs-solidity/src/languages/solidity.js"],"sourcesContent":["/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\n\nconst {\n    baseAssembly,\n    solAposStringMode,\n    solQuoteStringMode,\n    HEX_APOS_STRING_MODE,\n    HEX_QUOTE_STRING_MODE,\n    SOL_NUMBER,\n    isNegativeLookbehindAvailable\n} = require(\"../common.js\");\n\nfunction hljsDefineSolidity(hljs) {\n\n    var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n    var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs);\n\n    //first: let's set up all parameterized types (bytes, int, uint, fixed, ufixed)\n    //NOTE: unparameterized versions are *not* included here, those are included\n    //manually\n    var byteSizes = [];\n    for(var i = 0; i < 32; i++) {\n        byteSizes[i] = i+1;\n    }\n    var numSizes = byteSizes.map(function(bytes) { return bytes * 8 } );\n    var precisions = [];\n    for(i = 0; i <= 80; i++) {\n        precisions[i] = i;\n    }\n\n    var bytesTypes = byteSizes.map(function(size) { return 'bytes' + size });\n    var bytesTypesString = bytesTypes.join(' ') + ' ';\n\n    var uintTypes = numSizes.map(function(size) { return 'uint' + size });\n    var uintTypesString = uintTypes.join(' ') + ' ';\n\n    var intTypes = numSizes.map(function(size) { return 'int' + size });\n    var intTypesString = intTypes.join(' ') + ' ';\n\n    var sizePrecisionPairs = [].concat.apply([],\n        numSizes.map(function(size) {\n            return precisions.map(function(precision) {\n                return size + 'x' + precision;\n            })\n        })\n    );\n\n    var fixedTypes = sizePrecisionPairs.map(function(pair) { return 'fixed' + pair });\n    var fixedTypesString = fixedTypes.join(' ') + ' ';\n\n    var ufixedTypes = sizePrecisionPairs.map(function(pair) { return 'ufixed' + pair });\n    var ufixedTypesString = ufixedTypes.join(' ') + ' ';\n\n    var SOL_KEYWORDS = {\n        keyword:\n            'var bool string ' +\n            'int uint ' + intTypesString + uintTypesString +\n            'byte bytes ' + bytesTypesString +\n            'fixed ufixed ' + fixedTypesString + ufixedTypesString +\n            'enum struct mapping address ' +\n\n            'new delete ' +\n            'if else for while continue break return throw emit try catch revert ' +\n            'unchecked ' +\n            //NOTE: doesn't always act as a keyword, but seems fine to include\n            '_ ' +\n\n            'function modifier event constructor fallback receive error ' +\n            'virtual override ' +\n            'constant immutable anonymous indexed ' +\n            'storage memory calldata ' +\n            'external public internal payable pure view private returns ' +\n\n            'import from as using global pragma ' +\n            'contract interface library is abstract ' +\n            'type ' +\n            'assembly',\n        literal:\n            'true false ' +\n            'wei gwei szabo finney ether ' +\n            'seconds minutes hours days weeks years',\n        built_in:\n            'self ' +   // :NOTE: not a real keyword, but a convention used in storage manipulation libraries\n            'this super selfdestruct suicide ' +\n            'now ' +\n            'msg block tx abi ' +\n            'blockhash gasleft ' +\n            'assert require ' +\n            'Error Panic ' +\n            'sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod ' +\n            'log0 log1 log2 log3 log4'\n    };\n\n    //note: we always put operators below comments so\n    //it won't interfere with comments\n    var SOL_OPERATORS = {\n        className: 'operator',\n        begin: /[+\\-!~*\\/%<>&^|=]/ //excluding ?: because having : as operator causes problems\n    };\n\n    var SOL_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9]*/;\n\n    var SOL_FUNC_PARAMS = {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        lexemes: SOL_LEXEMES_RE,\n        keywords: SOL_KEYWORDS,\n        contains: [\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            SOL_NUMBER,\n            'self' //to account for mappings and fn variables\n        ]\n    };\n\n    var SOL_RESERVED_MEMBERS = {\n        begin: /\\.\\s*/,  // match any property access up to start of prop\n        end: /[^A-Za-z0-9$_\\.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'gas value selector address length push pop ' + //members of external functions; members of arrays\n                'send transfer call callcode delegatecall staticcall ' + //members of addresses\n                'balance code codehash ' + //more members of addresses\n                'wrap unwrap ' + //members of UDVTs (the types not the values)\n                'name creationCode runtimeCode interfaceId min max' //members of type(...)\n        },\n        relevance: 2,\n    };\n\n    var SOL_TITLE_MODE =\n        hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n            lexemes: SOL_LEXEMES_RE,\n            keywords: SOL_KEYWORDS\n        });\n\n    //special parameters (note: these aren't really handled properly, but this seems like the best compromise for now)\n    var SOL_SPECIAL_PARAMETERS_LIST = ['gas', 'value', 'salt'];\n    var SOL_SPECIAL_PARAMETERS_PARTIAL_RE = '(' + SOL_SPECIAL_PARAMETERS_LIST.join('|') + ')(?=:)';\n    var SOL_SPECIAL_PARAMETERS = {\n        className: 'built_in',\n        begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + SOL_SPECIAL_PARAMETERS_PARTIAL_RE\n    };\n\n    function makeBuiltinProps(obj, props) {\n        return {\n            begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + obj + '\\\\.\\\\s*',\n            end: /[^A-Za-z0-9$_\\.]/,\n            excludeBegin: false,\n            excludeEnd: true,\n            lexemes: SOL_LEXEMES_RE,\n            keywords: {\n                built_in: obj + ' ' + props,\n            },\n            contains: [\n                SOL_RESERVED_MEMBERS\n            ],\n            relevance: 10,\n        };\n    }\n\n    //covers the special slot/offset notation in assembly\n    //(old-style, with an underscore)\n    var SOL_ASSEMBLY_MEMBERS_OLD = {\n        begin: /_/,\n        end: /[^A-Za-z0-9$.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'slot offset'\n        },\n        relevance: 2,\n    };\n\n    //covers the special slot/offset notation in assembly\n    //(new-style, with a dot; keeping this separate as it\n    //may be expanded in the future)\n    var SOL_ASSEMBLY_MEMBERS = {\n        begin: /\\./,\n        end: /[^A-Za-z0-9$.]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: {\n            built_in: 'slot offset length address selector'\n        },\n        relevance: 2,\n    };\n\n    var BASE_ASSEMBLY_ENVIRONMENT = baseAssembly(hljs);\n    var SOL_ASSEMBLY_ENVIRONMENT = hljs.inherit(BASE_ASSEMBLY_ENVIRONMENT, {\n        contains: BASE_ASSEMBLY_ENVIRONMENT.contains.concat([\n            SOL_ASSEMBLY_MEMBERS,\n            SOL_ASSEMBLY_MEMBERS_OLD\n        ])\n    });\n\n    return {\n        aliases: ['sol'],\n        keywords: SOL_KEYWORDS,\n        lexemes: SOL_LEXEMES_RE,\n        contains: [\n            // basic literal definitions\n            SOL_APOS_STRING_MODE,\n            SOL_QUOTE_STRING_MODE,\n            HEX_APOS_STRING_MODE,\n            HEX_QUOTE_STRING_MODE,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            SOL_NUMBER,\n            SOL_SPECIAL_PARAMETERS,\n            SOL_OPERATORS,\n            { // functions\n                className: 'function',\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'function modifier event constructor fallback receive error', end: /[{;]/, excludeEnd: true,\n                contains: [\n                    SOL_TITLE_MODE,\n                    SOL_FUNC_PARAMS,\n                    SOL_SPECIAL_PARAMETERS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ],\n                illegal: /%/,\n            },\n            // built-in members\n            makeBuiltinProps('msg', 'gas value data sender sig'),\n            makeBuiltinProps('block', 'blockhash coinbase difficulty gaslimit basefee number timestamp chainid'),\n            makeBuiltinProps('tx', 'gasprice origin'),\n            makeBuiltinProps('abi', 'decode encode encodePacked encodeWithSelector encodeWithSignature encodeCall'),\n            makeBuiltinProps('bytes', 'concat'),\n            makeBuiltinProps('string', 'concat'),\n            SOL_RESERVED_MEMBERS,\n            { // contracts & libraries & interfaces\n                className: 'class',\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'contract interface library', end: '{', excludeEnd: true,\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    { beginKeywords: 'is', lexemes: SOL_LEXEMES_RE },\n                    SOL_TITLE_MODE,\n                    SOL_FUNC_PARAMS,\n                    SOL_SPECIAL_PARAMETERS,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // structs & enums\n                lexemes: SOL_LEXEMES_RE,\n                beginKeywords: 'struct enum', end: '{', excludeEnd: true,\n                illegal: /[:\"\\[\\]]/,\n                contains: [\n                    SOL_TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE\n                ]\n            },\n            { // imports\n                beginKeywords: 'import', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: 'import from as',\n                contains: [\n                    SOL_TITLE_MODE,\n                    SOL_APOS_STRING_MODE,\n                    SOL_QUOTE_STRING_MODE,\n                    HEX_APOS_STRING_MODE,\n                    HEX_QUOTE_STRING_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    SOL_OPERATORS\n                ]\n            },\n            { // using\n                beginKeywords: 'using', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: 'using for global',\n                contains: [\n                    SOL_TITLE_MODE,\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    SOL_OPERATORS\n                ]\n            },\n            { // pragmas\n                className: 'meta',\n                beginKeywords: 'pragma', end: ';',\n                lexemes: SOL_LEXEMES_RE,\n                keywords: {\n                    keyword: 'pragma solidity experimental abicoder',\n                    built_in: 'ABIEncoderV2 SMTChecker v1 v2'\n                },\n                contains: [\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    hljs.inherit(SOL_APOS_STRING_MODE, { className: 'meta-string' }),\n                    hljs.inherit(SOL_QUOTE_STRING_MODE, { className: 'meta-string' })\n                ]\n            },\n            { //assembly section\n                beginKeywords: 'assembly',\n                end: /\\b\\B/, //unsatisfiable regex; ended by endsParent instead\n                contains: [\n                    hljs.C_LINE_COMMENT_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    hljs.inherit(SOL_APOS_STRING_MODE, { className: 'meta-string' }), //going to count \"memory-safe\" etc as meta-strings\n                    hljs.inherit(SOL_QUOTE_STRING_MODE, { className: 'meta-string' }),\n                    hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, { //the actual *block* in the assembly section\n                        begin: '{', end: '}',\n                        endsParent: true,\n                        contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat([\n                            hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, { //block within assembly\n                                begin: '{', end: '}',\n                                contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat(['self'])\n                            })\n                        ])\n                    })\n                ]\n            }\n        ],\n        illegal: /#/\n    };\n}\n\nmodule.exports = hljsDefineSolidity;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;EACFA,YADE;EAEFC,iBAFE;EAGFC,kBAHE;EAIFC,oBAJE;EAKFC,qBALE;EAMFC,UANE;EAOFC;AAPE,IAQFC,OAAO,CAAC,cAAD,CARX;;AAUA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;EAE9B,IAAIC,oBAAoB,GAAGT,iBAAiB,CAACQ,IAAD,CAA5C;EACA,IAAIE,qBAAqB,GAAGT,kBAAkB,CAACO,IAAD,CAA9C,CAH8B,CAK9B;EACA;EACA;;EACA,IAAIG,SAAS,GAAG,EAAhB;;EACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA4B;IACxBD,SAAS,CAACC,CAAD,CAAT,GAAeA,CAAC,GAAC,CAAjB;EACH;;EACD,IAAIC,QAAQ,GAAGF,SAAS,CAACG,GAAV,CAAc,UAASC,KAAT,EAAgB;IAAE,OAAOA,KAAK,GAAG,CAAf;EAAkB,CAAlD,CAAf;EACA,IAAIC,UAAU,GAAG,EAAjB;;EACA,KAAIJ,CAAC,GAAG,CAAR,EAAWA,CAAC,IAAI,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;IACrBI,UAAU,CAACJ,CAAD,CAAV,GAAgBA,CAAhB;EACH;;EAED,IAAIK,UAAU,GAAGN,SAAS,CAACG,GAAV,CAAc,UAASI,IAAT,EAAe;IAAE,OAAO,UAAUA,IAAjB;EAAuB,CAAtD,CAAjB;EACA,IAAIC,gBAAgB,GAAGF,UAAU,CAACG,IAAX,CAAgB,GAAhB,IAAuB,GAA9C;EAEA,IAAIC,SAAS,GAAGR,QAAQ,CAACC,GAAT,CAAa,UAASI,IAAT,EAAe;IAAE,OAAO,SAASA,IAAhB;EAAsB,CAApD,CAAhB;EACA,IAAII,eAAe,GAAGD,SAAS,CAACD,IAAV,CAAe,GAAf,IAAsB,GAA5C;EAEA,IAAIG,QAAQ,GAAGV,QAAQ,CAACC,GAAT,CAAa,UAASI,IAAT,EAAe;IAAE,OAAO,QAAQA,IAAf;EAAqB,CAAnD,CAAf;EACA,IAAIM,cAAc,GAAGD,QAAQ,CAACH,IAAT,CAAc,GAAd,IAAqB,GAA1C;EAEA,IAAIK,kBAAkB,GAAG,GAAGC,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EACrBd,QAAQ,CAACC,GAAT,CAAa,UAASI,IAAT,EAAe;IACxB,OAAOF,UAAU,CAACF,GAAX,CAAe,UAASc,SAAT,EAAoB;MACtC,OAAOV,IAAI,GAAG,GAAP,GAAaU,SAApB;IACH,CAFM,CAAP;EAGH,CAJD,CADqB,CAAzB;EAQA,IAAIC,UAAU,GAAGJ,kBAAkB,CAACX,GAAnB,CAAuB,UAASgB,IAAT,EAAe;IAAE,OAAO,UAAUA,IAAjB;EAAuB,CAA/D,CAAjB;EACA,IAAIC,gBAAgB,GAAGF,UAAU,CAACT,IAAX,CAAgB,GAAhB,IAAuB,GAA9C;EAEA,IAAIY,WAAW,GAAGP,kBAAkB,CAACX,GAAnB,CAAuB,UAASgB,IAAT,EAAe;IAAE,OAAO,WAAWA,IAAlB;EAAwB,CAAhE,CAAlB;EACA,IAAIG,iBAAiB,GAAGD,WAAW,CAACZ,IAAZ,CAAiB,GAAjB,IAAwB,GAAhD;EAEA,IAAIc,YAAY,GAAG;IACfC,OAAO,EACH,qBACA,WADA,GACcX,cADd,GAC+BF,eAD/B,GAEA,aAFA,GAEgBH,gBAFhB,GAGA,eAHA,GAGkBY,gBAHlB,GAGqCE,iBAHrC,GAIA,8BAJA,GAMA,aANA,GAOA,sEAPA,GAQA,YARA,GASA;IACA,IAVA,GAYA,6DAZA,GAaA,mBAbA,GAcA,uCAdA,GAeA,0BAfA,GAgBA,6DAhBA,GAkBA,qCAlBA,GAmBA,yCAnBA,GAoBA,OApBA,GAqBA,UAvBW;IAwBfG,OAAO,EACH,gBACA,8BADA,GAEA,wCA3BW;IA4BfC,QAAQ,EACJ,UAAY;IACZ,kCADA,GAEA,MAFA,GAGA,mBAHA,GAIA,oBAJA,GAKA,iBALA,GAMA,cANA,GAOA,0DAPA,GAQA;EArCW,CAAnB,CAzC8B,CAiF9B;EACA;;EACA,IAAIC,aAAa,GAAG;IAChBC,SAAS,EAAE,UADK;IAEhBC,KAAK,EAAE,mBAFS,CAEW;;EAFX,CAApB;EAKA,IAAIC,cAAc,GAAG,0BAArB;EAEA,IAAIC,eAAe,GAAG;IAClBH,SAAS,EAAE,QADO;IAElBC,KAAK,EAAE,IAFW;IAELG,GAAG,EAAE,IAFA;IAGlBC,YAAY,EAAE,IAHI;IAIlBC,UAAU,EAAE,IAJM;IAKlBC,OAAO,EAAEL,cALS;IAMlBM,QAAQ,EAAEb,YANQ;IAOlBc,QAAQ,EAAE,CACNxC,IAAI,CAACyC,mBADC,EAENzC,IAAI,CAAC0C,oBAFC,EAGNzC,oBAHM,EAINC,qBAJM,EAKNN,UALM,EAMN,MANM,CAMC;IAND;EAPQ,CAAtB;EAiBA,IAAI+C,oBAAoB,GAAG;IACvBX,KAAK,EAAE,OADgB;IACN;IACjBG,GAAG,EAAE,kBAFkB;IAGvBC,YAAY,EAAE,IAHS;IAIvBC,UAAU,EAAE,IAJW;IAKvBE,QAAQ,EAAE;MACNV,QAAQ,EAAE,gDAAgD;MACtD,sDADM,GACmD;MACzD,wBAFM,GAEqB;MAC3B,cAHM,GAGW;MACjB,mDALE,CAKkD;;IALlD,CALa;IAYvBe,SAAS,EAAE;EAZY,CAA3B;EAeA,IAAIC,cAAc,GACd7C,IAAI,CAAC8C,OAAL,CAAa9C,IAAI,CAAC+C,UAAlB,EAA8B;IAC1Bf,KAAK,EAAE,0BADmB;IAE1BM,OAAO,EAAEL,cAFiB;IAG1BM,QAAQ,EAAEb;EAHgB,CAA9B,CADJ,CA1H8B,CAiI9B;;EACA,IAAIsB,2BAA2B,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,CAAlC;EACA,IAAIC,iCAAiC,GAAG,MAAMD,2BAA2B,CAACpC,IAA5B,CAAiC,GAAjC,CAAN,GAA8C,QAAtF;EACA,IAAIsC,sBAAsB,GAAG;IACzBnB,SAAS,EAAE,UADc;IAEzBC,KAAK,EAAE,CAACnC,6BAA6B,KAAK,aAAL,GAAqB,KAAnD,IAA4DoD;EAF1C,CAA7B;;EAKA,SAASE,gBAAT,CAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;IAClC,OAAO;MACHrB,KAAK,EAAE,CAACnC,6BAA6B,KAAK,aAAL,GAAqB,KAAnD,IAA4DuD,GAA5D,GAAkE,SADtE;MAEHjB,GAAG,EAAE,kBAFF;MAGHC,YAAY,EAAE,KAHX;MAIHC,UAAU,EAAE,IAJT;MAKHC,OAAO,EAAEL,cALN;MAMHM,QAAQ,EAAE;QACNV,QAAQ,EAAEuB,GAAG,GAAG,GAAN,GAAYC;MADhB,CANP;MASHb,QAAQ,EAAE,CACNG,oBADM,CATP;MAYHC,SAAS,EAAE;IAZR,CAAP;EAcH,CAxJ6B,CA0J9B;EACA;;;EACA,IAAIU,wBAAwB,GAAG;IAC3BtB,KAAK,EAAE,GADoB;IAE3BG,GAAG,EAAE,gBAFsB;IAG3BC,YAAY,EAAE,IAHa;IAI3BC,UAAU,EAAE,IAJe;IAK3BE,QAAQ,EAAE;MACNV,QAAQ,EAAE;IADJ,CALiB;IAQ3Be,SAAS,EAAE;EARgB,CAA/B,CA5J8B,CAuK9B;EACA;EACA;;EACA,IAAIW,oBAAoB,GAAG;IACvBvB,KAAK,EAAE,IADgB;IAEvBG,GAAG,EAAE,gBAFkB;IAGvBC,YAAY,EAAE,IAHS;IAIvBC,UAAU,EAAE,IAJW;IAKvBE,QAAQ,EAAE;MACNV,QAAQ,EAAE;IADJ,CALa;IAQvBe,SAAS,EAAE;EARY,CAA3B;EAWA,IAAIY,yBAAyB,GAAGjE,YAAY,CAACS,IAAD,CAA5C;EACA,IAAIyD,wBAAwB,GAAGzD,IAAI,CAAC8C,OAAL,CAAaU,yBAAb,EAAwC;IACnEhB,QAAQ,EAAEgB,yBAAyB,CAAChB,QAA1B,CAAmCtB,MAAnC,CAA0C,CAChDqC,oBADgD,EAEhDD,wBAFgD,CAA1C;EADyD,CAAxC,CAA/B;EAOA,OAAO;IACHI,OAAO,EAAE,CAAC,KAAD,CADN;IAEHnB,QAAQ,EAAEb,YAFP;IAGHY,OAAO,EAAEL,cAHN;IAIHO,QAAQ,EAAE,CACN;IACAvC,oBAFM,EAGNC,qBAHM,EAINR,oBAJM,EAKNC,qBALM,EAMNK,IAAI,CAACyC,mBANC,EAONzC,IAAI,CAAC0C,oBAPC,EAQN9C,UARM,EASNsD,sBATM,EAUNpB,aAVM,EAWN;MAAE;MACEC,SAAS,EAAE,UADf;MAEIO,OAAO,EAAEL,cAFb;MAGI0B,aAAa,EAAE,4DAHnB;MAGiFxB,GAAG,EAAE,MAHtF;MAG8FE,UAAU,EAAE,IAH1G;MAIIG,QAAQ,EAAE,CACNK,cADM,EAENX,eAFM,EAGNgB,sBAHM,EAINlD,IAAI,CAACyC,mBAJC,EAKNzC,IAAI,CAAC0C,oBALC,CAJd;MAWIkB,OAAO,EAAE;IAXb,CAXM,EAwBN;IACAT,gBAAgB,CAAC,KAAD,EAAQ,2BAAR,CAzBV,EA0BNA,gBAAgB,CAAC,OAAD,EAAU,yEAAV,CA1BV,EA2BNA,gBAAgB,CAAC,IAAD,EAAO,iBAAP,CA3BV,EA4BNA,gBAAgB,CAAC,KAAD,EAAQ,8EAAR,CA5BV,EA6BNA,gBAAgB,CAAC,OAAD,EAAU,QAAV,CA7BV,EA8BNA,gBAAgB,CAAC,QAAD,EAAW,QAAX,CA9BV,EA+BNR,oBA/BM,EAgCN;MAAE;MACEZ,SAAS,EAAE,OADf;MAEIO,OAAO,EAAEL,cAFb;MAGI0B,aAAa,EAAE,4BAHnB;MAGiDxB,GAAG,EAAE,GAHtD;MAG2DE,UAAU,EAAE,IAHvE;MAIIuB,OAAO,EAAE,UAJb;MAKIpB,QAAQ,EAAE,CACN;QAAEmB,aAAa,EAAE,IAAjB;QAAuBrB,OAAO,EAAEL;MAAhC,CADM,EAENY,cAFM,EAGNX,eAHM,EAINgB,sBAJM,EAKNlD,IAAI,CAACyC,mBALC,EAMNzC,IAAI,CAAC0C,oBANC;IALd,CAhCM,EA8CN;MAAE;MACEJ,OAAO,EAAEL,cADb;MAEI0B,aAAa,EAAE,aAFnB;MAEkCxB,GAAG,EAAE,GAFvC;MAE4CE,UAAU,EAAE,IAFxD;MAGIuB,OAAO,EAAE,UAHb;MAIIpB,QAAQ,EAAE,CACNK,cADM,EAEN7C,IAAI,CAACyC,mBAFC,EAGNzC,IAAI,CAAC0C,oBAHC;IAJd,CA9CM,EAwDN;MAAE;MACEiB,aAAa,EAAE,QADnB;MAC6BxB,GAAG,EAAE,GADlC;MAEIG,OAAO,EAAEL,cAFb;MAGIM,QAAQ,EAAE,gBAHd;MAIIC,QAAQ,EAAE,CACNK,cADM,EAEN5C,oBAFM,EAGNC,qBAHM,EAINR,oBAJM,EAKNC,qBALM,EAMNK,IAAI,CAACyC,mBANC,EAONzC,IAAI,CAAC0C,oBAPC,EAQNZ,aARM;IAJd,CAxDM,EAuEN;MAAE;MACE6B,aAAa,EAAE,OADnB;MAC4BxB,GAAG,EAAE,GADjC;MAEIG,OAAO,EAAEL,cAFb;MAGIM,QAAQ,EAAE,kBAHd;MAIIC,QAAQ,EAAE,CACNK,cADM,EAEN7C,IAAI,CAACyC,mBAFC,EAGNzC,IAAI,CAAC0C,oBAHC,EAINZ,aAJM;IAJd,CAvEM,EAkFN;MAAE;MACEC,SAAS,EAAE,MADf;MAEI4B,aAAa,EAAE,QAFnB;MAE6BxB,GAAG,EAAE,GAFlC;MAGIG,OAAO,EAAEL,cAHb;MAIIM,QAAQ,EAAE;QACNZ,OAAO,EAAE,uCADH;QAENE,QAAQ,EAAE;MAFJ,CAJd;MAQIW,QAAQ,EAAE,CACNxC,IAAI,CAACyC,mBADC,EAENzC,IAAI,CAAC0C,oBAFC,EAGN1C,IAAI,CAAC8C,OAAL,CAAa7C,oBAAb,EAAmC;QAAE8B,SAAS,EAAE;MAAb,CAAnC,CAHM,EAIN/B,IAAI,CAAC8C,OAAL,CAAa5C,qBAAb,EAAoC;QAAE6B,SAAS,EAAE;MAAb,CAApC,CAJM;IARd,CAlFM,EAiGN;MAAE;MACE4B,aAAa,EAAE,UADnB;MAEIxB,GAAG,EAAE,MAFT;MAEiB;MACbK,QAAQ,EAAE,CACNxC,IAAI,CAACyC,mBADC,EAENzC,IAAI,CAAC0C,oBAFC,EAGN1C,IAAI,CAAC8C,OAAL,CAAa7C,oBAAb,EAAmC;QAAE8B,SAAS,EAAE;MAAb,CAAnC,CAHM,EAG4D;MAClE/B,IAAI,CAAC8C,OAAL,CAAa5C,qBAAb,EAAoC;QAAE6B,SAAS,EAAE;MAAb,CAApC,CAJM,EAKN/B,IAAI,CAAC8C,OAAL,CAAaW,wBAAb,EAAuC;QAAE;QACrCzB,KAAK,EAAE,GAD4B;QACvBG,GAAG,EAAE,GADkB;QAEnC0B,UAAU,EAAE,IAFuB;QAGnCrB,QAAQ,EAAEiB,wBAAwB,CAACjB,QAAzB,CAAkCtB,MAAlC,CAAyC,CAC/ClB,IAAI,CAAC8C,OAAL,CAAaW,wBAAb,EAAuC;UAAE;UACrCzB,KAAK,EAAE,GAD4B;UACvBG,GAAG,EAAE,GADkB;UAEnCK,QAAQ,EAAEiB,wBAAwB,CAACjB,QAAzB,CAAkCtB,MAAlC,CAAyC,CAAC,MAAD,CAAzC;QAFyB,CAAvC,CAD+C,CAAzC;MAHyB,CAAvC,CALM;IAHd,CAjGM,CAJP;IA0HH0C,OAAO,EAAE;EA1HN,CAAP;AA4HH;;AAEDE,MAAM,CAACC,OAAP,GAAiBhE,kBAAjB"},"metadata":{},"sourceType":"script"}