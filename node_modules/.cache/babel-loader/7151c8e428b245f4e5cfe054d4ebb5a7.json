{"ast":null,"code":"import { cloneNode, Document } from 'domhandler';\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\n\nexport { isTag } from 'domhandler';\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\n\nexport function isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\n\nexport function camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, (_, x) => x.toUpperCase());\n}\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\n\nexport function cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\n\nexport function domEach(array, fn) {\n  const len = array.length;\n\n  for (let i = 0; i < len; i++) fn(array[i], i);\n\n  return array;\n}\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\n\nexport function cloneDom(dom) {\n  const clone = 'length' in dom ? Array.prototype.map.call(dom, el => cloneNode(el, true)) : [cloneNode(dom, true)]; // Add a root node around the cloned nodes\n\n  const root = new Document(clone);\n  clone.forEach(node => {\n    node.parent = root;\n  });\n  return clone;\n}\nvar CharacterCodes;\n\n(function (CharacterCodes) {\n  CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\n\n\nexport function isHtml(str) {\n  const tagStart = str.indexOf('<');\n  if (tagStart < 0 || tagStart > str.length - 3) return false;\n  const tagChar = str.charCodeAt(tagStart + 1);\n  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes('>', tagStart + 2);\n}","map":{"version":3,"mappings":"AAAA,SAAuBA,SAAvB,EAAkCC,QAAlC,QAAkD,YAAlD;AAGA;;;;;;;;;;;AAUA,SAASC,KAAT,QAAsB,YAAtB;AAEA;;;;;;;;AAOA,OAAM,SAAUC,SAAV,CAAuBC,YAAvB,EAAwC;EAC5C,OAAOA,YAAY,CAACC,OAAb,IAAwB,IAA/B;AACD;AAED;;;;;;;;;AAQA,OAAM,SAAUC,SAAV,CAAoBC,GAApB,EAA+B;EACnC,OAAOA,GAAG,CAACC,OAAJ,CAAY,cAAZ,EAA4B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,WAAF,EAAtC,CAAP;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAUC,OAAV,CAAkBL,GAAlB,EAA6B;EACjC,OAAOA,GAAG,CAACC,OAAJ,CAAY,QAAZ,EAAsB,KAAtB,EAA6BK,WAA7B,EAAP;AACD;AAED;;;;;;;;;;;;AAWA,OAAM,SAAUC,OAAV,CAGJC,KAHI,EAGQC,EAHR,EAG4C;EAChD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAlB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8BH,EAAE,CAACD,KAAK,CAACI,CAAD,CAAN,EAAWA,CAAX,CAAF;;EAC9B,OAAOJ,KAAP;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAUK,QAAV,CAAsCC,GAAtC,EAAkD;EACtD,MAAMC,KAAK,GACT,YAAYD,GAAZ,GACKE,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyBL,GAAzB,EAA+BM,EAAD,IAAQ3B,SAAS,CAAC2B,EAAD,EAAK,IAAL,CAA/C,CADL,GAEI,CAAC3B,SAAS,CAACqB,GAAD,EAAM,IAAN,CAAV,CAHN,CADsD,CAMtD;;EACA,MAAMO,IAAI,GAAG,IAAI3B,QAAJ,CAAaqB,KAAb,CAAb;EACAA,KAAK,CAACO,OAAN,CAAeC,IAAD,IAAS;IACrBA,IAAI,CAACC,MAAL,GAAcH,IAAd;EACD,CAFD;EAIA,OAAON,KAAP;AACD;AAED,IAAWU,cAAX;;AAAA,WAAWA,cAAX,EAAyB;EACvBA;EACAA;EACAA;EACAA;EACAA;AACD,CAND,EAAWA,cAAc,KAAdA,cAAc,MAAzB;AAQA;;;;;;;;;;;;;AAWA,OAAM,SAAUC,MAAV,CAAiB1B,GAAjB,EAA4B;EAChC,MAAM2B,QAAQ,GAAG3B,GAAG,CAAC4B,OAAJ,CAAY,GAAZ,CAAjB;EAEA,IAAID,QAAQ,GAAG,CAAX,IAAgBA,QAAQ,GAAG3B,GAAG,CAACW,MAAJ,GAAa,CAA5C,EAA+C,OAAO,KAAP;EAE/C,MAAMkB,OAAO,GAAG7B,GAAG,CAAC8B,UAAJ,CAAeH,QAAQ,GAAG,CAA1B,CAAhB;EAEA,OACE,CAAEE,OAAO,IAAIJ,cAAc,CAACM,MAA1B,IAAoCF,OAAO,IAAIJ,cAAc,CAACO,MAA/D,IACEH,OAAO,IAAIJ,cAAc,CAACQ,MAA1B,IAAoCJ,OAAO,IAAIJ,cAAc,CAACS,MADhE,IAECL,OAAO,KAAKJ,cAAc,CAACU,WAF7B,KAGAnC,GAAG,CAACoC,QAAJ,CAAa,GAAb,EAAkBT,QAAQ,GAAG,CAA7B,CAJF;AAMD","names":["cloneNode","Document","isTag","isCheerio","maybeCheerio","cheerio","camelCase","str","replace","_","x","toUpperCase","cssCase","toLowerCase","domEach","array","fn","len","length","i","cloneDom","dom","clone","Array","prototype","map","call","el","root","forEach","node","parent","CharacterCodes","isHtml","tagStart","indexOf","tagChar","charCodeAt","LowerA","LowerZ","UpperA","UpperZ","Exclamation","includes"],"sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sources":["utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}