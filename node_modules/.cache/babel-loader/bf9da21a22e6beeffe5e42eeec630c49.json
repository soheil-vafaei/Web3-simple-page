{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessLists = exports.checkMaxInitCodeSize = void 0;\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n\nfunction checkMaxInitCodeSize(common, length) {\n  if (length > common.param('vm', 'maxInitCodeSize')) {\n    throw new Error(\"the initcode size of this transaction is too large: it is \".concat(length, \" while the max is \").concat(common.param('vm', 'maxInitCodeSize')));\n  }\n}\n\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\n\nvar AccessLists =\n/** @class */\nfunction () {\n  function AccessLists() {}\n\n  AccessLists.getAccessListData = function (accessList) {\n    var AccessListJSON;\n    var bufferAccessList;\n\n    if (accessList && (0, types_1.isAccessList)(accessList)) {\n      AccessListJSON = accessList;\n      var newAccessList = [];\n\n      for (var i = 0; i < accessList.length; i++) {\n        var item = accessList[i];\n        var addressBuffer = (0, ethereumjs_util_1.toBuffer)(item.address);\n        var storageItems = [];\n\n        for (var index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push((0, ethereumjs_util_1.toBuffer)(item.storageKeys[index]));\n        }\n\n        newAccessList.push([addressBuffer, storageItems]);\n      }\n\n      bufferAccessList = newAccessList;\n    } else {\n      bufferAccessList = accessList !== null && accessList !== void 0 ? accessList : []; // build the JSON\n\n      var json = [];\n\n      for (var i = 0; i < bufferAccessList.length; i++) {\n        var data = bufferAccessList[i];\n        var address = (0, ethereumjs_util_1.bufferToHex)(data[0]);\n        var storageKeys = [];\n\n        for (var item = 0; item < data[1].length; item++) {\n          storageKeys.push((0, ethereumjs_util_1.bufferToHex)(data[1][item]));\n        }\n\n        var jsonItem = {\n          address: address,\n          storageKeys: storageKeys\n        };\n        json.push(jsonItem);\n      }\n\n      AccessListJSON = json;\n    }\n\n    return {\n      AccessListJSON: AccessListJSON,\n      accessList: bufferAccessList\n    };\n  };\n\n  AccessLists.verifyAccessList = function (accessList) {\n    for (var key = 0; key < accessList.length; key++) {\n      var accessListItem = accessList[key];\n      var address = accessListItem[0];\n      var storageSlots = accessListItem[1];\n\n      if (accessListItem[2] !== undefined) {\n        throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n      }\n\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n      }\n\n      for (var storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n        }\n      }\n    }\n  };\n\n  AccessLists.getAccessListJSON = function (accessList) {\n    var accessListJSON = [];\n\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var JSONItem = {\n        address: '0x' + (0, ethereumjs_util_1.setLengthLeft)(item[0], 20).toString('hex'),\n        storageKeys: []\n      };\n      var storageSlots = item[1];\n\n      for (var slot = 0; slot < storageSlots.length; slot++) {\n        var storageSlot = storageSlots[slot];\n        JSONItem.storageKeys.push('0x' + (0, ethereumjs_util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n      }\n\n      accessListJSON.push(JSONItem);\n    }\n\n    return accessListJSON;\n  };\n\n  AccessLists.getDataFeeEIP2930 = function (accessList, common) {\n    var accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n    var accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n    var slots = 0;\n\n    for (var index = 0; index < accessList.length; index++) {\n      var item = accessList[index];\n      var storageSlots = item[1];\n      slots += storageSlots.length;\n    }\n\n    var addresses = accessList.length;\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost;\n  };\n\n  return AccessLists;\n}();\n\nexports.AccessLists = AccessLists;","map":{"version":3,"mappings":"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","names":["checkMaxInitCodeSize","common","length","param","Error","concat","exports","AccessLists","accessList","AccessListJSON","bufferAccessList","newAccessList","i","item","addressBuffer","address","storageItems","index","storageKeys","push","json","data","jsonItem","key","accessListItem","storageSlots","undefined","storageSlot","accessListJSON","JSONItem","toString","slot","accessListStorageKeyCost","accessListAddressCost","slots","addresses"],"sourceRoot":"","sources":["../src/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}