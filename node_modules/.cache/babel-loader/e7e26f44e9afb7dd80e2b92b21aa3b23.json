{"ast":null,"code":"import { stream } from '../../stream/Stream.js';\nimport { Property } from '../property/Property.generic.js';\nimport { UnbiasedProperty } from '../property/UnbiasedProperty.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\n\nfunction toProperty(generator, qParams) {\n  const prop = !Object.prototype.hasOwnProperty.call(generator, 'isAsync') ? new Property(generator, () => true) : generator;\n  return qParams.unbiased === true ? new UnbiasedProperty(prop) : prop;\n}\n\nfunction streamSample(generator, params) {\n  const extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n  const qParams = QualifiedParameters.read(extendedParams);\n  const nextProperty = toProperty(generator, qParams);\n  const shrink = nextProperty.shrink.bind(nextProperty);\n  const tossedValues = stream(toss(nextProperty, qParams.seed, qParams.randomType, qParams.examples));\n\n  if (qParams.path.length === 0) {\n    return tossedValues.take(qParams.numRuns).map(s => s().value_);\n  }\n\n  return stream(pathWalk(qParams.path, tossedValues.map(s => s()), shrink)).take(qParams.numRuns).map(s => s.value_);\n}\n\nfunction sample(generator, params) {\n  return [...streamSample(generator, params)];\n}\n\nfunction round2(n) {\n  return (Math.round(n * 100) / 100).toFixed(2);\n}\n\nfunction statistics(generator, classify, params) {\n  const extendedParams = typeof params === 'number' ? Object.assign(Object.assign({}, readConfigureGlobal()), {\n    numRuns: params\n  }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n  const qParams = QualifiedParameters.read(extendedParams);\n  const recorded = {};\n\n  for (const g of streamSample(generator, params)) {\n    const out = classify(g);\n    const categories = Array.isArray(out) ? out : [out];\n\n    for (const c of categories) {\n      recorded[c] = (recorded[c] || 0) + 1;\n    }\n  }\n\n  const data = Object.entries(recorded).sort((a, b) => b[1] - a[1]).map(i => [i[0], `${round2(i[1] * 100.0 / qParams.numRuns)}%`]);\n  const longestName = data.map(i => i[0].length).reduce((p, c) => Math.max(p, c), 0);\n  const longestPercent = data.map(i => i[1].length).reduce((p, c) => Math.max(p, c), 0);\n\n  for (const item of data) {\n    qParams.logger(`${item[0].padEnd(longestName, '.')}..${item[1].padStart(longestPercent, '.')}`);\n  }\n}\n\nexport { sample, statistics };","map":{"version":3,"names":["stream","Property","UnbiasedProperty","readConfigureGlobal","QualifiedParameters","toss","pathWalk","toProperty","generator","qParams","prop","Object","prototype","hasOwnProperty","call","unbiased","streamSample","params","extendedParams","assign","numRuns","read","nextProperty","shrink","bind","tossedValues","seed","randomType","examples","path","length","take","map","s","value_","sample","round2","n","Math","round","toFixed","statistics","classify","recorded","g","out","categories","Array","isArray","c","data","entries","sort","a","b","i","longestName","reduce","p","max","longestPercent","item","logger","padEnd","padStart"],"sources":["/Users/soheilvafaei/Documents/resume/Web3/web3 simple react web3 js/node_modules/fast-check/lib/esm/check/runner/Sampler.js"],"sourcesContent":["import { stream } from '../../stream/Stream.js';\nimport { Property } from '../property/Property.generic.js';\nimport { UnbiasedProperty } from '../property/UnbiasedProperty.js';\nimport { readConfigureGlobal } from './configuration/GlobalParameters.js';\nimport { QualifiedParameters } from './configuration/QualifiedParameters.js';\nimport { toss } from './Tosser.js';\nimport { pathWalk } from './utils/PathWalker.js';\nfunction toProperty(generator, qParams) {\n    const prop = !Object.prototype.hasOwnProperty.call(generator, 'isAsync')\n        ? new Property(generator, () => true)\n        : generator;\n    return qParams.unbiased === true ? new UnbiasedProperty(prop) : prop;\n}\nfunction streamSample(generator, params) {\n    const extendedParams = typeof params === 'number'\n        ? Object.assign(Object.assign({}, readConfigureGlobal()), { numRuns: params }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n    const qParams = QualifiedParameters.read(extendedParams);\n    const nextProperty = toProperty(generator, qParams);\n    const shrink = nextProperty.shrink.bind(nextProperty);\n    const tossedValues = stream(toss(nextProperty, qParams.seed, qParams.randomType, qParams.examples));\n    if (qParams.path.length === 0) {\n        return tossedValues.take(qParams.numRuns).map((s) => s().value_);\n    }\n    return stream(pathWalk(qParams.path, tossedValues.map((s) => s()), shrink))\n        .take(qParams.numRuns)\n        .map((s) => s.value_);\n}\nfunction sample(generator, params) {\n    return [...streamSample(generator, params)];\n}\nfunction round2(n) {\n    return (Math.round(n * 100) / 100).toFixed(2);\n}\nfunction statistics(generator, classify, params) {\n    const extendedParams = typeof params === 'number'\n        ? Object.assign(Object.assign({}, readConfigureGlobal()), { numRuns: params }) : Object.assign(Object.assign({}, readConfigureGlobal()), params);\n    const qParams = QualifiedParameters.read(extendedParams);\n    const recorded = {};\n    for (const g of streamSample(generator, params)) {\n        const out = classify(g);\n        const categories = Array.isArray(out) ? out : [out];\n        for (const c of categories) {\n            recorded[c] = (recorded[c] || 0) + 1;\n        }\n    }\n    const data = Object.entries(recorded)\n        .sort((a, b) => b[1] - a[1])\n        .map((i) => [i[0], `${round2((i[1] * 100.0) / qParams.numRuns)}%`]);\n    const longestName = data.map((i) => i[0].length).reduce((p, c) => Math.max(p, c), 0);\n    const longestPercent = data.map((i) => i[1].length).reduce((p, c) => Math.max(p, c), 0);\n    for (const item of data) {\n        qParams.logger(`${item[0].padEnd(longestName, '.')}..${item[1].padStart(longestPercent, '.')}`);\n    }\n}\nexport { sample, statistics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}